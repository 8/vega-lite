{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/vl","vegalite.js","node_modules/browserify/node_modules/process/browser.js","node_modules/datalib/src/bin.js","node_modules/datalib/src/date-units.js","node_modules/datalib/src/generate.js","node_modules/datalib/src/util.js","src/Encoding.js","src/compile/aggregate.js","src/compile/axis.js","src/compile/bin.js","src/compile/compile.js","src/compile/facet.js","src/compile/filter.js","src/compile/group.js","src/compile/layout.js","src/compile/legend.js","src/compile/marks.js","src/compile/scale.js","src/compile/sort.js","src/compile/stack.js","src/compile/style.js","src/compile/subfacet.js","src/compile/template.js","src/compile/time.js","src/consts.js","src/data.js","src/enc.js","src/field.js","src/globals.js","src/schema/schema.js","src/schema/schemautil.js","src/util.js"],"names":["e","exports","module","define","amd","f","window","global","self","vl","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"util","consts","extend","Encoding","compile","data","field","enc","schema","toShorthand","shorthand","./Encoding","./compile/compile","./consts","./data","./enc","./field","./globals","./schema/schema","./util",2,3,"drainQueue","draining","currentQueue","len","queue","noop","process","nextTick","fun","push","setTimeout","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","binding","name","cwd","chdir","dir","umask",4,"bin","opt","step","logb","level","minstep","precision","v","eps","maxb","maxbins","base","Math","log","div","min","max","span","steps","bisect","ceil","pow","round","floor","start","stop","unit","value","index","x","lo","hi","mid","cmp","this","EPSILON","date_value","date","date_index","units","dmin","dmax","minb","minbins","find","bins","raw","./date-units",5,"STEPS","entries","type","format","d","Date","UTC","isNumber","getUTCFullYear","getUTCMonth","minuteOfHour","getUTCMinutes","hourOfDay","getUTCHours","dayOfWeek","getUTCDay","dayOfMonth","getUTCDate","monthOfYear","second","minute","hour","day","month","year","timesteps",6,"gen","repeat","val","Array","zeros","range","arguments","Infinity","j","random","uniform","undefined","samples","map","integer","b","normal","mean","stdev","next","rds","c","y","sqrt",7,"util_escape_str","replace","escape_str_re","truncateOnWord","rev","cnt","tok","split","truncate_word_re","reverse","filter","w","join","trim","slice","Buffer","isNode","stderr","toString","Object","prototype","isObject","obj","isFunction","isString","isArray","isNaN","parseFloat","isFinite","isBoolean","isDate","isNotNull","isBuffer","number","parse","array","str","JSON","stringify","identity","duplicate","equal","keys","k","vals","toMap","list","reduce","keystr","values","shift","apply","accessor","mutator","comparator","sort","sign","NaN","numcmp","stablesort","sortBy","keyFn","indices","idx","sa","sb","startsWith","String","string","searchString","lastIndexOf","truncate","pos","word","ellipsis","l1","l2","_process","buffer",8,"vlfield","vlenc","marktype","config","theme","defaults","instantiate","spec","dataTypes","specExtended","merge","_data","_marktype","_enc","_config","_filter","proto","is","m","has","encType","et","filterNull","fields","forEach","fieldList","fieldName","Q","containsType","T","O","operands","operator","concat","nodata","nofn","aggr","fn","fieldTitle","isCount","count","displayName","toUpperCase","scale","axis","band","bandSize","useSmallBand","Y","ROW","X","COL","size","MAXBINS_DEFAULT","legend","stats","isType","byCode","toggleSort","support","qField","init","role","text","prop","TEXT","font","fieldDef","isOrdinalScale","encoding","isDimension","isMeasure","isAggregate","alwaysNoOcclusion","isStack","color","cardinality","isRaw","toSpec","excludeConfig","dataTypeNames","subtract","assign","delim","fromShorthand","specFromShorthand","fromSpec","transpose","oldenc","row","col","direction","useTypeCode","mode","get","toggleFilterNullO","nulls","./compile/time",9,"aggregates","dims","meas","detail","facets","op","preaggregatedData","transform","groupby","details","aggregated","../globals","../util",10,"axis_title","def","layout","maxlength","cellWidth","cellHeight","setter","angle","align","baseline","dy","height","titleOffset","axisTitleOffset","axis_labels","time","hasScale","textTemplatePath","maxLabelLength","getter","names","props","defs","isCol","isRow","rowOffset","cellPadding","grid","layer","offset","stroke","x2","group","mult","opacity","orient","ticks","./time",11,"binning","output",12,"marks","aggregate","facet","stack","style","subfacet","template","mark","mdefs","mdef","addFilters","sorting","hasRow","hasCol","lineType","line","aggResult","hasDetails","from","by","legends","scales","properties","update","axes","filterLessThanZero","../Encoding","./aggregate","./axis","./bin","./facet","./filter","./group","./layout","./legend","./marks","./scale","./sort","./stack","./style","./subfacet","./template",13,"faceting","axesGrp","enter","facetKeys","cellAxes","fill","error","unshift","groupdef","width","trans",14,"BINARY",">",">=","=","!=","<","<=","filters","condition","op1","op2","console","warn","test",15,"_name",16,"vllayout","box","hasX","hasY","xCardinality","yCardinality","padding","colCardinality","rowCardinality","getMaxLength","maxLength","../field","../schema/schema",17,"COLOR","SIZE","SHAPE","shape","labels",18,"bar_props","p","xc","y2","yc","ALPHA","point_props","strokeWidth","line_props","area_props","tick_props","filled_point_props","text_props","fontSize","fontWeight","fontStyle","bg","TABLE","bar","requiredEncoding","supportedEncoding","alpha","area","tick","circle","square","point",19,"scale_domain","domain","getbins","STACKED","getDataset","scale_range","bandWidth","zero","nice","colorRange","outerPadding","points",20,"addSortTransforms","datasetMapping","counter","byClause","dataName","transforms","source","RAW",21,"stacking","dim","isXMeasure","isYMeasure","stacked","y1","y0",22,"estimateOpacity","numPoints","numMultiples",23,"subfaceting","g",24,"table","dataUrl","vldata","getUrl","url","../data",25,"timeFields","timeFn","tf","fieldFn","func","stat","yearstat","distinct","formula","expr","labelLength","substr","isOrdinalFn","isColor",26,"encodingTypes","DETAIL",27,"binSize","query","types","boolean",28,"encTypes","countRetinal","arr","indexOf","convertType","enctype",29,"getIsType","byName","shorthands","timefns","typeOrder","G","order","typeThenName","toLowerCase","original","typeThenCardinality",30,"INDEX",31,"enum","supportedEnums","supportedTypes","minimum","default","getSupportedRole","supportedRole","defaultTimeFn","scale_type","clone","typicalField","description","onlyOrdinalField","dimension","axisMixin","supportedMarktypes","sortMixin","items","required","bandMixin","legendMixin","textMixin","margin","weight","family","sizeMixin","colorMixin","alphaMixin","maximum","shapeMixin","detailMixin","rowMixin","colMixin","facetMixin","requiredNameType","multiRoleField","measure","quantitativeField","onlyQuantitativeField","formatType","vegaServer","viewport","gridColor","singleHeight","singleWidth","largeBandSize","smallBandSize","largeBandMaxCardinality","cellGridColor","cellBackgroundColor","textCellWidth","timeScaleLabelLength","characterWidth","$schema","./schemautil",32,"dest","src","hasOwnProperty","constructor","schemautil","isEmpty","instance","changes","ins",33,"isin","item","thisArg","noaugment","msg","datalib/src/bin","datalib/src/generate","datalib/src/util"],"mappings":"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","file":"vegalite.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\nvar globals = require('./globals'),\n    util = require('./util'),\n    consts = require('./consts');\n\nvar vl = {};\n\nutil.extend(vl, consts, util);\n\nvl.Encoding = require('./Encoding');\nvl.compile = require('./compile/compile');\nvl.data = require('./data');\nvl.field = require('./field');\nvl.enc = require('./enc');\nvl.schema = require('./schema/schema');\nvl.toShorthand = vl.Encoding.shorthand;\n\n\nmodule.exports = vl;\n","!function(e){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=e();else if(\"function\"==typeof define&&define.amd)define([],e);else{var f;\"undefined\"!=typeof window?f=window:\"undefined\"!=typeof global?f=global:\"undefined\"!=typeof self&&(f=self),f.vl=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nvar globals = require('./globals'),\n    util = require('./util'),\n    consts = require('./consts');\n\nvar vl = {};\n\nutil.extend(vl, consts, util);\n\nvl.Encoding = require('./Encoding');\nvl.compile = require('./compile/compile');\nvl.data = require('./data');\nvl.field = require('./field');\nvl.enc = require('./enc');\nvl.schema = require('./schema/schema');\nvl.toShorthand = vl.Encoding.shorthand;\n\n\nmodule.exports = vl;\n\n},{\"./Encoding\":8,\"./compile/compile\":12,\"./consts\":26,\"./data\":27,\"./enc\":28,\"./field\":29,\"./globals\":30,\"./schema/schema\":31,\"./util\":33}],2:[function(require,module,exports){\n\n},{}],3:[function(require,module,exports){\n// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    draining = true;\n    var currentQueue;\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        var i = -1;\n        while (++i < len) {\n            currentQueue[i]();\n        }\n        len = queue.length;\n    }\n    draining = false;\n}\nprocess.nextTick = function (fun) {\n    queue.push(fun);\n    if (!draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\n// TODO(shtylman)\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],4:[function(require,module,exports){\nvar util = require('./util');\nvar units = require('./date-units');\nvar EPSILON = 1e-15;\n\nfunction bin(opt) {\n  opt = opt || {};\n\n  // determine range\n  var maxb = opt.maxbins || 15,\n      base = opt.base || 10,\n      logb = Math.log(base),\n      div = opt.div || [5, 2],      \n      min = opt.min,\n      max = opt.max,\n      span = max - min,\n      step, logb, level, minstep, precision, v, i, eps;\n\n  if (opt.step != null) {\n    // if step size is explicitly given, use that\n    step = opt.step;\n  } else if (opt.steps) {\n    // if provided, limit choice to acceptable step sizes\n    step = opt.steps[Math.min(\n      opt.steps.length - 1,\n      bisect(opt.steps, span/maxb, 0, opt.steps.length)\n    )];\n  } else {\n    // else use span to determine step size\n    level = Math.ceil(Math.log(maxb) / logb);\n    minstep = opt.minstep || 0;\n    step = Math.max(\n      minstep,\n      Math.pow(base, Math.round(Math.log(span) / logb) - level)\n    );\n    \n    // increase step size if too many bins\n    do { step *= base; } while (Math.ceil(span/step) > maxb);\n\n    // decrease step size if allowed\n    for (i=0; i<div.length; ++i) {\n      v = step / div[i];\n      if (v >= minstep && span / v <= maxb) step = v;\n    }\n  }\n\n  // update precision, min and max\n  v = Math.log(step);\n  precision = v >= 0 ? 0 : ~~(-v / logb) + 1;\n  eps = Math.pow(base, -precision - 1);\n  min = Math.min(min, Math.floor(min / step + eps) * step);\n  max = Math.ceil(max / step) * step;\n\n  return {\n    start: min,\n    stop:  max,\n    step:  step,\n    unit:  {precision: precision},\n    value: value,\n    index: index\n  };\n};\n\nfunction bisect(a, x, lo, hi) {\n  while (lo < hi) {\n    var mid = lo + hi >>> 1;\n    if (util.cmp(a[mid], x) < 0) { lo = mid + 1; }\n    else { hi = mid; }\n  }\n  return lo;\n};\n\nfunction value(v) {\n  return this.step * Math.floor(v / this.step + EPSILON);\n}\n\nfunction index(v) {\n  return Math.floor((v - this.start) / this.step + EPSILON);\n}\n\nfunction date_value(v) {\n  return this.unit.date(value.call(this, v));\n}\n\nfunction date_index(v) {\n  return index.call(this, this.unit.unit(v));\n}\n\nbin.date = function(opt) {\n  opt = opt || {};\n\n  // find time step, then bin\n  var dmin = opt.min,\n      dmax = opt.max,\n      maxb = opt.maxbins || 20,\n      minb = opt.minbins || 4,\n      span = (+dmax) - (+dmin);\n      unit = opt.unit ? units[opt.unit] : units.find(span, minb, maxb),\n      bins = bin({\n        min:     unit.min != null ? unit.min : unit.unit(dmin),\n        max:     unit.max != null ? unit.max : unit.unit(dmax),\n        maxbins: maxb,\n        minstep: unit.minstep,\n        steps:   unit.step\n      });\n\n  bins.unit = unit;\n  bins.index = date_index;\n  if (!opt.raw) bins.value = date_value;\n  return bins;\n};\n\nmodule.exports = bin;\n\n},{\"./date-units\":5,\"./util\":7}],5:[function(require,module,exports){\nvar util = require('./util');\n\nvar STEPS = [\n  [31536e6, 5],  // 1-year\n  [7776e6, 4],   // 3-month\n  [2592e6, 4],   // 1-month\n  [12096e5, 3],  // 2-week\n  [6048e5, 3],   // 1-week\n  [1728e5, 3],   // 2-day\n  [864e5, 3],    // 1-day\n  [432e5, 2],    // 12-hour\n  [216e5, 2],    // 6-hour\n  [108e5, 2],    // 3-hour\n  [36e5, 2],     // 1-hour\n  [18e5, 1],     // 30-minute\n  [9e5, 1],      // 15-minute\n  [3e5, 1],      // 5-minute\n  [6e4, 1],      // 1-minute\n  [3e4, 0],      // 30-second\n  [15e3, 0],     // 15-second\n  [5e3, 0],      // 5-second\n  [1e3, 0]       // 1-second\n];\n\nvar entries = [\n  {\n    type: \"second\",\n    minstep: 1,\n    format: \"%Y %b %-d %H:%M:%S.%L\",\n    date: function(d) {\n      return new Date(d * 1e3);\n    },\n    unit: function(d) {\n      return (+d / 1e3);\n    }\n  },\n  {\n    type: \"minute\",\n    minstep: 1,\n    format: \"%Y %b %-d %H:%M\",\n    date: function(d) {\n      return new Date(d * 6e4);\n    },\n    unit: function(d) {\n      return ~~(+d / 6e4);\n    }\n  },\n  {\n    type: \"hour\",\n    minstep: 1,\n    format: \"%Y %b %-d %H:00\",\n    date: function(d) {\n      return new Date(d * 36e5);\n    },\n    unit: function(d) {\n      return ~~(+d / 36e5);\n    }\n  },\n  {\n    type: \"day\",\n    minstep: 1,\n    step: [1, 7],\n    format: \"%Y %b %-d\",\n    date: function(d) {\n      return new Date(d * 864e5);\n    },\n    unit: function(d) {\n      return ~~(+d / 864e5);\n    }\n  },\n  {\n    type: \"month\",\n    minstep: 1,\n    step: [1, 3, 6],\n    format: \"%b %Y\",\n    date: function(d) {\n      return new Date(Date.UTC(~~(d / 12), d % 12, 1));\n    },\n    unit: function(d) {\n      if (util.isNumber(d)) d = new Date(d);\n      return 12 * d.getUTCFullYear() + d.getUTCMonth();\n    }\n  },\n  {\n    type: \"year\",\n    minstep: 1,\n    format: \"%Y\",\n    date: function(d) {\n      return new Date(Date.UTC(d, 0, 1));\n    },\n    unit: function(d) {\n      return (util.isNumber(d) ? new Date(d) : d).getUTCFullYear();\n    }\n  }\n];\n\nvar minuteOfHour = {\n  type: \"minuteOfHour\",\n  min: 0,\n  max: 59,\n  minstep: 1,\n  format: \"%M\",\n  date: function(d) {\n    return new Date(Date.UTC(1970, 0, 1, 0, d));\n  },\n  unit: function(d) {\n    return (util.isNumber(d) ? new Date(d) : d).getUTCMinutes();\n  }\n};\n\nvar hourOfDay = {\n  type: \"hourOfDay\",\n  min: 0,\n  max: 23,\n  minstep: 1,\n  format: \"%H\",\n  date: function(d) {\n    return new Date(Date.UTC(1970, 0, 1, d));\n  },\n  unit: function(d) {\n    return (util.isNumber(d) ? new Date(d) : d).getUTCHours();\n  }\n};\n\nvar dayOfWeek = {\n  type: \"dayOfWeek\",\n  min: 0,\n  max: 6,\n  step: [1],\n  format: \"%a\",\n  date: function(d) {\n    return new Date(Date.UTC(1970, 0, 4 + d));\n  },\n  unit: function(d) {\n    return (util.isNumber(d) ? new Date(d) : d).getUTCDay();\n  }\n};\n\nvar dayOfMonth = {\n  type: \"dayOfMonth\",\n  min: 1,\n  max: 31,\n  step: [1],\n  format: \"%-d\",\n  date: function(d) {\n    return new Date(Date.UTC(1970, 0, d));\n  },\n  unit: function(d) {\n    return (util.isNumber(d) ? new Date(d) : d).getUTCDate();\n  }\n};\n\nvar monthOfYear = {\n  type: \"monthOfYear\",\n  min: 0,\n  max: 11,\n  step: [1],\n  format: \"%b\",\n  date: function(d) {\n    return new Date(Date.UTC(1970, d % 12, 1));\n  },\n  unit: function(d) {\n    return (util.isNumber(d) ? new Date(d) : d).getUTCMonth();\n  }\n};\n\nvar units = {\n  \"second\":       entries[0],\n  \"minute\":       entries[1],\n  \"hour\":         entries[2],\n  \"day\":          entries[3],\n  \"month\":        entries[4],\n  \"year\":         entries[5],\n  \"minuteOfHour\": minuteOfHour,\n  \"hourOfDay\":    hourOfDay,\n  \"dayOfWeek\":    dayOfWeek,\n  \"dayOfMonth\":   dayOfMonth,\n  \"monthOfYear\":  monthOfYear,\n  \"timesteps\":    entries\n};\n\nunits.find = function(span, minb, maxb) {\n  var i, len, bins, step = STEPS[0];\n\n  for (i = 1, len = STEPS.length; i < len; ++i) {\n    step = STEPS[i];\n    if (span > step[0]) {\n      bins = span / step[0];\n      if (bins > maxb) {\n        return entries[STEPS[i - 1][1]];\n      }\n      if (bins >= minb) {\n        return entries[step[1]];\n      }\n    }\n  }\n  return entries[STEPS[STEPS.length - 1][1]];\n};\n\nmodule.exports = units;\n\n},{\"./util\":7}],6:[function(require,module,exports){\nvar gen = module.exports = {};\n\ngen.repeat = function(val, n) {\n  var a = Array(n), i;\n  for (i=0; i<n; ++i) a[i] = val;\n  return a;\n};\n\ngen.zeros = function(n) {\n  return gen.repeat(0, n);\n};\n\ngen.range = function(start, stop, step) {\n  if (arguments.length < 3) {\n    step = 1;\n    if (arguments.length < 2) {\n      stop = start;\n      start = 0;\n    }\n  }\n  if ((stop - start) / step == Infinity) throw new Error('Infinite range');\n  var range = [], i = -1, j;\n  if (step < 0) while ((j = start + step * ++i) > stop) range.push(j);\n  else while ((j = start + step * ++i) < stop) range.push(j);\n  return range;\n};\n\ngen.random = {};\n\ngen.random.uniform = function(min, max) {\n  if (max === undefined) {\n\t\tmax = min;\n\t\tmin = 0;\n\t}\n\tvar d = max - min;\n\tvar f = function() {\n\t\treturn min + d * Math.random();\n\t};\n\tf.samples = function(n) { return gen.zeros(n).map(f); };\n\treturn f;\n};\n\ngen.random.integer = function(a, b) {\n\tif (b === undefined) {\n\t\tb = a;\n\t\ta = 0;\n\t}\n  var d = b - a;\n\tvar f = function() {\n\t\treturn a + Math.floor(d * Math.random());\n\t};\n\tf.samples = function(n) { return gen.zeros(n).map(f); };\n\treturn f;\n};\n\ngen.random.normal = function(mean, stdev) {\n\tmean = mean || 0;\n\tstdev = stdev || 1;\n\tvar next = undefined;\n\tvar f = function() {\n\t\tvar x = 0, y = 0, rds, c;\n\t\tif (next !== undefined) {\n\t\t\tx = next;\n\t\t\tnext = undefined;\n\t\t\treturn x;\n\t\t}\n\t\tdo {\n\t\t\tx = Math.random()*2-1;\n\t\t\ty = Math.random()*2-1;\n\t\t\trds = x*x + y*y;\n\t\t} while (rds == 0 || rds > 1);\n\t\tc = Math.sqrt(-2*Math.log(rds)/rds); // Box-Muller transform\n\t\tnext = mean + y*c*stdev;\n\t\treturn mean + x*c*stdev;\n\t};\n\tf.samples = function(n) { return gen.zeros(n).map(f); };\n\treturn f;\n};\n},{}],7:[function(require,module,exports){\n(function (process){\nvar Buffer = require('buffer').Buffer;\nvar u = module.exports = {};\n\n// where are we?\n\nu.isNode = typeof process !== 'undefined'\n        && typeof process.stderr !== 'undefined';\n\n// type checking functions\n\nvar toString = Object.prototype.toString;\n\nu.isObject = function(obj) {\n  return obj === Object(obj);\n};\n\nu.isFunction = function(obj) {\n  return toString.call(obj) == '[object Function]';\n};\n\nu.isString = function(obj) {\n  return toString.call(obj) == '[object String]';\n};\n\nu.isArray = Array.isArray || function(obj) {\n  return toString.call(obj) == '[object Array]';\n};\n\nu.isNumber = function(obj) {\n  return !isNaN(parseFloat(obj)) && isFinite(obj);\n};\n\nu.isBoolean = function(obj) {\n  return toString.call(obj) == '[object Boolean]';\n};\n\nu.isDate = function(obj) {\n  return toString.call(obj) == '[object Date]';\n};\n\nu.isNotNull = function(obj) {\n  return obj != null && (typeof obj !== 'number' ? true : !isNaN(obj));\n};\n\nu.isBuffer = (Buffer && Buffer.isBuffer) || u.false;\n\n// type coercion functions\n\nu.number = function(s) { return s == null ? null : +s; };\n\nu.boolean = function(s) { return s == null ? null : s==='false' ? false : !!s; };\n\nu.date = function(s) { return s == null ? null : Date.parse(s); }\n\nu.array = function(x) { return x != null ? (u.isArray(x) ? x : [x]) : []; };\n\nu.str = function(x) {\n  return u.isArray(x) ? \"[\" + x.map(u.str) + \"]\"\n    : u.isObject(x) ? JSON.stringify(x)\n    : u.isString(x) ? (\"'\"+util_escape_str(x)+\"'\") : x;\n};\n\nvar escape_str_re = /(^|[^\\\\])'/g;\n\nfunction util_escape_str(x) {\n  return x.replace(escape_str_re, \"$1\\\\'\");\n}\n\n// utility functions\n\nu.identity = function(x) { return x; };\n\nu.true = function() { return true; };\n\nu.false = function() { return false; };\n\nu.duplicate = function(obj) {\n  return JSON.parse(JSON.stringify(obj));\n};\n\nu.equal = function(a, b) {\n  return JSON.stringify(a) === JSON.stringify(b);\n};\n\nu.extend = function(obj) {\n  for (var x, name, i=1, len=arguments.length; i<len; ++i) {\n    x = arguments[i];\n    for (name in x) { obj[name] = x[name]; }\n  }\n  return obj;\n};\n\nu.keys = function(x) {\n  var keys = [], k;\n  for (k in x) keys.push(k);\n  return keys;\n};\n\nu.vals = function(x) {\n  var vals = [], k;\n  for (k in x) vals.push(x[k]);\n  return vals;\n};\n\nu.toMap = function(list) {\n  return list.reduce(function(obj, x) {\n    return (obj[x] = 1, obj);\n  }, {});\n};\n\nu.keystr = function(values) {\n  // use to ensure consistent key generation across modules\n  return values.join(\"|\");\n};\n\n// data access functions\n\nu.field = function(f) {\n  return f.split(\"\\\\.\")\n    .map(function(d) { return d.split(\".\"); })\n    .reduce(function(a, b) {\n      if (a.length) { a[a.length-1] += \".\" + b.shift(); }\n      a.push.apply(a, b);\n      return a;\n    }, []);\n};\n\nu.accessor = function(f) {\n  var s;\n  return (u.isFunction(f) || f==null)\n    ? f : u.isString(f) && (s=u.field(f)).length > 1\n    ? function(x) { return s.reduce(function(x,f) {\n          return x[f];\n        }, x);\n      }\n    : function(x) { return x[f]; };\n};\n\nu.mutator = function(f) {\n  var s;\n  return u.isString(f) && (s=u.field(f)).length > 1\n    ? function(x, v) {\n        for (var i=0; i<s.length-1; ++i) x = x[s[i]];\n        x[s[i]] = v;\n      }\n    : function(x, v) { x[f] = v; };\n};\n\n\n// comparison / sorting functions\n\nu.comparator = function(sort) {\n  var sign = [];\n  if (sort === undefined) sort = [];\n  sort = u.array(sort).map(function(f) {\n    var s = 1;\n    if      (f[0] === \"-\") { s = -1; f = f.slice(1); }\n    else if (f[0] === \"+\") { s = +1; f = f.slice(1); }\n    sign.push(s);\n    return u.accessor(f);\n  });\n  return function(a,b) {\n    var i, n, f, x, y;\n    for (i=0, n=sort.length; i<n; ++i) {\n      f = sort[i]; x = f(a); y = f(b);\n      if (x < y) return -1 * sign[i];\n      if (x > y) return sign[i];\n    }\n    return 0;\n  };\n};\n\nu.cmp = function(a, b) {\n  if (a < b) {\n    return -1;\n  } else if (a > b) {\n    return 1;\n  } else if (a >= b) {\n    return 0;\n  } else if (a === null && b === null) {\n    return 0;\n  } else if (a === null) {\n    return -1;\n  } else if (b === null) {\n    return 1;\n  }\n  return NaN;\n};\n\nu.numcmp = function(a, b) { return a - b; };\n\nu.stablesort = function(array, sortBy, keyFn) {\n  var indices = array.reduce(function(idx, v, i) {\n    return (idx[keyFn(v)] = i, idx);\n  }, {});\n\n  array.sort(function(a, b) {\n    var sa = sortBy(a),\n        sb = sortBy(b);\n    return sa < sb ? -1 : sa > sb ? 1\n         : (indices[keyFn(a)] - indices[keyFn(b)]);\n  });\n\n  return array;\n};\n\n\n// string functions\n\n// ES6 compatibility per https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith#Polyfill\n// We could have used the polyfill code, but lets wait until ES6 becomes a standard first\nu.startsWith = String.prototype.startsWith\n  ? function(string, searchString) {\n    return string.startsWith(searchString);\n  }\n  : function(string, searchString) {\n    return string.lastIndexOf(searchString, 0) === 0;\n  };\n\nu.truncate = function(s, length, pos, word, ellipsis) {\n  var len = s.length;\n  if (len <= length) return s;\n  ellipsis = ellipsis !== undefined ? String(ellipsis) : \"…\";\n  var l = Math.max(0, length - ellipsis.length);\n\n  switch (pos) {\n    case \"left\":\n      return ellipsis + (word ? truncateOnWord(s,l,1) : s.slice(len-l));\n    case \"middle\":\n    case \"center\":\n      var l1 = Math.ceil(l/2), l2 = Math.floor(l/2);\n      return (word ? truncateOnWord(s,l1) : s.slice(0,l1)) + ellipsis\n        + (word ? truncateOnWord(s,l2,1) : s.slice(len-l2));\n    default:\n      return (word ? truncateOnWord(s,l) : s.slice(0,l)) + ellipsis;\n  }\n};\n\nfunction truncateOnWord(s, len, rev) {\n  var cnt = 0, tok = s.split(truncate_word_re);\n  if (rev) {\n    s = (tok = tok.reverse())\n      .filter(function(w) { cnt += w.length; return cnt <= len; })\n      .reverse();\n  } else {\n    s = tok.filter(function(w) { cnt += w.length; return cnt <= len; });\n  }\n  return s.length ? s.join(\"\").trim() : tok[0].slice(0, len);\n}\n\nvar truncate_word_re = /([\\u0009\\u000A\\u000B\\u000C\\u000D\\u0020\\u00A0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u2028\\u2029\\u3000\\uFEFF])/;\n\n}).call(this,require('_process'))\n\n},{\"_process\":3,\"buffer\":2}],8:[function(require,module,exports){\n'use strict';\n\nvar globals = require('./globals'),\n  consts = require('./consts'),\n  util = require('./util'),\n  vlfield = require('./field'),\n  vlenc = require('./enc'),\n  schema = require('./schema/schema'),\n  time = require('./compile/time');\n\nvar Encoding = module.exports = (function() {\n\n  function Encoding(marktype, enc, data, config, filter, theme) {\n    var defaults = schema.instantiate();\n\n    var spec = {\n      data: data,\n      marktype: marktype,\n      enc: enc,\n      config: config,\n      filter: filter || []\n    };\n\n    // type to bitcode\n    for (var e in defaults.enc) {\n      defaults.enc[e].type = consts.dataTypes[defaults.enc[e].type];\n    }\n\n    var specExtended = schema.util.merge(defaults, theme || {}, spec) ;\n\n    this._data = specExtended.data;\n    this._marktype = specExtended.marktype;\n    this._enc = specExtended.enc;\n    this._config = specExtended.config;\n    this._filter = specExtended.filter;\n  }\n\n  var proto = Encoding.prototype;\n\n  proto.marktype = function() {\n    return this._marktype;\n  };\n\n  proto.is = function(m) {\n    return this._marktype === m;\n  };\n\n  proto.has = function(encType) {\n    // equivalent to calling vlenc.has(this._enc, encType)\n    return this._enc[encType].name !== undefined;\n  };\n\n  proto.enc = function(et) {\n    return this._enc[et];\n  };\n\n  proto.filter = function() {\n    var filterNull = [],\n      fields = this.fields(),\n      self = this;\n\n    util.forEach(fields, function(fieldList, fieldName) {\n      if (fieldName === '*') return; //count\n\n      if ((self.config('filterNull').Q && fieldList.containsType[Q]) ||\n          (self.config('filterNull').T && fieldList.containsType[T]) ||\n          (self.config('filterNull').O && fieldList.containsType[O])) {\n        filterNull.push({\n          operands: [fieldName],\n          operator: 'notNull'\n        });\n      }\n    });\n\n    return filterNull.concat(this._filter);\n  };\n\n  // get \"field\" property for vega\n  proto.field = function(et, nodata, nofn) {\n    if (!this.has(et)) return null;\n\n    var f = (nodata ? '' : 'data.');\n\n    if (this._enc[et].aggr === 'count') {\n      return f + 'count';\n    } else if (!nofn && this._enc[et].bin) {\n      return f + 'bin_' + this._enc[et].name;\n    } else if (!nofn && this._enc[et].aggr) {\n      return f + this._enc[et].aggr + '_' + this._enc[et].name;\n    } else if (!nofn && this._enc[et].fn) {\n      return f + this._enc[et].fn + '_' + this._enc[et].name;\n    } else {\n      return f + this._enc[et].name;\n    }\n  };\n\n  proto.fieldName = function(et) {\n    return this._enc[et].name;\n  };\n\n  /*\n   * return key-value pairs of field name and list of fields of that field name\n   */\n  proto.fields = function() {\n    return vlenc.fields(this._enc);\n  };\n\n  proto.fieldTitle = function(et) {\n    if (vlfield.isCount(this._enc[et])) {\n      return vlfield.count.displayName;\n    }\n    var fn = this._enc[et].aggr || this._enc[et].fn || (this._enc[et].bin && \"bin\");\n    if (fn) {\n      return fn.toUpperCase() + '(' + this._enc[et].name + ')';\n    } else {\n      return this._enc[et].name;\n    }\n  };\n\n  proto.scale = function(et) {\n    return this._enc[et].scale || {};\n  };\n\n  proto.axis = function(et) {\n    return this._enc[et].axis || {};\n  };\n\n  proto.band = function(et) {\n    return this._enc[et].band || {};\n  };\n\n  proto.bandSize = function(encType, useSmallBand) {\n    useSmallBand = useSmallBand ||\n      //isBandInSmallMultiples\n      (encType === Y && this.has(ROW) && this.has(Y)) ||\n      (encType === X && this.has(COL) && this.has(X));\n\n    // if band.size is explicitly specified, follow the specification, otherwise draw value from config.\n    return this.band(encType).size ||\n      this.config(useSmallBand ? 'smallBandSize' : 'largeBandSize');\n  };\n\n  proto.aggr = function(et) {\n    return this._enc[et].aggr;\n  };\n\n  // returns false if binning is disabled, otherwise an object with binning properties\n  proto.bin = function(et) {\n    var bin = this._enc[et].bin;\n    if (bin === {})\n      return false;\n    if (bin === true)\n      return {\n        maxbins: schema.MAXBINS_DEFAULT\n      };\n    return bin;\n  };\n\n  proto.legend = function(et) {\n    return this._enc[et].legend;\n  };\n\n  proto.value = function(et) {\n    return this._enc[et].value;\n  };\n\n  proto.fn = function(et) {\n    return this._enc[et].fn;\n  };\n\n  proto.sort = function(et, stats) {\n    var sort = this._enc[et].sort,\n      enc = this._enc,\n      isType = vlfield.isType.byCode;\n\n    // console.log('sort:', sort, 'support:', Encoding.toggleSort.support({enc:this._enc}, stats) , 'toggle:', this.config('toggleSort'))\n\n    if ((!sort || sort.length===0) &&\n        Encoding.toggleSort.support({enc:this._enc}, stats, true) && //HACK\n        this.config('toggleSort') === 'Q'\n      ) {\n      var qField = isType(enc.x, O) ? enc.y : enc.x;\n\n      if (isType(enc[et], O)) {\n        sort = [{\n          name: qField.name,\n          aggr: qField.aggr,\n          type: qField.type,\n          reverse: true\n        }];\n      }\n    }\n\n    return sort;\n  };\n\n  proto.length = function() {\n    return util.keys(this._enc).length;\n  };\n\n  proto.map = function(f) {\n    return vlenc.map(this._enc, f);\n  };\n\n  proto.reduce = function(f, init) {\n    return vlenc.reduce(this._enc, f, init);\n  };\n\n  proto.forEach = function(f) {\n    return vlenc.forEach(this._enc, f);\n  };\n\n  proto.type = function(et) {\n    return this.has(et) ? this._enc[et].type : null;\n  };\n\n  proto.role = function(et) {\n    return this.has(et) ? vlfield.role(this._enc[et]) : null;\n  };\n\n  proto.text = function(prop) {\n    var text = this._enc[TEXT].text;\n    return prop ? text[prop] : text;\n  };\n\n  proto.font = function(prop) {\n    var font = this._enc[TEXT].font;\n    return prop ? font[prop] : font;\n  };\n\n  proto.isType = function(et, type) {\n    var field = this.enc(et);\n    return field && Encoding.isType(field, type);\n  };\n\n  Encoding.isType = function (fieldDef, type) {\n    // FIXME vlfield.isType\n    return (fieldDef.type & type) > 0;\n  };\n\n  Encoding.isOrdinalScale = function(encoding, encType) {\n    return vlfield.isOrdinalScale(encoding.enc(encType), true);\n  };\n\n  Encoding.isDimension = function(encoding, encType) {\n    return vlfield.isDimension(encoding.enc(encType), true);\n  };\n\n  Encoding.isMeasure = function(encoding, encType) {\n    return vlfield.isMeasure(encoding.enc(encType), true);\n  };\n\n  proto.isOrdinalScale = function(encType) {\n    return this.has(encType) && Encoding.isOrdinalScale(this, encType);\n  };\n\n  proto.isDimension = function(encType) {\n    return this.has(encType) && Encoding.isDimension(this, encType);\n  };\n\n  proto.isMeasure = function(encType) {\n    return this.has(encType) && Encoding.isMeasure(this, encType);\n  };\n\n  proto.isAggregate = function() {\n    return vlenc.isAggregate(this._enc);\n  };\n\n  Encoding.isAggregate = function(spec) {\n    return vlenc.isAggregate(spec.enc);\n  };\n\n  Encoding.alwaysNoOcclusion = function(spec, stats) {\n    // FIXME raw OxQ with # of rows = # of O\n    return vlenc.isAggregate(spec.enc);\n  };\n\n  Encoding.isStack = function(spec) {\n    // FIXME update this once we have control for stack ...\n    return (spec.marktype === 'bar' || spec.marktype === 'area') &&\n      spec.enc.color;\n  };\n\n  proto.isStack = function() {\n    // FIXME update this once we have control for stack ...\n    return (this.is('bar') || this.is('area')) && this.has('color');\n  };\n\n  proto.cardinality = function(encType, stats) {\n    return vlfield.cardinality(this.enc(encType), stats, this.config('filterNull'), true);\n  };\n\n  proto.isRaw = function() {\n    return !this.isAggregate();\n  };\n\n  proto.data = function(name) {\n    return this._data[name];\n  };\n\n  proto.config = function(name) {\n    return this._config[name];\n  };\n\n  proto.toSpec = function(excludeConfig) {\n    var enc = util.duplicate(this._enc),\n      spec;\n\n    // convert type's bitcode to type name\n    for (var e in enc) {\n      enc[e].type = consts.dataTypeNames[enc[e].type];\n    }\n\n    spec = {\n      marktype: this._marktype,\n      enc: enc,\n      filter: this._filter\n    };\n\n    if (!excludeConfig) {\n      spec.config = util.duplicate(this._config);\n    }\n\n    // remove defaults\n    var defaults = schema.instantiate();\n    return schema.util.subtract(spec, defaults);\n  };\n\n  proto.toShorthand = function() {\n    var c = consts.shorthand;\n    return 'mark' + c.assign + this._marktype +\n      c.delim + vlenc.shorthand(this._enc);\n  };\n\n  Encoding.shorthand = function (spec) {\n    var c = consts.shorthand;\n    return 'mark' + c.assign + spec.marktype +\n      c.delim + vlenc.shorthand(spec.enc);\n  };\n\n  Encoding.fromShorthand = function(shorthand, data, config, theme) {\n    var c = consts.shorthand,\n        split = shorthand.split(c.delim),\n        marktype = split.shift().split(c.assign)[1].trim(),\n        enc = vlenc.fromShorthand(split, true);\n\n    return new Encoding(marktype, enc, data, config, null, theme);\n  };\n\n  Encoding.specFromShorthand = function(shorthand, data, config, excludeConfig) {\n    return Encoding.fromShorthand(shorthand, data, config).toSpec(excludeConfig);\n  };\n\n  Encoding.fromSpec = function(spec, theme) {\n    var enc = util.duplicate(spec.enc || {});\n\n    //convert type from string to bitcode (e.g, O=1)\n    for (var e in enc) {\n      enc[e].type = consts.dataTypes[enc[e].type];\n    }\n\n    return new Encoding(spec.marktype, enc, spec.data, spec.config, spec.filter, theme);\n  };\n\n  Encoding.transpose = function(spec) {\n    var oldenc = spec.enc,\n      enc = util.duplicate(spec.enc);\n    enc.x = oldenc.y;\n    enc.y = oldenc.x;\n    enc.row = oldenc.col;\n    enc.col = oldenc.row;\n    spec.enc = enc;\n    return spec;\n  };\n\n  Encoding.toggleSort = function(spec) {\n    spec.config = spec.config || {};\n    spec.config.toggleSort = spec.config.toggleSort === 'Q' ? 'O' :'Q';\n    return spec;\n  };\n\n\n  Encoding.toggleSort.direction = function(spec, useTypeCode) {\n    if (!Encoding.toggleSort.support(spec, useTypeCode)) { return; }\n    var enc = spec.enc;\n    return enc.x.type === 'O' ? 'x' :  'y';\n  };\n\n  Encoding.toggleSort.mode = function(spec) {\n    return spec.config.toggleSort;\n  };\n\n  Encoding.toggleSort.support = function(spec, stats, useTypeCode) {\n    var enc = spec.enc,\n      isType = vlfield.isType.get(useTypeCode);\n\n    if (vlenc.has(enc, ROW) || vlenc.has(enc, COL) ||\n      !vlenc.has(enc, X) || !vlenc.has(enc, Y) ||\n      !Encoding.alwaysNoOcclusion(spec, stats)) {\n      return false;\n    }\n\n    return ( isType(enc.x, O) && vlfield.isMeasure(enc.y, useTypeCode)) ? 'x' :\n      ( isType(enc.y, O) && vlfield.isMeasure(enc.x, useTypeCode)) ? 'y' : false;\n  };\n\n  Encoding.toggleFilterNullO = function(spec) {\n    spec.config = spec.config || {};\n    spec.config.filterNull = spec.config.filterNull || { //FIXME\n      T: true,\n      Q: true\n    };\n    spec.config.filterNull.O = !spec.config.filterNull.O;\n    return spec;\n  };\n\n  Encoding.toggleFilterNullO.support = function(spec, stats) {\n    var fields = vlenc.fields(spec.enc);\n    for (var fieldName in fields) {\n      var fieldList = fields[fieldName];\n      if (fieldList.containsType.O && fieldName in stats && stats[fieldName].nulls > 0) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  return Encoding;\n})();\n\n},{\"./compile/time\":25,\"./consts\":26,\"./enc\":28,\"./field\":29,\"./globals\":30,\"./schema/schema\":31,\"./util\":33}],9:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util');\n\nmodule.exports = aggregates;\n\nfunction aggregates(spec, encoding, opt) {\n  opt = opt || {};\n\n  var dims = {}, meas = {}, detail = {}, facets = {},\n    data = spec.data[1]; // currently data[0] is raw and data[1] is table\n\n  encoding.forEach(function(field, encType) {\n    if (field.aggr) {\n      if (field.aggr === 'count') {\n        meas.count = {op: 'count', field: '*'};\n      }else {\n        meas[field.aggr + '|'+ field.name] = {\n          op: field.aggr,\n          field: 'data.'+ field.name\n        };\n      }\n    } else {\n      dims[field.name] = encoding.field(encType);\n      if (encType == ROW || encType == COL) {\n        facets[field.name] = dims[field.name];\n      }else if (encType !== X && encType !== Y) {\n        detail[field.name] = dims[field.name];\n      }\n    }\n  });\n  dims = util.vals(dims);\n  meas = util.vals(meas);\n\n  if (meas.length > 0 && !opt.preaggregatedData) {\n    if (!data.transform) data.transform = [];\n    data.transform.push({\n      type: 'aggregate',\n      groupby: dims,\n      fields: meas\n    });\n  }\n  return {\n    details: util.vals(detail),\n    dims: dims,\n    facets: util.vals(facets),\n    aggregated: meas.length > 0\n  };\n}\n\n},{\"../globals\":30,\"../util\":33}],10:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  setter = util.setter,\n  getter = util.getter,\n  time = require('./time');\n\nvar axis = module.exports = {};\n\naxis.names = function(props) {\n  return util.keys(util.keys(props).reduce(function(a, x) {\n    var s = props[x].scale;\n    if (s === X || s === Y) a[props[x].scale] = 1;\n    return a;\n  }, {}));\n};\n\naxis.defs = function(names, encoding, layout, stats, opt) {\n  return names.reduce(function(a, name) {\n    a.push(axis.def(name, encoding, layout, stats, opt));\n    return a;\n  }, []);\n};\n\naxis.def = function(name, encoding, layout, stats, opt) {\n  var type = name;\n  var isCol = name == COL, isRow = name == ROW;\n  var rowOffset = axisTitleOffset(encoding, layout, Y) + 20,\n    cellPadding = layout.cellPadding;\n\n\n  if (isCol) type = 'x';\n  if (isRow) type = 'y';\n\n  var def = {\n    type: type,\n    scale: name\n  };\n\n  if (encoding.axis(name).grid) {\n    def.grid = true;\n    def.layer = (isRow || isCol) ? 'front' :  'back';\n\n    if (isCol) {\n      // set grid property -- put the lines on the right the cell\n      setter(def, ['properties', 'grid'], {\n        x: {\n          offset: layout.cellWidth * (1+ cellPadding/2.0),\n          // default value(s) -- vega doesn't do recursive merge\n          scale: 'col'\n        },\n        y: {\n          value: -layout.cellHeight * (cellPadding/2),\n        },\n        stroke: { value: encoding.config('cellGridColor') }\n      });\n    } else if (isRow) {\n      // set grid property -- put the lines on the top\n      setter(def, ['properties', 'grid'], {\n        y: {\n          offset: -layout.cellHeight * (cellPadding/2),\n          // default value(s) -- vega doesn't do recursive merge\n          scale: 'row'\n        },\n        x: {\n          value: rowOffset\n        },\n        x2: {\n          offset: rowOffset + (layout.cellWidth * 0.05),\n          // default value(s) -- vega doesn't do recursive merge\n          group: \"mark.group.width\",\n          mult: 1\n        },\n        stroke: { value: encoding.config('cellGridColor') }\n      });\n    } else {\n      setter(def, ['properties', 'grid', 'stroke'], {\n        value: encoding.config('gridColor')\n      });\n    }\n  }\n\n  if (encoding.axis(name).title) {\n    def = axis_title(def, name, encoding, layout, opt);\n  }\n\n  if (isRow || isCol) {\n    setter(def, ['properties', 'ticks'], {\n      opacity: {value: 0}\n    });\n    setter(def, ['properties', 'majorTicks'], {\n      opacity: {value: 0}\n    });\n    setter(def, ['properties', 'axis'], {\n      opacity: {value: 0}\n    });\n  }\n\n  if (isCol) {\n    def.orient = 'top';\n  }\n\n  if (isRow) {\n    def.offset = rowOffset;\n  }\n\n  if (name == X) {\n    if (encoding.has(Y) && encoding.isOrdinalScale(Y) && encoding.cardinality(Y, stats) > 30) {\n      def.orient = 'top';\n    }\n\n    if (encoding.isDimension(X) || encoding.isType(X, T)) {\n      setter(def, ['properties','labels'], {\n        angle: {value: 270},\n        align: {value: 'right'},\n        baseline: {value: 'middle'}\n      });\n    } else { // Q\n      def.ticks = 5;\n    }\n  }\n\n  def = axis_labels(def, name, encoding, layout, opt);\n\n  return def;\n};\n\nfunction axis_title(def, name, encoding, layout, opt) {\n  var maxlength = null,\n    fieldTitle = encoding.fieldTitle(name);\n  if (name===X) {\n    maxlength = layout.cellWidth / encoding.config('characterWidth');\n  } else if (name === Y) {\n    maxlength = layout.cellHeight / encoding.config('characterWidth');\n  }\n\n  def.title = maxlength ? util.truncate(fieldTitle, maxlength) : fieldTitle;\n\n  if (name === ROW) {\n    setter(def, ['properties','title'], {\n      angle: {value: 0},\n      align: {value: 'right'},\n      baseline: {value: 'middle'},\n      dy: {value: (-layout.height/2) -20}\n    });\n  }\n\n  def.titleOffset = axisTitleOffset(encoding, layout, name);\n  return def;\n}\n\nfunction axis_labels(def, name, encoding, layout, opt) {\n  var fn;\n  // add custom label for time type\n  if (encoding.isType(name, T) && (fn = encoding.fn(name)) && (time.hasScale(fn))) {\n    setter(def, ['properties','labels','text','scale'], 'time-'+ fn);\n  }\n\n  var textTemplatePath = ['properties','labels','text','template'];\n  if (encoding.axis(name).format) {\n    def.format = encoding.axis(name).format;\n  } else if (encoding.isType(name, Q)) {\n    setter(def, textTemplatePath, \"{{data | number:'.3s'}}\");\n  } else if (encoding.isType(name, T) && !encoding.fn(name)) {\n    setter(def, textTemplatePath, \"{{data | time:'%Y-%m-%d'}}\");\n  } else if (encoding.isType(name, T) && encoding.fn(name) === 'year') {\n    setter(def, textTemplatePath, \"{{data | number:'d'}}\");\n  } else if (encoding.isType(name, O) && encoding.axis(name).maxLabelLength) {\n    setter(def, textTemplatePath, '{{data | truncate:' + encoding.axis(name).maxLabelLength + '}}');\n  }\n\n  return def;\n}\n\nfunction axisTitleOffset(encoding, layout, name) {\n  var value = encoding.axis(name).titleOffset;\n  if (value) {\n    return value;\n  }\n  switch (name) {\n    case ROW: return 0;\n    case COL: return 35;\n  }\n  return getter(layout, [name, 'axisTitleOffset']);\n}\n\n},{\"../globals\":30,\"../util\":33,\"./time\":25}],11:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util');\n\nmodule.exports = binning;\n\nfunction binning(spec, encoding, opt) {\n  opt = opt || {};\n  var bins = {};\n\n  if (opt.preaggregatedData) {\n    return;\n  }\n\n  if (!spec.transform) spec.transform = [];\n\n  encoding.forEach(function(field, encType) {\n    if (encoding.bin(encType)) {\n      spec.transform.push({\n        type: 'bin',\n        field: 'data.' + field.name,\n        output: 'data.bin_' + field.name,\n        maxbins: encoding.bin(encType).maxbins\n      });\n    }\n  });\n}\n\n},{\"../globals\":30,\"../util\":33}],12:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals');\n\nmodule.exports = compile;\n\nvar Encoding = require('../Encoding'),\n  axis = compile.axis = require('./axis'),\n  filter = compile.filter = require('./filter'),\n  legend = compile.legend = require('./legend'),\n  marks = compile.marks = require('./marks'),\n  scale = compile.scale = require('./scale');\n\ncompile.aggregate = require('./aggregate');\ncompile.bin = require('./bin');\ncompile.facet = require('./facet');\ncompile.group = require('./group');\ncompile.layout = require('./layout');\ncompile.sort = require('./sort');\ncompile.stack = require('./stack');\ncompile.style = require('./style');\ncompile.subfacet = require('./subfacet');\ncompile.template = require('./template');\ncompile.time = require('./time');\n\nfunction compile(spec, stats, theme) {\n  return compile.encoding(Encoding.fromSpec(spec, theme), stats);\n}\n\ncompile.shorthand = function (shorthand, stats, config, theme) {\n  return compile.encoding(Encoding.fromShorthand(shorthand, config, theme), stats);\n};\n\ncompile.encoding = function (encoding, stats) {\n  var layout = compile.layout(encoding, stats),\n    style = compile.style(encoding, stats),\n    spec = compile.template(encoding, layout, stats),\n    group = spec.marks[0],\n    mark = marks[encoding.marktype()],\n    mdefs = marks.def(mark, encoding, layout, style),\n    mdef = mdefs[0];  // TODO: remove this dirty hack by refactoring the whole flow\n\n  filter.addFilters(spec, encoding);\n  var sorting = compile.sort(spec, encoding, stats);\n\n  var hasRow = encoding.has(ROW), hasCol = encoding.has(COL);\n\n  var preaggregatedData = !!encoding.data('vegaServer');\n\n  for (var i = 0; i < mdefs.length; i++) {\n    group.marks.push(mdefs[i]);\n  }\n\n  compile.bin(spec.data[1], encoding, {preaggregatedData: preaggregatedData});\n\n  var lineType = marks[encoding.marktype()].line;\n\n  if (!preaggregatedData) {\n    spec = compile.time(spec, encoding);\n  }\n\n  // handle subfacets\n  var aggResult = compile.aggregate(spec, encoding, {preaggregatedData: preaggregatedData}),\n    details = aggResult.details,\n    hasDetails = details && details.length > 0,\n    stack = hasDetails && compile.stack(spec, encoding, mdef, aggResult.facets);\n\n  if (hasDetails && (stack || lineType)) {\n    //subfacet to group stack / line together in one group\n    compile.subfacet(group, mdef, details, stack, encoding);\n  }\n\n  // auto-sort line/area values\n  //TODO(kanitw): have some config to turn off auto-sort for line (for line chart that encodes temporal information)\n  if (lineType) {\n    var f = (encoding.isMeasure(X) && encoding.isDimension(Y)) ? Y : X;\n    if (!mdef.from) mdef.from = {};\n    // TODO: why - ?\n    mdef.from.transform = [{type: 'sort', by: '-' + encoding.field(f)}];\n  }\n\n  // Small Multiples\n  if (hasRow || hasCol) {\n    spec = compile.facet(group, encoding, layout, style, sorting, spec, mdef, stack, stats);\n    spec.legends = legend.defs(encoding);\n  } else {\n    group.scales = scale.defs(scale.names(mdef.properties.update), encoding, layout, style, sorting,\n      {stack: stack, stats: stats});\n    group.axes = axis.defs(axis.names(mdef.properties.update), encoding, layout, stats);\n    group.legends = legend.defs(encoding);\n  }\n\n  filter.filterLessThanZero(spec, encoding);\n\n  return spec;\n};\n\n\n},{\"../Encoding\":8,\"../globals\":30,\"./aggregate\":9,\"./axis\":10,\"./bin\":11,\"./facet\":13,\"./filter\":14,\"./group\":15,\"./layout\":16,\"./legend\":17,\"./marks\":18,\"./scale\":19,\"./sort\":20,\"./stack\":21,\"./style\":22,\"./subfacet\":23,\"./template\":24,\"./time\":25}],13:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util');\n\nvar axis = require('./axis'),\n  groupdef = require('./group').def,\n  scale = require('./scale');\n\nmodule.exports = faceting;\n\nfunction faceting(group, encoding, layout, style, sorting, spec, mdef, stack, stats) {\n  var enter = group.properties.enter;\n  var facetKeys = [], cellAxes = [], from, axesGrp;\n\n  var hasRow = encoding.has(ROW), hasCol = encoding.has(COL);\n\n  enter.fill = {value: encoding.config('cellBackgroundColor')};\n\n  //move \"from\" to cell level and add facet transform\n  group.from = {data: group.marks[0].from.data};\n\n  // Hack, this needs to be refactored\n  for (var i = 0; i < group.marks.length; i++) {\n    var mark = group.marks[i];\n    if (mark.from.transform) {\n      delete mark.from.data; //need to keep transform for subfacetting case\n    } else {\n      delete mark.from;\n    }\n  }\n\n  if (hasRow) {\n    if (!encoding.isDimension(ROW)) {\n      util.error('Row encoding should be ordinal.');\n    }\n    enter.y = {scale: ROW, field: 'keys.' + facetKeys.length};\n    enter.height = {'value': layout.cellHeight}; // HACK\n\n    facetKeys.push(encoding.field(ROW));\n\n    if (hasCol) {\n      from = util.duplicate(group.from);\n      from.transform = from.transform || [];\n      from.transform.unshift({type: 'facet', keys: [encoding.field(COL)]});\n    }\n\n    axesGrp = groupdef('x-axes', {\n        axes: encoding.has(X) ? axis.defs(['x'], encoding, layout, stats) : undefined,\n        x: hasCol ? {scale: COL, field: 'keys.0'} : {value: 0},\n        width: hasCol && {'value': layout.cellWidth}, //HACK?\n        from: from\n      });\n\n    spec.marks.unshift(axesGrp); // need to prepend so it appears under the plots\n    (spec.axes = spec.axes || []);\n    spec.axes.push.apply(spec.axes, axis.defs(['row'], encoding, layout, stats));\n  } else { // doesn't have row\n    if (encoding.has(X)) {\n      //keep x axis in the cell\n      cellAxes.push.apply(cellAxes, axis.defs(['x'], encoding, layout, stats));\n    }\n  }\n\n  if (hasCol) {\n    if (!encoding.isDimension(COL)) {\n      util.error('Col encoding should be ordinal.');\n    }\n    enter.x = {scale: COL, field: 'keys.' + facetKeys.length};\n    enter.width = {'value': layout.cellWidth}; // HACK\n\n    facetKeys.push(encoding.field(COL));\n\n    if (hasRow) {\n      from = util.duplicate(group.from);\n      from.transform = from.transform || [];\n      from.transform.unshift({type: 'facet', keys: [encoding.field(ROW)]});\n    }\n\n    axesGrp = groupdef('y-axes', {\n      axes: encoding.has(Y) ? axis.defs(['y'], encoding, layout, stats) : undefined,\n      y: hasRow && {scale: ROW, field: 'keys.0'},\n      x: hasRow && {value: 0},\n      height: hasRow && {'value': layout.cellHeight}, //HACK?\n      from: from\n    });\n\n    spec.marks.unshift(axesGrp); // need to prepend so it appears under the plots\n    (spec.axes = spec.axes || []);\n    spec.axes.push.apply(spec.axes, axis.defs(['col'], encoding, layout, stats));\n  } else { // doesn't have col\n    if (encoding.has(Y)) {\n      cellAxes.push.apply(cellAxes, axis.defs(['y'], encoding, layout, stats));\n    }\n  }\n\n  // assuming equal cellWidth here\n  // TODO: support heterogenous cellWidth (maybe by using multiple scales?)\n  spec.scales = (spec.scales || []).concat(scale.defs(\n    scale.names(enter).concat(scale.names(mdef.properties.update)),\n    encoding,\n    layout,\n    style,\n    sorting,\n    {stack: stack, facet: true, stats: stats}\n  )); // row/col scales + cell scales\n\n  if (cellAxes.length > 0) {\n    group.axes = cellAxes;\n  }\n\n  // add facet transform\n  var trans = (group.from.transform || (group.from.transform = []));\n  trans.unshift({type: 'facet', keys: facetKeys});\n\n  return spec;\n}\n\n},{\"../globals\":30,\"../util\":33,\"./axis\":10,\"./group\":15,\"./scale\":19}],14:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals');\n\nvar filter = module.exports = {};\n\nvar BINARY = {\n  '>':  true,\n  '>=': true,\n  '=':  true,\n  '!=': true,\n  '<':  true,\n  '<=': true\n};\n\nfilter.addFilters = function(spec, encoding) {\n  var filters = encoding.filter(),\n    data = spec.data[0];  // apply filters to raw data before aggregation\n\n  if (!data.transform)\n    data.transform = [];\n\n  // add custom filters\n  for (var i in filters) {\n    var filter = filters[i];\n\n    var condition = '';\n    var operator = filter.operator;\n    var operands = filter.operands;\n\n    if (BINARY[operator]) {\n      // expects a field and a value\n      if (operator === '=') {\n        operator = '==';\n      }\n\n      var op1 = operands[0];\n      var op2 = operands[1];\n      condition = 'd.data.' + op1 + operator + op2;\n    } else if (operator === 'notNull') {\n      // expects a number of fields\n      for (var j in operands) {\n        condition += 'd.data.' + operands[j] + '!==null';\n        if (j < operands.length - 1) {\n          condition += ' && ';\n        }\n      }\n    } else {\n      console.warn('Unsupported operator: ', operator);\n    }\n\n    data.transform.push({\n      type: 'filter',\n      test: condition\n    });\n  }\n};\n\n// remove less than 0 values if we use log function\nfilter.filterLessThanZero = function(spec, encoding) {\n  encoding.forEach(function(field, encType) {\n    if (encoding.scale(encType).type === 'log') {\n      spec.data[1].transform.push({\n        type: 'filter',\n        test: 'd.' + encoding.field(encType) + '>0'\n      });\n    }\n  });\n};\n\n\n},{\"../globals\":30}],15:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  def: groupdef\n};\n\nfunction groupdef(name, opt) {\n  opt = opt || {};\n  return {\n    _name: name || undefined,\n    type: 'group',\n    from: opt.from,\n    properties: {\n      enter: {\n        x: opt.x || undefined,\n        y: opt.y || undefined,\n        width: opt.width || {group: 'width'},\n        height: opt.height || {group: 'height'}\n      }\n    },\n    scales: opt.scales || undefined,\n    axes: opt.axes || undefined,\n    marks: opt.marks || []\n  };\n}\n\n},{}],16:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  setter = util.setter,\n  schema = require('../schema/schema'),\n  time = require('./time'),\n  vlfield = require('../field');\n\nmodule.exports = vllayout;\n\nfunction vllayout(encoding, stats) {\n  var layout = box(encoding, stats);\n  layout = offset(encoding, stats, layout);\n  return layout;\n}\n\n/*\n  HACK to set chart size\n  NOTE: this fails for plots driven by derived values (e.g., aggregates)\n  One solution is to update Vega to support auto-sizing\n  In the meantime, auto-padding (mostly) does the trick\n */\nfunction box(encoding, stats) {\n  var hasRow = encoding.has(ROW),\n      hasCol = encoding.has(COL),\n      hasX = encoding.has(X),\n      hasY = encoding.has(Y),\n      marktype = encoding.marktype();\n\n  // FIXME/HACK we need to take filter into account\n  var xCardinality = hasX && encoding.isDimension(X) ? encoding.cardinality(X, stats) : 1,\n    yCardinality = hasY && encoding.isDimension(Y) ? encoding.cardinality(Y, stats) : 1;\n\n  var useSmallBand = xCardinality > encoding.config('largeBandMaxCardinality') ||\n    yCardinality > encoding.config('largeBandMaxCardinality');\n\n  var cellWidth, cellHeight, cellPadding = encoding.config('cellPadding');\n\n  // set cellWidth\n  if (hasX) {\n    if (encoding.isOrdinalScale(X)) {\n      // for ordinal, hasCol or not doesn't matter -- we scale based on cardinality\n      cellWidth = (xCardinality + encoding.band(X).padding) * encoding.bandSize(X, useSmallBand);\n    } else {\n      cellWidth = hasCol || hasRow ? encoding.enc(COL).width :  encoding.config(\"singleWidth\");\n    }\n  } else {\n    if (marktype === TEXT) {\n      cellWidth = encoding.config('textCellWidth');\n    } else {\n      cellWidth = encoding.bandSize(X);\n    }\n  }\n\n  // set cellHeight\n  if (hasY) {\n    if (encoding.isOrdinalScale(Y)) {\n      // for ordinal, hasCol or not doesn't matter -- we scale based on cardinality\n      cellHeight = (yCardinality + encoding.band(Y).padding) * encoding.bandSize(Y, useSmallBand);\n    } else {\n      cellHeight = hasCol || hasRow ? encoding.enc(ROW).height :  encoding.config(\"singleHeight\");\n    }\n  } else {\n    cellHeight = encoding.bandSize(Y);\n  }\n\n  // Cell bands use rangeBands(). There are n-1 padding.  Outerpadding = 0 for cells\n\n  var width = cellWidth, height = cellHeight;\n  if (hasCol) {\n    var colCardinality = encoding.cardinality(COL, stats);\n    width = cellWidth * ((1 + cellPadding) * (colCardinality - 1) + 1);\n  }\n  if (hasRow) {\n    var rowCardinality =  encoding.cardinality(ROW, stats);\n    height = cellHeight * ((1 + cellPadding) * (rowCardinality - 1) + 1);\n  }\n\n  return {\n    // width and height of the whole cell\n    cellWidth: cellWidth,\n    cellHeight: cellHeight,\n    cellPadding: cellPadding,\n    // width and height of the chart\n    width: width,\n    height: height,\n    // information about x and y, such as band size\n    x: {useSmallBand: useSmallBand},\n    y: {useSmallBand: useSmallBand}\n  };\n}\n\nfunction getMaxLength(encoding, stats, et) {\n  // FIXME determine constant for Q and T in a nicer way\n  return encoding.isType(et, Q) ? 20 :\n    encoding.isType(et, T) ? 20 :\n    stats[encoding.fieldName(et)].max;\n}\n\nfunction offset(encoding, stats, layout) {\n  [X, Y].forEach(function (x) {\n    var maxLength;\n    if (encoding.isDimension(x) || encoding.isType(x, T)) {\n      maxLength =  getMaxLength(encoding, stats, x);\n    } else if (encoding.aggr(x) === 'count') {\n      //assign default value for count as it won't have stats\n      maxLength =  3;\n    } else if (encoding.isType(x, Q)) {\n      if (x===X) {\n        maxLength = 3;\n      } else { // Y\n        //assume that default formating is always shorter than 7\n        maxLength = Math.min(getMaxLength(encoding, stats, x), 7);\n      }\n    }\n    setter(layout,[x, 'axisTitleOffset'], encoding.config('characterWidth') *  maxLength + 20);\n  });\n  return layout;\n}\n\n},{\"../field\":29,\"../globals\":30,\"../schema/schema\":31,\"../util\":33,\"./time\":25}],17:[function(require,module,exports){\n'use strict';\n\nvar global = require('../globals'),\n  time = require('./time');\n\nvar legend = module.exports = {};\n\nlegend.defs = function(encoding) {\n  var defs = [];\n\n  // TODO: support alpha\n\n  if (encoding.has(COLOR) && encoding.legend(COLOR)) {\n    defs.push(legend.def(COLOR, encoding, {\n      fill: COLOR,\n      orient: 'right'\n    }));\n  }\n\n  if (encoding.has(SIZE) && encoding.legend(SIZE)) {\n    defs.push(legend.def(SIZE, encoding, {\n      size: SIZE,\n      orient: defs.length === 1 ? 'left' : 'right'\n    }));\n  }\n\n  if (encoding.has(SHAPE) && encoding.legend(SHAPE)) {\n    if (defs.length === 2) {\n      // TODO: fix this\n      console.error('Vegalite currently only supports two legends');\n      return defs;\n    }\n    defs.push(legend.def(SHAPE, encoding, {\n      shape: SHAPE,\n      orient: defs.length === 1 ? 'left' : 'right'\n    }));\n  }\n\n  return defs;\n};\n\nlegend.def = function(name, encoding, props) {\n  var def = props, fn;\n\n  def.title = encoding.fieldTitle(name);\n\n  if (encoding.isType(name, T) && (fn = encoding.fn(name)) &&\n    time.hasScale(fn)) {\n    var properties = def.properties = def.properties || {},\n      labels = properties.labels = properties.labels || {},\n      text = labels.text = labels.text || {};\n\n    text.scale = 'time-'+ fn;\n  }\n\n  return def;\n};\n\n},{\"../globals\":30,\"./time\":25}],18:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  vlscale = require('./scale');\n\nvar marks = module.exports = {};\n\nmarks.def = function(mark, encoding, layout, style) {\n  var defs = [];\n\n  // to add a background to text, we need to add it before the text\n  if (encoding.marktype() === TEXT && encoding.has(COLOR)) {\n    var bg = {\n      x: {value: 0},\n      y: {value: 0},\n      x2: {value: layout.cellWidth},\n      y2: {value: layout.cellHeight},\n      fill: {scale: COLOR, field: encoding.field(COLOR)}\n    };\n    defs.push({\n      type: 'rect',\n      from: {data: TABLE},\n      properties: {enter: bg, update: bg}\n    });\n  }\n\n  // add the mark def for the main thing\n  var p = mark.prop(encoding, layout, style);\n  defs.push({\n    type: mark.type,\n    from: {data: TABLE},\n    properties: {enter: p, update: p}\n  });\n\n  return defs;\n};\n\nmarks.bar = {\n  type: 'rect',\n  stack: true,\n  prop: bar_props,\n  requiredEncoding: ['x', 'y'],\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, size: 1, color: 1, alpha: 1}\n};\n\nmarks.line = {\n  type: 'line',\n  line: true,\n  prop: line_props,\n  requiredEncoding: ['x', 'y'],\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, color: 1, alpha: 1, detail:1}\n};\n\nmarks.area = {\n  type: 'area',\n  stack: true,\n  line: true,\n  requiredEncoding: ['x', 'y'],\n  prop: area_props,\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, color: 1, alpha: 1}\n};\n\nmarks.tick = {\n  type: 'rect',\n  prop: tick_props,\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, color: 1, alpha: 1, detail: 1}\n};\n\nmarks.circle = {\n  type: 'symbol',\n  prop: filled_point_props('circle'),\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, size: 1, color: 1, alpha: 1, detail: 1}\n};\n\nmarks.square = {\n  type: 'symbol',\n  prop: filled_point_props('square'),\n  supportedEncoding: marks.circle.supportedEncoding\n};\n\nmarks.point = {\n  type: 'symbol',\n  prop: point_props,\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, size: 1, color: 1, alpha: 1, shape: 1, detail: 1}\n};\n\nmarks.text = {\n  type: 'text',\n  prop: text_props,\n  requiredEncoding: ['text'],\n  supportedEncoding: {row: 1, col: 1, size: 1, color: 1, alpha: 1, text: 1}\n};\n\nfunction bar_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.isMeasure(X)) {\n    p.x = {scale: X, field: e.field(X)};\n    if (e.isDimension(Y)) {\n      p.x2 = {scale: X, value: e.scale(X).type === 'log' ? 1 : 0};\n    }\n  } else if (e.has(X)) { // is ordinal\n    p.xc = {scale: X, field: e.field(X)};\n  } else {\n    // TODO add single bar offset\n    p.xc = {value: 0};\n  }\n\n  // y\n  if (e.isMeasure(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n    p.y2 = {scale: Y, value: e.scale(Y).type === 'log' ? 1 : 0};\n  } else if (e.has(Y)) { // is ordinal\n    p.yc = {scale: Y, field: e.field(Y)};\n  } else {\n    // TODO add single bar offset\n    p.yc = {group: 'height'};\n  }\n\n  // width\n  if (!e.has(X) || e.isOrdinalScale(X)) { // no X or X is ordinal\n    if (e.has(SIZE)) {\n      p.width = {scale: SIZE, field: e.field(SIZE)};\n    } else {\n      p.width = {\n        value: e.bandSize(X, layout.x.useSmallBand),\n        offset: -1\n      };\n    }\n  } else { // X is Quant or Time Scale\n    p.width = {value: 2};\n  }\n\n  // height\n  if (!e.has(Y) || e.isOrdinalScale(Y)) { // no Y or Y is ordinal\n    if (e.has(SIZE)) {\n      p.height = {scale: SIZE, field: e.field(SIZE)};\n    } else {\n      p.height = {\n        value: e.bandSize(Y, layout.y.useSmallBand),\n        offset: -1\n      };\n    }\n  } else { // Y is Quant or Time Scale\n    p.height = {value: 2};\n  }\n\n  // fill\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else {\n    p.fill = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  }\n\n  return p;\n}\n\nfunction point_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    p.x = {value: e.bandSize(X, layout.x.useSmallBand) / 2};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {value: e.bandSize(Y, layout.y.useSmallBand) / 2};\n  }\n\n  // size\n  if (e.has(SIZE)) {\n    p.size = {scale: SIZE, field: e.field(SIZE)};\n  } else if (!e.has(SIZE)) {\n    p.size = {value: e.value(SIZE)};\n  }\n\n  // shape\n  if (e.has(SHAPE)) {\n    p.shape = {scale: SHAPE, field: e.field(SHAPE)};\n  } else if (!e.has(SHAPE)) {\n    p.shape = {value: e.value(SHAPE)};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.stroke = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.stroke = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  } else if (!e.has(COLOR)) {\n    p.opacity = {value: style.opacity};\n  }\n\n  p.strokeWidth = {value: e.config('strokeWidth')};\n\n  return p;\n}\n\nfunction line_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    p.x = {value: 0};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {group: 'height'};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.stroke = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.stroke = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  }\n\n  p.strokeWidth = {value: e.config('strokeWidth')};\n\n  return p;\n}\n\nfunction area_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.isMeasure(X)) {\n    p.x = {scale: X, field: e.field(X)};\n    if (e.isDimension(Y)) {\n      p.x2 = {scale: X, value: 0};\n      p.orient = {value: 'horizontal'};\n    }\n  } else if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else {\n    p.x = {value: 0};\n  }\n\n  // y\n  if (e.isMeasure(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n    p.y2 = {scale: Y, value: 0};\n  } else if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else {\n    p.y = {group: 'height'};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.fill = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  }\n\n  return p;\n}\n\nfunction tick_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n    if (e.isDimension(X)) {\n      p.x.offset = -e.bandSize(X, layout.x.useSmallBand) / 3;\n    }\n  } else if (!e.has(X)) {\n    p.x = {value: 0};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n    if (e.isDimension(Y)) {\n      p.y.offset = -e.bandSize(Y, layout.y.useSmallBand) / 3;\n    }\n  } else if (!e.has(Y)) {\n    p.y = {value: 0};\n  }\n\n  // width\n  if (!e.has(X) || e.isDimension(X)) {\n    p.width = {value: e.bandSize(X, layout.y.useSmallBand) / 1.5};\n  } else {\n    p.width = {value: 1};\n  }\n\n  // height\n  if (!e.has(Y) || e.isDimension(Y)) {\n    p.height = {value: e.bandSize(Y, layout.y.useSmallBand) / 1.5};\n  } else {\n    p.height = {value: 1};\n  }\n\n  // fill\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else {\n    p.fill = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  } else if (!e.has(COLOR)) {\n    p.opacity = {value: style.opacity};\n  }\n\n  return p;\n}\n\nfunction filled_point_props(shape) {\n  return function(e, layout, style) {\n    var p = {};\n\n    // x\n    if (e.has(X)) {\n      p.x = {scale: X, field: e.field(X)};\n    } else if (!e.has(X)) {\n      p.x = {value: e.bandSize(X, layout.x.useSmallBand) / 2};\n    }\n\n    // y\n    if (e.has(Y)) {\n      p.y = {scale: Y, field: e.field(Y)};\n    } else if (!e.has(Y)) {\n      p.y = {value: e.bandSize(Y, layout.y.useSmallBand) / 2};\n    }\n\n    // size\n    if (e.has(SIZE)) {\n      p.size = {scale: SIZE, field: e.field(SIZE)};\n    } else if (!e.has(X)) {\n      p.size = {value: e.value(SIZE)};\n    }\n\n    // shape\n    p.shape = {value: shape};\n\n    // fill\n    if (e.has(COLOR)) {\n      p.fill = {scale: COLOR, field: e.field(COLOR)};\n    } else if (!e.has(COLOR)) {\n      p.fill = {value: e.value(COLOR)};\n    }\n\n    // alpha\n    if (e.has(ALPHA)) {\n      p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n    } else if (e.value(ALPHA) !== undefined) {\n      p.opacity = {value: e.value(ALPHA)};\n    } else if (!e.has(COLOR)) {\n      p.opacity = {value: style.opacity};\n    }\n\n    return p;\n  };\n}\n\nfunction text_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    if (e.has(TEXT) && e.isType(TEXT, Q)) {\n      p.x = {value: layout.cellWidth-5};\n    } else {\n      p.x = {value: e.bandSize(X, layout.x.useSmallBand) / 2};\n    }\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {value: e.bandSize(Y, layout.y.useSmallBand) / 2};\n  }\n\n  // size\n  if (e.has(SIZE)) {\n    p.fontSize = {scale: SIZE, field: e.field(SIZE)};\n  } else if (!e.has(SIZE)) {\n    p.fontSize = {value: e.font('size')};\n  }\n\n  // fill\n  // color should be set to background\n  p.fill = {value: 'black'};\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  } else {\n    p.opacity = {value: style.opacity};\n  }\n\n  // text\n  if (e.has(TEXT)) {\n    if (e.isType(TEXT, Q)) {\n      p.text = {template: \"{{\" + e.field(TEXT) + \" | number:'.3s'}}\"};\n      p.align = {value: 'right'};\n    } else {\n      p.text = {field: e.field(TEXT)};\n    }\n  } else {\n    p.text = {value: 'Abc'};\n  }\n\n  p.font = {value: e.font('family')};\n  p.fontWeight = {value: e.font('weight')};\n  p.fontStyle = {value: e.font('style')};\n  p.baseline = {value: e.text('baseline')};\n\n  return p;\n}\n\n},{\"../globals\":30,\"../util\":33,\"./scale\":19}],19:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  time = require('./time');\n\nvar scale = module.exports = {};\n\nscale.names = function(props) {\n  return util.keys(util.keys(props).reduce(function(a, x) {\n    if (props[x] && props[x].scale) a[props[x].scale] = 1;\n    return a;\n  }, {}));\n};\n\nscale.defs = function(names, encoding, layout, style, sorting, opt) {\n  opt = opt || {};\n\n  return names.reduce(function(a, name) {\n    var s = {\n      name: name,\n      type: scale.type(name, encoding),\n      domain: scale_domain(name, encoding, sorting, opt)\n    };\n    if (s.type === 'ordinal' && !encoding.bin(name) && encoding.sort(name).length === 0) {\n      s.sort = true;\n    }\n\n    scale_range(s, encoding, layout, style, opt);\n\n    return (a.push(s), a);\n  }, []);\n};\n\nscale.type = function(name, encoding) {\n\n  switch (encoding.type(name)) {\n    case O: return 'ordinal';\n    case T:\n      var fn = encoding.fn(name);\n      return (fn && time.scale.type(fn, name)) || 'time';\n    case Q:\n      if (encoding.bin(name)) {\n        return name === COLOR ? 'linear' : 'ordinal';\n      }\n      return encoding.scale(name).type;\n  }\n};\n\nfunction scale_domain(name, encoding, sorting, opt) {\n  if (encoding.isType(name, T)) {\n    var range = time.scale.domain(encoding.fn(name), name);\n    if(range) return range;\n  }\n\n  if (encoding.bin(name)) {\n    // TODO: add includeEmptyConfig here\n    if (opt.stats) {\n      var bins = util.getbins(opt.stats[encoding.fieldName(name)], encoding.bin(name).maxbins);\n      var domain = util.range(bins.start, bins.stop, bins.step);\n      return name === Y ? domain.reverse() : domain;\n    }\n  }\n\n  return name == opt.stack ?\n    {\n      data: STACKED,\n      field: 'data.' + (opt.facet ? 'max_' : '') + 'sum_' + encoding.field(name, true)\n    } :\n    {data: sorting.getDataset(name), field: encoding.field(name)};\n}\n\nfunction scale_range(s, encoding, layout, style, opt) {\n  var spec = encoding.scale(s.name);\n  switch (s.name) {\n    case X:\n      if (s.type === 'ordinal') {\n        s.bandWidth = encoding.bandSize(X, layout.x.useSmallBand);\n      } else {\n        s.range = layout.cellWidth ? [0, layout.cellWidth] : 'width';\n\n        if (encoding.isType(s.name,T) && encoding.fn(s.name) === 'year') {\n          s.zero = false;\n        } else {\n          s.zero = spec.zero === undefined ? true : spec.zero;\n        }\n\n        s.reverse = spec.reverse;\n      }\n      s.round = true;\n      if (s.type === 'time') {\n        s.nice = encoding.fn(s.name);\n      }else {\n        s.nice = true;\n      }\n      break;\n    case Y:\n      if (s.type === 'ordinal') {\n        s.bandWidth = encoding.bandSize(Y, layout.y.useSmallBand);\n      } else {\n        s.range = layout.cellHeight ? [layout.cellHeight, 0] : 'height';\n\n        if (encoding.isType(s.name,T) && encoding.fn(s.name) === 'year') {\n          s.zero = false;\n        } else {\n          s.zero = spec.zero === undefined ? true : spec.zero;\n        }\n\n        s.reverse = spec.reverse;\n      }\n\n      s.round = true;\n\n      if (s.type === 'time') {\n        s.nice = encoding.fn(s.name) || encoding.config('timeScaleNice');\n      }else {\n        s.nice = true;\n      }\n      break;\n    case ROW: // support only ordinal\n      s.bandWidth = layout.cellHeight;\n      s.round = true;\n      s.nice = true;\n      break;\n    case COL: // support only ordinal\n      s.bandWidth = layout.cellWidth;\n      s.round = true;\n      s.nice = true;\n      break;\n    case SIZE:\n      if (encoding.is('bar')) {\n        // FIXME this is definitely incorrect\n        // but let's fix it later since bar size is a bad encoding anyway\n        s.range = [3, Math.max(encoding.bandSize(X), encoding.bandSize(Y))];\n      } else if (encoding.is(TEXT)) {\n        s.range = [8, 40];\n      } else { //point\n        var bandSize = Math.min(encoding.bandSize(X), encoding.bandSize(Y)) - 1;\n        s.range = [10, 0.8 * bandSize*bandSize];\n      }\n      s.round = true;\n      s.zero = false;\n      break;\n    case SHAPE:\n      s.range = 'shapes';\n      break;\n    case COLOR:\n      var range = encoding.scale(COLOR).range;\n      if (range === undefined) {\n        if (s.type === 'ordinal') {\n          // FIXME\n          range = style.colorRange;\n        } else {\n          range = ['#A9DB9F', '#0D5C21'];\n          s.zero = false;\n        }\n      }\n      s.range = range;\n      break;\n    case ALPHA:\n      s.range = [0.2, 1.0];\n      break;\n    default:\n      throw new Error('Unknown encoding name: '+ s.name);\n  }\n\n  switch (s.name) {\n    case ROW:\n    case COL:\n      s.padding = encoding.config('cellPadding');\n      s.outerPadding = 0;\n      break;\n    case X:\n    case Y:\n      if (s.type === 'ordinal') { //&& !s.bandWidth\n        s.points = true;\n        s.padding = encoding.band(s.name).padding;\n      }\n  }\n}\n\n},{\"../globals\":30,\"../util\":33,\"./time\":25}],20:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals');\n\nmodule.exports = addSortTransforms;\n\n// adds new transforms that produce sorted fields\nfunction addSortTransforms(spec, encoding, stats, opt) {\n  var datasetMapping = {};\n  var counter = 0;\n\n  encoding.forEach(function(field, encType) {\n    var sortBy = encoding.sort(encType, stats);\n    if (sortBy.length > 0) {\n      var fields = sortBy.map(function(d) {\n        return {\n          op: d.aggr,\n          field: 'data.' + d.name\n        };\n      });\n\n      var byClause = sortBy.map(function(d) {\n        var reverse = (d.reverse ? '-' : '');\n        return reverse + 'data.' + (d.aggr==='count' ? 'count' : (d.aggr + '_' + d.name));\n      });\n\n      var dataName = 'sorted' + counter++;\n\n      var transforms = [\n        {\n          type: 'aggregate',\n          groupby: ['data.' + field.name],\n          fields: fields\n        },\n        {\n          type: 'sort',\n          by: byClause\n        }\n      ];\n\n      spec.data.push({\n        name: dataName,\n        source: RAW,\n        transform: transforms\n      });\n\n      datasetMapping[encType] = dataName;\n    }\n  });\n\n  return {\n    spec: spec,\n    getDataset: function(encType) {\n      var data = datasetMapping[encType];\n      if (!data) {\n        return TABLE;\n      }\n      return data;\n    }\n  };\n}\n\n},{\"../globals\":30}],21:[function(require,module,exports){\n\"use strict\";\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  marks = require('./marks');\n\nmodule.exports = stacking;\n\nfunction stacking(spec, encoding, mdef, facets) {\n  if (!marks[encoding.marktype()].stack) return false;\n\n  // TODO: add || encoding.has(LOD) here once LOD is implemented\n  if (!encoding.has(COLOR)) return false;\n\n  var dim=null, val=null, idx =null,\n    isXMeasure = encoding.isMeasure(X),\n    isYMeasure = encoding.isMeasure(Y);\n\n  if (isXMeasure && !isYMeasure) {\n    dim = Y;\n    val = X;\n    idx = 0;\n  } else if (isYMeasure && !isXMeasure) {\n    dim = X;\n    val = Y;\n    idx = 1;\n  } else {\n    return null; // no stack encoding\n  }\n\n  // add transform to compute sums for scale\n  var stacked = {\n    name: STACKED,\n    source: TABLE,\n    transform: [{\n      type: 'aggregate',\n      groupby: [encoding.field(dim)].concat(facets), // dim and other facets\n      fields: [{op: 'sum', field: encoding.field(val)}] // TODO check if field with aggr is correct?\n    }]\n  };\n\n  if (facets && facets.length > 0) {\n    stacked.transform.push({ //calculate max for each facet\n      type: 'aggregate',\n      groupby: facets,\n      fields: [{op: 'max', field: 'data.sum_' + encoding.field(val, true)}]\n    });\n  }\n\n  spec.data.push(stacked);\n\n  // add stack transform to mark\n  mdef.from.transform = [{\n    type: 'stack',\n    point: encoding.field(dim),\n    height: encoding.field(val),\n    output: {y1: val, y0: val + '2'}\n  }];\n\n  // TODO: This is super hack-ish -- consolidate into modular mark properties?\n  mdef.properties.update[val] = mdef.properties.enter[val] = {scale: val, field: val};\n  mdef.properties.update[val + '2'] = mdef.properties.enter[val + '2'] = {scale: val, field: val + '2'};\n\n  return val; //return stack encoding\n}\n\n},{\"../globals\":30,\"../util\":33,\"./marks\":18}],22:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  vlfield = require('../field'),\n  Encoding = require('../Encoding');\n\nmodule.exports = function(encoding, stats) {\n  return {\n    opacity: estimateOpacity(encoding, stats),\n    colorRange: colorRange(encoding, stats)\n  };\n};\n\nfunction colorRange(encoding, stats){\n  if (encoding.has(COLOR) && encoding.isDimension(COLOR)) {\n    var cardinality = encoding.cardinality(COLOR, stats);\n    if (cardinality <= 10) {\n      return \"category10\";\n    } else {\n      return \"category20\";\n    }\n    // TODO can vega interpolate range for ordinal scale?\n  }\n  return null;\n}\n\nfunction estimateOpacity(encoding,stats) {\n  if (!stats) {\n    return 1;\n  }\n\n  var numPoints = 0;\n\n  if (encoding.isAggregate()) { // aggregate plot\n    numPoints = 1;\n\n    //  get number of points in each \"cell\"\n    //  by calculating product of cardinality\n    //  for each non faceting and non-ordinal X / Y fields\n    //  note that ordinal x,y are not include since we can\n    //  consider that ordinal x are subdividing the cell into subcells anyway\n    encoding.forEach(function(field, encType) {\n\n      if (encType !== ROW && encType !== COL &&\n          !((encType === X || encType === Y) &&\n          vlfield.isOrdinalScale(field, true))\n        ) {\n        numPoints *= encoding.cardinality(encType, stats);\n      }\n    });\n\n  } else { // raw plot\n    numPoints = stats.count;\n\n    // small multiples divide number of points\n    var numMultiples = 1;\n    if (encoding.has(ROW)) {\n      numMultiples *= encoding.cardinality(ROW, stats);\n    }\n    if (encoding.has(COL)) {\n      numMultiples *= encoding.cardinality(COL, stats);\n    }\n    numPoints /= numMultiples;\n  }\n\n  var opacity = 0;\n  if (numPoints < 20) {\n    opacity = 1;\n  } else if (numPoints < 200) {\n    opacity = 0.7;\n  } else if (numPoints < 1000 || encoding.is('tick')) {\n    opacity = 0.6;\n  } else {\n    opacity = 0.3;\n  }\n\n  return opacity;\n}\n\n\n},{\"../Encoding\":8,\"../field\":29,\"../globals\":30,\"../util\":33}],23:[function(require,module,exports){\n'use strict';\n\nvar global = require('../globals');\n\nvar groupdef = require('./group').def;\n\nmodule.exports = subfaceting;\n\nfunction subfaceting(group, mdef, details, stack, encoding) {\n  var m = group.marks,\n    g = groupdef('subfacet', {marks: m});\n\n  group.marks = [g];\n  g.from = mdef.from;\n  delete mdef.from;\n\n  //TODO test LOD -- we should support stack / line without color (LOD) field\n  var trans = (g.from.transform || (g.from.transform = []));\n  trans.unshift({type: 'facet', keys: details});\n\n  if (stack && encoding.has(COLOR)) {\n    trans.unshift({type: 'sort', by: encoding.field(COLOR)});\n  }\n}\n\n},{\"../globals\":30,\"./group\":15}],24:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals');\n\nvar groupdef = require('./group').def,\n  vldata = require('../data');\n\nmodule.exports = template;\n\nfunction template(encoding, layout, stats) { //hack use stats\n\n  var data = {name: RAW, format: {type: encoding.data('formatType')}},\n    table = {name: TABLE, source: RAW},\n    dataUrl = vldata.getUrl(encoding, stats);\n  if (dataUrl) data.url = dataUrl;\n\n  var preaggregatedData = !!encoding.data('vegaServer');\n\n  encoding.forEach(function(field, encType) {\n    var name;\n    if (field.type == T) {\n      data.format.parse = data.format.parse || {};\n      data.format.parse[field.name] = 'date';\n    } else if (field.type == Q) {\n      data.format.parse = data.format.parse || {};\n      if (field.aggr === 'count') {\n        name = 'count';\n      } else if (preaggregatedData && field.bin) {\n        name = 'bin_' + field.name;\n      } else if (preaggregatedData && field.aggr) {\n        name = field.aggr + '_' + field.name;\n      } else {\n        name = field.name;\n      }\n      data.format.parse[name] = 'number';\n    }\n  });\n\n  return {\n    width: layout.width,\n    height: layout.height,\n    padding: 'auto',\n    data: [data, table],\n    marks: [groupdef('cell', {\n      width: layout.cellWidth ? {value: layout.cellWidth} : undefined,\n      height: layout.cellHeight ? {value: layout.cellHeight} : undefined\n    })]\n  };\n}\n\n},{\"../data\":27,\"../globals\":30,\"./group\":15}],25:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util');\n\nmodule.exports = time;\n\nfunction time(spec, encoding, opt) {\n  var timeFields = {}, timeFn = {};\n\n  // find unique formula transformation and bin function\n  encoding.forEach(function(field, encType) {\n    if (field.type === T && field.fn) {\n      timeFields[encoding.field(encType)] = {\n        field: field,\n        encType: encType\n      };\n      timeFn[field.fn] = true;\n    }\n  });\n\n  // add formula transform\n  var data = spec.data[1],\n    transform = data.transform = data.transform || [];\n\n  for (var f in timeFields) {\n    var tf = timeFields[f];\n    time.transform(transform, encoding, tf.encType, tf.field);\n  }\n\n  // add scales\n  var scales = spec.scales = spec.scales || [];\n  for (var fn in timeFn) {\n    time.scale(scales, fn, encoding);\n  }\n  return spec;\n}\n\ntime.cardinality = function(field, stats, filterNull, type) {\n  var fn = field.fn;\n  switch (fn) {\n    case 'seconds': return 60;\n    case 'minutes': return 60;\n    case 'hours': return 24;\n    case 'day': return 7;\n    case 'date': return 31;\n    case 'month': return 12;\n    case 'year':\n      var stat = stats[field.name],\n        yearstat = stats['year_'+field.name];\n\n      if (!yearstat) { return null; }\n\n      return yearstat.distinct -\n        (stat.nulls > 0 && filterNull[type] ? 1 : 0);\n  }\n\n  return null;\n};\n\nfunction fieldFn(func, field) {\n  return 'utc' + func + '(d.data.'+ field.name +')';\n}\n\n/**\n * @return {String} date binning formula of the given field\n */\ntime.formula = function(field) {\n  return fieldFn(field.fn, field);\n};\n\n/** add formula transforms to data */\ntime.transform = function(transform, encoding, encType, field) {\n  transform.push({\n    type: 'formula',\n    field: encoding.field(encType),\n    expr: time.formula(field)\n  });\n};\n\n/** append custom time scales for axis label */\ntime.scale = function(scales, fn, encoding) {\n  var labelLength = encoding.config('timeScaleLabelLength');\n  // TODO add option for shorter scale / custom range\n  switch (fn) {\n    case 'day':\n      scales.push({\n        name: 'time-'+fn,\n        type: 'ordinal',\n        domain: util.range(0, 7),\n        range: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'].map(\n          function(s) { return s.substr(0, labelLength);}\n        )\n      });\n      break;\n    case 'month':\n      scales.push({\n        name: 'time-'+fn,\n        type: 'ordinal',\n        domain: util.range(0, 12),\n        range: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'].map(\n            function(s) { return s.substr(0, labelLength);}\n          )\n      });\n      break;\n  }\n};\n\ntime.isOrdinalFn = function(fn) {\n  switch (fn) {\n    case 'seconds':\n    case 'minutes':\n    case 'hours':\n    case 'day':\n    case 'date':\n    case 'month':\n      return true;\n  }\n  return false;\n};\n\ntime.scale.type = function(fn, name) {\n  if (name === COLOR) {\n    return 'linear'; // this has order\n  }\n\n  return time.isOrdinalFn(fn) || name === COL || name === ROW ? 'ordinal' : 'linear';\n};\n\ntime.scale.domain = function(fn, name) {\n  var isColor = name === COLOR;\n  switch (fn) {\n    case 'seconds':\n    case 'minutes': return isColor ? [0,59] : util.range(0, 60);\n    case 'hours': return isColor ? [0,23] : util.range(0, 24);\n    case 'day': return isColor ? [0,6] : util.range(0, 7);\n    case 'date': return isColor ? [1,31] : util.range(1, 32);\n    case 'month': return isColor ? [0,11] : util.range(0, 12);\n  }\n  return null;\n};\n\n/** whether a particular time function has custom scale for labels implemented in time.scale */\ntime.hasScale = function(fn) {\n  switch (fn) {\n    case 'day':\n    case 'month':\n      return true;\n  }\n  return false;\n};\n\n\n\n},{\"../globals\":30,\"../util\":33}],26:[function(require,module,exports){\n'use strict';\n\nvar globals = require('./globals');\n\nvar consts = module.exports = {};\n\nconsts.encodingTypes = [X, Y, ROW, COL, SIZE, SHAPE, COLOR, ALPHA, TEXT, DETAIL];\n\nconsts.dataTypes = {'O': O, 'Q': Q, 'T': T};\n\nconsts.dataTypeNames = ['O', 'Q', 'T'].reduce(function(r, x) {\n  r[consts.dataTypes[x]] = x;\n  return r;\n},{});\n\nconsts.shorthand = {\n  delim:  '|',\n  assign: '=',\n  type:   ',',\n  func:   '_'\n};\n\n},{\"./globals\":30}],27:[function(require,module,exports){\n'use strict';\n\nvar vldata = module.exports = {},\n  vlfield = require('./field'),\n  util = require('./util');\n\nvldata.getUrl = function getDataUrl(encoding, stats) {\n  if (!encoding.data('vegaServer')) {\n    // don't use vega server\n    return encoding.data('url');\n  }\n\n  if (encoding.length() === 0) {\n    // no fields\n    return;\n  }\n\n  var fields = [];\n  encoding.forEach(function(field, encType) {\n    var obj = {\n      name: encoding.field(encType, true),\n      field: field.name\n    };\n    if (field.aggr) {\n      obj.aggr = field.aggr;\n    }\n    if (field.bin) {\n      obj.binSize = util.getbins(stats[field.name], encoding.bin(encType).maxbins).step;\n    }\n    fields.push(obj);\n  });\n\n  var query = {\n    table: encoding.data('vegaServer').table,\n    fields: fields\n  };\n\n  return encoding.data('vegaServer').url + '/query/?q=' + JSON.stringify(query);\n};\n\n/** Mapping from datalib's inferred type to vegalite's type */\nvldata.types = {\n  'boolean': 'O',\n  'number': 'Q',\n  'integer': 'Q',\n  'date': 'T',\n  'string': 'O'\n};\n\n\n},{\"./field\":29,\"./util\":33}],28:[function(require,module,exports){\n// utility for enc\n\n'use strict';\n\nvar consts = require('./consts'),\n  c = consts.shorthand,\n  time = require('./compile/time'),\n  vlfield = require('./field'),\n  util = require('./util'),\n  schema = require('./schema/schema'),\n  encTypes = schema.encTypes;\n\nvar vlenc = module.exports = {};\n\nvlenc.countRetinal = function(enc) {\n  var count = 0;\n  if (enc.color) count++;\n  if (enc.alpha) count++;\n  if (enc.size) count++;\n  if (enc.shape) count++;\n  return count;\n};\n\nvlenc.has = function(enc, encType) {\n  var fieldDef = enc && enc[encType];\n  return fieldDef && fieldDef.name;\n};\n\nvlenc.isAggregate = function(enc) {\n  for (var k in enc) {\n    if (vlenc.has(enc, k) && enc[k].aggr) {\n      return true;\n    }\n  }\n  return false;\n};\n\nvlenc.forEach = function(enc, f) {\n  var i = 0;\n  encTypes.forEach(function(k) {\n    if (vlenc.has(enc, k)) {\n      f(enc[k], k, i++);\n    }\n  });\n};\n\nvlenc.map = function(enc, f) {\n  var arr = [];\n  encTypes.forEach(function(k) {\n    if (vlenc.has(enc, k)) {\n      arr.push(f(enc[k], k, enc));\n    }\n  });\n  return arr;\n};\n\nvlenc.reduce = function(enc, f, init) {\n  var r = init, i = 0, k;\n  encTypes.forEach(function(k) {\n    if (vlenc.has(enc, k)) {\n      r = f(r, enc[k], k,  enc);\n    }\n  });\n  return r;\n};\n\n/*\n * return key-value pairs of field name and list of fields of that field name\n */\nvlenc.fields = function(enc) {\n  return vlenc.reduce(enc, function (m, field, encType) {\n    var fieldList = m[field.name] = m[field.name] || [],\n      containsType = fieldList.containsType = fieldList.containsType || {};\n\n    if (fieldList.indexOf(field) === -1) {\n      fieldList.push(field);\n      // augment the array with containsType.Q / O / T\n      containsType[field.type] = true;\n    }\n    return m;\n  }, {});\n};\n\nvlenc.shorthand = function(enc) {\n  return vlenc.map(enc, function(field, et) {\n    return et + c.assign + vlfield.shorthand(field);\n  }).join(c.delim);\n};\n\nvlenc.fromShorthand = function(shorthand, convertType) {\n  var enc = util.isArray(shorthand) ? shorthand : shorthand.split(c.delim);\n  return enc.reduce(function(m, e) {\n    var split = e.split(c.assign),\n        enctype = split[0].trim(),\n        field = split[1];\n\n    m[enctype] = vlfield.fromShorthand(field, convertType);\n    return m;\n  }, {});\n};\n},{\"./compile/time\":25,\"./consts\":26,\"./field\":29,\"./schema/schema\":31,\"./util\":33}],29:[function(require,module,exports){\n'use strict';\n\n// utility for field\n\nvar consts = require('./consts'),\n  c = consts.shorthand,\n  time = require('./compile/time'),\n  util = require('./util'),\n  schema = require('./schema/schema');\n\nvar vlfield = module.exports = {};\n\nvlfield.shorthand = function(f) {\n  var c = consts.shorthand;\n  return (f.aggr ? f.aggr + c.func : '') +\n    (f.fn ? f.fn + c.func : '') +\n    (f.bin ? 'bin' + c.func : '') +\n    (f.name || '') + c.type +\n    (consts.dataTypeNames[f.type] || f.type);\n};\n\nvlfield.shorthands = function(fields, delim) {\n  delim = delim || c.delim;\n  return fields.map(vlfield.shorthand).join(delim);\n};\n\nvlfield.fromShorthand = function(shorthand, convertType) {\n  var split = shorthand.split(c.type), i;\n  var o = {\n    name: split[0].trim(),\n    type: convertType ? consts.dataTypes[split[1].trim()] : split[1].trim()\n  };\n\n  // check aggregate type\n  for (i in schema.aggr.enum) {\n    var a = schema.aggr.enum[i];\n    if (o.name.indexOf(a + '_') === 0) {\n      o.name = o.name.substr(a.length + 1);\n      if (a == 'count' && o.name.length === 0) o.name = '*';\n      o.aggr = a;\n      break;\n    }\n  }\n\n  // check time fn\n  for (i in schema.timefns) {\n    var f = schema.timefns[i];\n    if (o.name && o.name.indexOf(f + '_') === 0) {\n      o.name = o.name.substr(o.length + 1);\n      o.fn = f;\n      break;\n    }\n  }\n\n  // check bin\n  if (o.name && o.name.indexOf('bin_') === 0) {\n    o.name = o.name.substr(4);\n    o.bin = true;\n  }\n\n  return o;\n};\n\nvar typeOrder = {\n  O: 0,\n  G: 1,\n  T: 2,\n  Q: 3\n};\n\nvlfield.order = {};\n\nvlfield.order.type = function(field) {\n  if (field.aggr==='count') return 4;\n  return typeOrder[field.type];\n};\n\nvlfield.order.typeThenName = function(field) {\n  return vlfield.order.type(field) + '_' + field.name.toLowerCase();\n};\n\nvlfield.order.original = function() {\n  return 0; // no swap will occur\n};\n\nvlfield.order.name = function(field) {\n  return field.name;\n};\n\nvlfield.order.typeThenCardinality = function(field, stats){\n  return stats[field.name].distinct;\n};\n\n// FIXME refactor\nvlfield.isType = function (fieldDef, type) {\n  return (fieldDef.type & type) > 0;\n};\n\nvlfield.isType.byCode = vlfield.isType;\n\nvlfield.isType.byName = function (field, type) {\n  return field.type === consts.dataTypeNames[type];\n};\n\n\nfunction getIsType(useTypeCode) {\n  return useTypeCode ? vlfield.isType.byCode : vlfield.isType.byName;\n}\n\nvlfield.isType.get = getIsType; //FIXME\n\n/*\n * Most fields that use ordinal scale are dimensions.\n * However, YEAR(T), YEARMONTH(T) use time scale, not ordinal but are dimensions too.\n */\nvlfield.isOrdinalScale = function(field, useTypeCode /*optional*/) {\n  var isType = getIsType(useTypeCode);\n  return  isType(field, O) || field.bin ||\n    ( isType(field, T) && field.fn && time.isOrdinalFn(field.fn) );\n};\n\nfunction isDimension(field, useTypeCode /*optional*/) {\n  var isType = getIsType(useTypeCode);\n  return  isType(field, O) || !!field.bin ||\n    ( isType(field, T) && !!field.fn );\n}\n\n/**\n * For encoding, use encoding.isDimension() to avoid confusion.\n * Or use Encoding.isType if your field is from Encoding (and thus have numeric data type).\n * otherwise, do not specific isType so we can use the default isTypeName here.\n */\nvlfield.isDimension = function(field, useTypeCode /*optional*/) {\n  return field && isDimension(field, useTypeCode);\n};\n\nvlfield.isMeasure = function(field, useTypeCode) {\n  return field && !isDimension(field, useTypeCode);\n};\n\nvlfield.role = function(field) {\n  return isDimension(field) ? 'dimension' : 'measure';\n};\n\nvlfield.count = function() {\n  return {name:'*', aggr: 'count', type:'Q', displayName: vlfield.count.displayName};\n};\n\nvlfield.count.displayName = 'Number of Records';\n\nvlfield.isCount = function(field) {\n  return field.aggr === 'count';\n};\n\n/**\n * For encoding, use encoding.cardinality() to avoid confusion.  Or use Encoding.isType if your field is from Encoding (and thus have numeric data type).\n * otherwise, do not specific isType so we can use the default isTypeName here.\n */\nvlfield.cardinality = function(field, stats, filterNull, useTypeCode) {\n  // FIXME need to take filter into account\n\n  var stat = stats[field.name];\n  var isType = getIsType(useTypeCode),\n    type = useTypeCode ? consts.dataTypeNames[field.type] : field.type;\n\n  filterNull = filterNull || {};\n\n  if (field.bin) {\n    var bins = util.getbins(stat, field.bin.maxbins || schema.MAXBINS_DEFAULT);\n    return (bins.stop - bins.start) / bins.step;\n  }\n  if (isType(field, T)) {\n    var cardinality = time.cardinality(field, stats, filterNull, type);\n    if(cardinality !== null) return cardinality;\n    //otherwise use calculation below\n  }\n  if (field.aggr) {\n    return 1;\n  }\n\n  // remove null\n  return stat.distinct -\n    (stat.nulls > 0 && filterNull[type] ? 1 : 0);\n};\n\n},{\"./compile/time\":25,\"./consts\":26,\"./schema/schema\":31,\"./util\":33}],30:[function(require,module,exports){\n(function (global){\n'use strict';\n\n// declare global constant\nvar g = global || window;\n\ng.TABLE = 'table';\ng.RAW = 'raw';\ng.STACKED = 'stacked';\ng.INDEX = 'index';\n\ng.X = 'x';\ng.Y = 'y';\ng.ROW = 'row';\ng.COL = 'col';\ng.SIZE = 'size';\ng.SHAPE = 'shape';\ng.COLOR = 'color';\ng.ALPHA = 'alpha';\ng.TEXT = 'text';\ng.DETAIL = 'detail';\n\ng.O = 1;\ng.Q = 2;\ng.T = 4;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{}],31:[function(require,module,exports){\n// Package of defining Vegalite Specification's json schema\n\"use strict\";\n\nvar schema = module.exports = {},\n  util = require('../util');\n\nschema.util = require('./schemautil');\n\nschema.marktype = {\n  type: 'string',\n  enum: ['point', 'tick', 'bar', 'line', 'area', 'circle', 'square', 'text']\n};\n\nschema.aggr = {\n  type: 'string',\n  enum: ['avg', 'sum', 'min', 'max', 'count'],\n  supportedEnums: {\n    Q: ['avg', 'sum', 'min', 'max', 'count'],\n    O: [],\n    T: ['avg', 'min', 'max'],\n    '': ['count']\n  },\n  supportedTypes: {'Q': true, 'O': true, 'T': true, '': true}\n};\nschema.band = {\n  type: 'object',\n  properties: {\n    size: {\n      type: 'integer',\n      minimum: 0\n    },\n    padding: {\n      type: 'integer',\n      minimum: 0,\n      default: 1\n    }\n  }\n};\n\nschema.getSupportedRole = function(encType) {\n  return schema.schema.properties.enc.properties[encType].supportedRole;\n};\n\nschema.timefns = ['year', 'month', 'day', 'date', 'hours', 'minutes', 'seconds'];\n\nschema.defaultTimeFn = 'month';\n\nschema.fn = {\n  type: 'string',\n  enum: schema.timefns,\n  supportedTypes: {'T': true}\n};\n\n//TODO(kanitw): add other type of function here\n\nschema.scale_type = {\n  type: 'string',\n  enum: ['linear', 'log', 'pow', 'sqrt', 'quantile'],\n  default: 'linear',\n  supportedTypes: {'Q': true}\n};\n\nschema.field = {\n  type: 'object',\n  properties: {\n    name: {\n      type: 'string'\n    }\n  }\n};\n\nvar clone = util.duplicate;\nvar merge = schema.util.merge;\n\nschema.MAXBINS_DEFAULT = 15;\n\nvar bin = {\n  type: ['boolean', 'object'],\n  default: false,\n  properties: {\n    maxbins: {\n      type: 'integer',\n      default: schema.MAXBINS_DEFAULT,\n      minimum: 2\n    }\n  },\n  supportedTypes: {'Q': true} // TODO: add 'O' after finishing #81\n};\n\nvar typicalField = merge(clone(schema.field), {\n  type: 'object',\n  properties: {\n    type: {\n      type: 'string',\n      enum: ['O', 'Q', 'T']\n    },\n    aggr: schema.aggr,\n    fn: schema.fn,\n    bin: bin,\n    scale: {\n      type: 'object',\n      properties: {\n        type: schema.scale_type,\n        reverse: {\n          type: 'boolean',\n          default: false,\n          supportedTypes: {'Q': true, 'T': true}\n        },\n        zero: {\n          type: 'boolean',\n          description: 'Include zero',\n          default: true,\n          supportedTypes: {'Q': true, 'T': true}\n        },\n        nice: {\n          type: 'string',\n          enum: ['second', 'minute', 'hour', 'day', 'week', 'month', 'year'],\n          supportedTypes: {'T': true}\n        }\n      }\n    }\n  }\n});\n\nvar onlyOrdinalField = merge(clone(schema.field), {\n  type: 'object',\n  supportedRole: {\n    dimension: true\n  },\n  properties: {\n    type: {\n      type: 'string',\n      enum: ['O','Q', 'T'] // ordinal-only field supports Q when bin is applied and T when fn is applied.\n    },\n    fn: schema.fn,\n    bin: bin,\n    aggr: {\n      type: 'string',\n      enum: ['count'],\n      supportedTypes: {'O': true}\n    }\n  }\n});\n\nvar axisMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true},\n  properties: {\n    axis: {\n      type: 'object',\n      properties: {\n        grid: {\n          type: 'boolean',\n          default: true,\n          description: 'A flag indicate if gridlines should be created in addition to ticks.'\n        },\n        title: {\n          type: 'boolean',\n          default: true,\n          description: 'A title for the axis.'\n        },\n        titleOffset: {\n          type: 'integer',\n          default: undefined,  // auto\n          description: 'A title offset value for the axis.'\n        },\n        format: {\n          type: 'string',\n          default: undefined,  // auto\n          description: 'The formatting pattern for axis labels.'\n        },\n        maxLabelLength: {\n          type: 'integer',\n          default: 25,\n          minimum: 0,\n          description: 'Truncate labels that are too long.'\n        }\n      }\n    }\n  }\n};\n\nvar sortMixin = {\n  type: 'object',\n  properties: {\n    sort: {\n      type: 'array',\n      default: [],\n      items: {\n        type: 'object',\n        supportedTypes: {'O': true},\n        required: ['name', 'aggr'],\n        name: {\n          type: 'string'\n        },\n        aggr: {\n          type: 'string',\n          enum: ['avg', 'sum', 'min', 'max', 'count']\n        },\n        reverse: {\n          type: 'boolean',\n          default: false\n        }\n      }\n    }\n  }\n};\n\nvar bandMixin = {\n  type: 'object',\n  properties: {\n    band: schema.band\n  }\n};\n\nvar legendMixin = {\n  type: 'object',\n  properties: {\n    legend: {\n      type: 'boolean',\n      default: true\n    }\n  }\n};\n\nvar textMixin = {\n  type: 'object',\n  supportedMarktypes: {'text': true},\n  properties: {\n    text: {\n      type: 'object',\n      properties: {\n        align: {\n          type: 'string',\n          default: 'left'\n        },\n        baseline: {\n          type: 'string',\n          default: 'middle'\n        },\n        margin: {\n          type: 'integer',\n          default: 4,\n          minimum: 0\n        }\n      }\n    },\n    font: {\n      type: 'object',\n      properties: {\n        weight: {\n          type: 'string',\n          enum: ['normal', 'bold'],\n          default: 'normal'\n        },\n        size: {\n          type: 'integer',\n          default: 10,\n          minimum: 0\n        },\n        family: {\n          type: 'string',\n          default: 'Helvetica Neue'\n        },\n        style: {\n          type: 'string',\n          default: 'normal',\n          enum: ['normal', 'italic']\n        }\n      }\n    }\n  }\n};\n\nvar sizeMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, bar: true, circle: true, square: true, text: true},\n  properties: {\n    value: {\n      type: 'integer',\n      default: 30,\n      minimum: 0\n    }\n  }\n};\n\nvar colorMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true, 'text': true},\n  properties: {\n    value: {\n      type: 'string',\n      role: 'color',\n      default: 'steelblue'\n    },\n    scale: {\n      type: 'object',\n      properties: {\n        range: {\n          type: ['string', 'array']\n        }\n      }\n    }\n  }\n};\n\nvar alphaMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true, 'text': true},\n  properties: {\n    value: {\n      type: 'number',\n      default: undefined,  // auto\n      minimum: 0,\n      maximum: 1\n    }\n  }\n};\n\nvar shapeMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, circle: true, square: true},\n  properties: {\n    value: {\n      type: 'string',\n      enum: ['circle', 'square', 'cross', 'diamond', 'triangle-up', 'triangle-down'],\n      default: 'circle'\n    }\n  }\n};\n\nvar detailMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, line: true, circle: true, square: true}\n};\n\nvar rowMixin = {\n  properties: {\n    height: {\n      type: 'number',\n      minimum: 0,\n      default: 150\n    },\n    grid: {\n      type: 'boolean',\n      default: true,\n      description: 'A flag indicate if gridlines should be created in addition to ticks.'\n    },\n  }\n};\n\nvar colMixin = {\n  properties: {\n    width: {\n      type: 'number',\n      minimum: 0,\n      default: 150\n    },\n    axis: {\n      properties: {\n        maxLabelLength: {\n          type: 'integer',\n          default: 12,\n          minimum: 0,\n          description: 'Truncate labels that are too long.'\n        }\n      }\n    }\n  }\n};\n\nvar facetMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true, text: true},\n  properties: {\n    padding: {\n      type: 'number',\n      minimum: 0,\n      maximum: 1,\n      default: 0.1\n    }\n  }\n};\n\nvar requiredNameType = {\n  required: ['name', 'type']\n};\n\nvar multiRoleField = merge(clone(typicalField), {\n  supportedRole: {\n    measure: true,\n    dimension: true\n  }\n});\n\nvar quantitativeField = merge(clone(typicalField), {\n  supportedRole: {\n    measure: true,\n    dimension: 'ordinal-only' // using alpha / size to encoding category lead to order interpretation\n  }\n});\n\nvar onlyQuantitativeField = merge(clone(typicalField), {\n  supportedRole: {\n    measure: true\n  }\n});\n\nvar x = merge(clone(multiRoleField), axisMixin, bandMixin, requiredNameType, sortMixin);\nvar y = clone(x);\n\nvar facet = merge(clone(onlyOrdinalField), requiredNameType, facetMixin, sortMixin);\nvar row = merge(clone(facet), axisMixin, rowMixin);\nvar col = merge(clone(facet), axisMixin, colMixin);\n\nvar size = merge(clone(quantitativeField), legendMixin, sizeMixin, sortMixin);\nvar color = merge(clone(multiRoleField), legendMixin, colorMixin, sortMixin);\nvar alpha = merge(clone(quantitativeField), alphaMixin, sortMixin);\nvar shape = merge(clone(onlyOrdinalField), legendMixin, shapeMixin, sortMixin);\nvar detail = merge(clone(onlyOrdinalField), detailMixin, sortMixin);\n\n// we only put aggregated measure in pivot table\nvar text = merge(clone(onlyQuantitativeField), textMixin, sortMixin);\n\n// TODO add label\n\nvar filter = {\n  type: 'array',\n  items: {\n    type: 'object',\n    properties: {\n      operands: {\n        type: 'array',\n        items: {\n          type: ['string', 'boolean', 'integer', 'number']\n        }\n      },\n      operator: {\n        type: 'string',\n        enum: ['>', '>=', '=', '!=', '<', '<=', 'notNull']\n      }\n    }\n  }\n};\n\nvar data = {\n  type: 'object',\n  properties: {\n    // data source\n    formatType: {\n      type: 'string',\n      enum: ['json', 'csv'],\n      default: 'json'\n    },\n    url: {\n      type: 'string',\n      default: undefined\n    },\n    vegaServer: {\n      type: 'object',\n      default: null,\n      properties: {\n        table: {\n          type: 'string',\n          default: undefined\n        },\n        url: {\n          type: 'string',\n          default: 'http://localhost:3001'\n        }\n      }\n    }\n  }\n};\n\nvar config = {\n  type: 'object',\n  properties: {\n    // template\n    width: {\n      type: 'integer',\n      default: undefined\n    },\n    height: {\n      type: 'integer',\n      default: undefined\n    },\n    viewport: {\n      type: 'array',\n      items: {\n        type: 'integer'\n      },\n      default: undefined\n    },\n    gridColor: {\n      type: 'string',\n      role: 'color',\n      default: '#eeeeee'\n    },\n\n    // filter null\n    filterNull: {\n      type: 'object',\n      properties: {\n        O: {type:'boolean', default: false},\n        Q: {type:'boolean', default: true},\n        T: {type:'boolean', default: true}\n      }\n    },\n    toggleSort: {\n      type: 'string',\n      default: 'O'\n    },\n\n    // single plot\n    singleHeight: {\n      // will be overwritten by bandWidth * (cardinality + padding)\n      type: 'integer',\n      default: 200,\n      minimum: 0\n    },\n    singleWidth: {\n      // will be overwritten by bandWidth * (cardinality + padding)\n      type: 'integer',\n      default: 200,\n      minimum: 0\n    },\n    // band size\n    largeBandSize: {\n      type: 'integer',\n      default: 21,\n      minimum: 0\n    },\n    smallBandSize: {\n      //small multiples or single plot with high cardinality\n      type: 'integer',\n      default: 12,\n      minimum: 0\n    },\n    largeBandMaxCardinality: {\n      type: 'integer',\n      default: 10\n    },\n    // small multiples\n    cellPadding: {\n      type: 'number',\n      default: 0.1\n    },\n    cellGridColor: {\n      type: 'string',\n      role: 'color',\n      default: '#aaaaaa'\n    },\n    cellBackgroundColor: {\n      type: 'string',\n      role: 'color',\n      default: 'transparent'\n    },\n    textCellWidth: {\n      type: 'integer',\n      default: 90,\n      minimum: 0\n    },\n\n    // marks\n    strokeWidth: {\n      type: 'integer',\n      default: 2,\n      minimum: 0\n    },\n\n    // scales\n    timeScaleLabelLength: {\n      type: 'integer',\n      default: 3,\n      minimum: 0\n    },\n    // other\n    characterWidth: {\n      type: 'integer',\n      default: 6\n    }\n  }\n};\n\n/** @type Object Schema of a vegalite specification */\nschema.schema = {\n  $schema: 'http://json-schema.org/draft-04/schema#',\n  description: 'Schema for vegalite specification',\n  type: 'object',\n  required: ['marktype', 'enc', 'data', 'config'],\n  properties: {\n    data: data,\n    marktype: schema.marktype,\n    enc: {\n      type: 'object',\n      properties: {\n        x: x,\n        y: y,\n        row: row,\n        col: col,\n        size: size,\n        color: color,\n        alpha: alpha,\n        shape: shape,\n        text: text,\n        detail: detail\n      }\n    },\n    filter: filter,\n    config: config\n  }\n};\n\nschema.encTypes = util.keys(schema.schema.properties.enc.properties);\n\n/** Instantiate a verbose vl spec from the schema */\nschema.instantiate = function() {\n  return schema.util.instantiate(schema.schema);\n};\n\n},{\"../util\":33,\"./schemautil\":32}],32:[function(require,module,exports){\n'use strict';\n\nvar schemautil = module.exports = {},\n  util = require('../util');\n\nvar isEmpty = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\nschemautil.extend = function(instance, schema) {\n  return schemautil.merge(schemautil.instantiate(schema), instance);\n};\n\n// instantiate a schema\nschemautil.instantiate = function(schema) {\n  var val;\n  if (schema === undefined) {\n    return undefined;\n  } else if ('default' in schema) {\n    val = schema.default;\n    return util.isObject(val) ? util.duplicate(val) : val;\n  } else if (schema.type === 'object') {\n    var instance = {};\n    for (var name in schema.properties) {\n      val = schemautil.instantiate(schema.properties[name]);\n      if (val !== undefined) {\n        instance[name] = val;\n      }\n    }\n    return instance;\n  } else if (schema.type === 'array') {\n    return [];\n  }\n  return undefined;\n};\n\n// remove all defaults from an instance\nschemautil.subtract = function(instance, defaults) {\n  var changes = {};\n  for (var prop in instance) {\n    var def = defaults[prop];\n    var ins = instance[prop];\n    // Note: does not properly subtract arrays\n    if (!defaults || def !== ins) {\n      if (typeof ins === 'object' && !util.isArray(ins) && def) {\n        var c = schemautil.subtract(ins, def);\n        if (!isEmpty(c))\n          changes[prop] = c;\n      } else if (!util.isArray(ins) || ins.length > 0) {\n        changes[prop] = ins;\n      }\n    }\n  }\n  return changes;\n};\n\nschemautil.merge = function(/*dest*, src0, src1, ...*/){\n  var dest = arguments[0];\n  for (var i=1 ; i<arguments.length; i++) {\n    dest = merge(dest, arguments[i]);\n  }\n  return dest;\n};\n\n// recursively merges src into dest\nfunction merge(dest, src) {\n  if (typeof src !== 'object' || src === null) {\n    return dest;\n  }\n\n  for (var p in src) {\n    if (!src.hasOwnProperty(p)) {\n      continue;\n    }\n    if (src[p] === undefined) {\n      continue;\n    }\n    if (typeof src[p] !== 'object' || src[p] === null) {\n      dest[p] = src[p];\n    } else if (typeof dest[p] !== 'object' || dest[p] === null) {\n      dest[p] = merge(src[p].constructor === Array ? [] : {}, src[p]);\n    } else {\n      merge(dest[p], src[p]);\n    }\n  }\n  return dest;\n}\n},{\"../util\":33}],33:[function(require,module,exports){\n'use strict';\n\nvar util = module.exports = require('datalib/src/util');\n\nutil.extend(util, require('datalib/src/generate'));\nutil.bin = require('datalib/src/bin');\n\nutil.isin = function(item, array) {\n  return array.indexOf(item) !== -1;\n};\n\nutil.forEach = function(obj, f, thisArg) {\n  if (obj.forEach) {\n    obj.forEach.call(thisArg, f);\n  } else {\n    for (var k in obj) {\n      f.call(thisArg, obj[k], k , obj);\n    }\n  }\n};\n\nutil.getbins = function(stats, maxbins) {\n  return util.bin({\n    min: stats.min,\n    max: stats.max,\n    maxbins: maxbins\n  });\n};\n\n/**\n * x[p[0]]...[p[n]] = val\n * @param noaugment determine whether new object should be added f\n * or non-existing properties along the path\n */\nutil.setter = function(x, p, val, noaugment) {\n  for (var i=0; i<p.length-1; ++i) {\n    if (!noaugment && !(p[i] in x)){\n      x = x[p[i]] = {};\n    } else {\n      x = x[p[i]];\n    }\n  }\n  x[p[i]] = val;\n};\n\n\n/**\n * returns x[p[0]]...[p[n]]\n * @param augment determine whether new object should be added f\n * or non-existing properties along the path\n */\nutil.getter = function(x, p, noaugment) {\n  for (var i=0; i<p.length; ++i) {\n    if (!noaugment && !(p[i] in x)){\n      x = x[p[i]] = {};\n    } else {\n      x = x[p[i]];\n    }\n  }\n  return x;\n};\n\nutil.error = function(msg) {\n  console.error('[VL Error]', msg);\n};\n\n\n},{\"datalib/src/bin\":4,\"datalib/src/generate\":6,\"datalib/src/util\":7}]},{},[1])(1)\n});\n//# sourceMappingURL=data:application/json;base64,\n","// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    draining = true;\n    var currentQueue;\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        var i = -1;\n        while (++i < len) {\n            currentQueue[i]();\n        }\n        len = queue.length;\n    }\n    draining = false;\n}\nprocess.nextTick = function (fun) {\n    queue.push(fun);\n    if (!draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\n// TODO(shtylman)\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","var util = require('./util');\nvar units = require('./date-units');\nvar EPSILON = 1e-15;\n\nfunction bin(opt) {\n  opt = opt || {};\n\n  // determine range\n  var maxb = opt.maxbins || 15,\n      base = opt.base || 10,\n      logb = Math.log(base),\n      div = opt.div || [5, 2],      \n      min = opt.min,\n      max = opt.max,\n      span = max - min,\n      step, logb, level, minstep, precision, v, i, eps;\n\n  if (opt.step != null) {\n    // if step size is explicitly given, use that\n    step = opt.step;\n  } else if (opt.steps) {\n    // if provided, limit choice to acceptable step sizes\n    step = opt.steps[Math.min(\n      opt.steps.length - 1,\n      bisect(opt.steps, span/maxb, 0, opt.steps.length)\n    )];\n  } else {\n    // else use span to determine step size\n    level = Math.ceil(Math.log(maxb) / logb);\n    minstep = opt.minstep || 0;\n    step = Math.max(\n      minstep,\n      Math.pow(base, Math.round(Math.log(span) / logb) - level)\n    );\n    \n    // increase step size if too many bins\n    do { step *= base; } while (Math.ceil(span/step) > maxb);\n\n    // decrease step size if allowed\n    for (i=0; i<div.length; ++i) {\n      v = step / div[i];\n      if (v >= minstep && span / v <= maxb) step = v;\n    }\n  }\n\n  // update precision, min and max\n  v = Math.log(step);\n  precision = v >= 0 ? 0 : ~~(-v / logb) + 1;\n  eps = Math.pow(base, -precision - 1);\n  min = Math.min(min, Math.floor(min / step + eps) * step);\n  max = Math.ceil(max / step) * step;\n\n  return {\n    start: min,\n    stop:  max,\n    step:  step,\n    unit:  {precision: precision},\n    value: value,\n    index: index\n  };\n};\n\nfunction bisect(a, x, lo, hi) {\n  while (lo < hi) {\n    var mid = lo + hi >>> 1;\n    if (util.cmp(a[mid], x) < 0) { lo = mid + 1; }\n    else { hi = mid; }\n  }\n  return lo;\n};\n\nfunction value(v) {\n  return this.step * Math.floor(v / this.step + EPSILON);\n}\n\nfunction index(v) {\n  return Math.floor((v - this.start) / this.step + EPSILON);\n}\n\nfunction date_value(v) {\n  return this.unit.date(value.call(this, v));\n}\n\nfunction date_index(v) {\n  return index.call(this, this.unit.unit(v));\n}\n\nbin.date = function(opt) {\n  opt = opt || {};\n\n  // find time step, then bin\n  var dmin = opt.min,\n      dmax = opt.max,\n      maxb = opt.maxbins || 20,\n      minb = opt.minbins || 4,\n      span = (+dmax) - (+dmin);\n      unit = opt.unit ? units[opt.unit] : units.find(span, minb, maxb),\n      bins = bin({\n        min:     unit.min != null ? unit.min : unit.unit(dmin),\n        max:     unit.max != null ? unit.max : unit.unit(dmax),\n        maxbins: maxb,\n        minstep: unit.minstep,\n        steps:   unit.step\n      });\n\n  bins.unit = unit;\n  bins.index = date_index;\n  if (!opt.raw) bins.value = date_value;\n  return bins;\n};\n\nmodule.exports = bin;\n","var util = require('./util');\n\nvar STEPS = [\n  [31536e6, 5],  // 1-year\n  [7776e6, 4],   // 3-month\n  [2592e6, 4],   // 1-month\n  [12096e5, 3],  // 2-week\n  [6048e5, 3],   // 1-week\n  [1728e5, 3],   // 2-day\n  [864e5, 3],    // 1-day\n  [432e5, 2],    // 12-hour\n  [216e5, 2],    // 6-hour\n  [108e5, 2],    // 3-hour\n  [36e5, 2],     // 1-hour\n  [18e5, 1],     // 30-minute\n  [9e5, 1],      // 15-minute\n  [3e5, 1],      // 5-minute\n  [6e4, 1],      // 1-minute\n  [3e4, 0],      // 30-second\n  [15e3, 0],     // 15-second\n  [5e3, 0],      // 5-second\n  [1e3, 0]       // 1-second\n];\n\nvar entries = [\n  {\n    type: \"second\",\n    minstep: 1,\n    format: \"%Y %b %-d %H:%M:%S.%L\",\n    date: function(d) {\n      return new Date(d * 1e3);\n    },\n    unit: function(d) {\n      return (+d / 1e3);\n    }\n  },\n  {\n    type: \"minute\",\n    minstep: 1,\n    format: \"%Y %b %-d %H:%M\",\n    date: function(d) {\n      return new Date(d * 6e4);\n    },\n    unit: function(d) {\n      return ~~(+d / 6e4);\n    }\n  },\n  {\n    type: \"hour\",\n    minstep: 1,\n    format: \"%Y %b %-d %H:00\",\n    date: function(d) {\n      return new Date(d * 36e5);\n    },\n    unit: function(d) {\n      return ~~(+d / 36e5);\n    }\n  },\n  {\n    type: \"day\",\n    minstep: 1,\n    step: [1, 7],\n    format: \"%Y %b %-d\",\n    date: function(d) {\n      return new Date(d * 864e5);\n    },\n    unit: function(d) {\n      return ~~(+d / 864e5);\n    }\n  },\n  {\n    type: \"month\",\n    minstep: 1,\n    step: [1, 3, 6],\n    format: \"%b %Y\",\n    date: function(d) {\n      return new Date(Date.UTC(~~(d / 12), d % 12, 1));\n    },\n    unit: function(d) {\n      if (util.isNumber(d)) d = new Date(d);\n      return 12 * d.getUTCFullYear() + d.getUTCMonth();\n    }\n  },\n  {\n    type: \"year\",\n    minstep: 1,\n    format: \"%Y\",\n    date: function(d) {\n      return new Date(Date.UTC(d, 0, 1));\n    },\n    unit: function(d) {\n      return (util.isNumber(d) ? new Date(d) : d).getUTCFullYear();\n    }\n  }\n];\n\nvar minuteOfHour = {\n  type: \"minuteOfHour\",\n  min: 0,\n  max: 59,\n  minstep: 1,\n  format: \"%M\",\n  date: function(d) {\n    return new Date(Date.UTC(1970, 0, 1, 0, d));\n  },\n  unit: function(d) {\n    return (util.isNumber(d) ? new Date(d) : d).getUTCMinutes();\n  }\n};\n\nvar hourOfDay = {\n  type: \"hourOfDay\",\n  min: 0,\n  max: 23,\n  minstep: 1,\n  format: \"%H\",\n  date: function(d) {\n    return new Date(Date.UTC(1970, 0, 1, d));\n  },\n  unit: function(d) {\n    return (util.isNumber(d) ? new Date(d) : d).getUTCHours();\n  }\n};\n\nvar dayOfWeek = {\n  type: \"dayOfWeek\",\n  min: 0,\n  max: 6,\n  step: [1],\n  format: \"%a\",\n  date: function(d) {\n    return new Date(Date.UTC(1970, 0, 4 + d));\n  },\n  unit: function(d) {\n    return (util.isNumber(d) ? new Date(d) : d).getUTCDay();\n  }\n};\n\nvar dayOfMonth = {\n  type: \"dayOfMonth\",\n  min: 1,\n  max: 31,\n  step: [1],\n  format: \"%-d\",\n  date: function(d) {\n    return new Date(Date.UTC(1970, 0, d));\n  },\n  unit: function(d) {\n    return (util.isNumber(d) ? new Date(d) : d).getUTCDate();\n  }\n};\n\nvar monthOfYear = {\n  type: \"monthOfYear\",\n  min: 0,\n  max: 11,\n  step: [1],\n  format: \"%b\",\n  date: function(d) {\n    return new Date(Date.UTC(1970, d % 12, 1));\n  },\n  unit: function(d) {\n    return (util.isNumber(d) ? new Date(d) : d).getUTCMonth();\n  }\n};\n\nvar units = {\n  \"second\":       entries[0],\n  \"minute\":       entries[1],\n  \"hour\":         entries[2],\n  \"day\":          entries[3],\n  \"month\":        entries[4],\n  \"year\":         entries[5],\n  \"minuteOfHour\": minuteOfHour,\n  \"hourOfDay\":    hourOfDay,\n  \"dayOfWeek\":    dayOfWeek,\n  \"dayOfMonth\":   dayOfMonth,\n  \"monthOfYear\":  monthOfYear,\n  \"timesteps\":    entries\n};\n\nunits.find = function(span, minb, maxb) {\n  var i, len, bins, step = STEPS[0];\n\n  for (i = 1, len = STEPS.length; i < len; ++i) {\n    step = STEPS[i];\n    if (span > step[0]) {\n      bins = span / step[0];\n      if (bins > maxb) {\n        return entries[STEPS[i - 1][1]];\n      }\n      if (bins >= minb) {\n        return entries[step[1]];\n      }\n    }\n  }\n  return entries[STEPS[STEPS.length - 1][1]];\n};\n\nmodule.exports = units;\n","var gen = module.exports = {};\n\ngen.repeat = function(val, n) {\n  var a = Array(n), i;\n  for (i=0; i<n; ++i) a[i] = val;\n  return a;\n};\n\ngen.zeros = function(n) {\n  return gen.repeat(0, n);\n};\n\ngen.range = function(start, stop, step) {\n  if (arguments.length < 3) {\n    step = 1;\n    if (arguments.length < 2) {\n      stop = start;\n      start = 0;\n    }\n  }\n  if ((stop - start) / step == Infinity) throw new Error('Infinite range');\n  var range = [], i = -1, j;\n  if (step < 0) while ((j = start + step * ++i) > stop) range.push(j);\n  else while ((j = start + step * ++i) < stop) range.push(j);\n  return range;\n};\n\ngen.random = {};\n\ngen.random.uniform = function(min, max) {\n  if (max === undefined) {\n\t\tmax = min;\n\t\tmin = 0;\n\t}\n\tvar d = max - min;\n\tvar f = function() {\n\t\treturn min + d * Math.random();\n\t};\n\tf.samples = function(n) { return gen.zeros(n).map(f); };\n\treturn f;\n};\n\ngen.random.integer = function(a, b) {\n\tif (b === undefined) {\n\t\tb = a;\n\t\ta = 0;\n\t}\n  var d = b - a;\n\tvar f = function() {\n\t\treturn a + Math.floor(d * Math.random());\n\t};\n\tf.samples = function(n) { return gen.zeros(n).map(f); };\n\treturn f;\n};\n\ngen.random.normal = function(mean, stdev) {\n\tmean = mean || 0;\n\tstdev = stdev || 1;\n\tvar next = undefined;\n\tvar f = function() {\n\t\tvar x = 0, y = 0, rds, c;\n\t\tif (next !== undefined) {\n\t\t\tx = next;\n\t\t\tnext = undefined;\n\t\t\treturn x;\n\t\t}\n\t\tdo {\n\t\t\tx = Math.random()*2-1;\n\t\t\ty = Math.random()*2-1;\n\t\t\trds = x*x + y*y;\n\t\t} while (rds == 0 || rds > 1);\n\t\tc = Math.sqrt(-2*Math.log(rds)/rds); // Box-Muller transform\n\t\tnext = mean + y*c*stdev;\n\t\treturn mean + x*c*stdev;\n\t};\n\tf.samples = function(n) { return gen.zeros(n).map(f); };\n\treturn f;\n};","var Buffer = require('buffer').Buffer;\nvar u = module.exports = {};\n\n// where are we?\n\nu.isNode = typeof process !== 'undefined'\n        && typeof process.stderr !== 'undefined';\n\n// type checking functions\n\nvar toString = Object.prototype.toString;\n\nu.isObject = function(obj) {\n  return obj === Object(obj);\n};\n\nu.isFunction = function(obj) {\n  return toString.call(obj) == '[object Function]';\n};\n\nu.isString = function(obj) {\n  return toString.call(obj) == '[object String]';\n};\n\nu.isArray = Array.isArray || function(obj) {\n  return toString.call(obj) == '[object Array]';\n};\n\nu.isNumber = function(obj) {\n  return !isNaN(parseFloat(obj)) && isFinite(obj);\n};\n\nu.isBoolean = function(obj) {\n  return toString.call(obj) == '[object Boolean]';\n};\n\nu.isDate = function(obj) {\n  return toString.call(obj) == '[object Date]';\n};\n\nu.isNotNull = function(obj) {\n  return obj != null && (typeof obj !== 'number' ? true : !isNaN(obj));\n};\n\nu.isBuffer = (Buffer && Buffer.isBuffer) || u.false;\n\n// type coercion functions\n\nu.number = function(s) { return s == null ? null : +s; };\n\nu.boolean = function(s) { return s == null ? null : s==='false' ? false : !!s; };\n\nu.date = function(s) { return s == null ? null : Date.parse(s); }\n\nu.array = function(x) { return x != null ? (u.isArray(x) ? x : [x]) : []; };\n\nu.str = function(x) {\n  return u.isArray(x) ? \"[\" + x.map(u.str) + \"]\"\n    : u.isObject(x) ? JSON.stringify(x)\n    : u.isString(x) ? (\"'\"+util_escape_str(x)+\"'\") : x;\n};\n\nvar escape_str_re = /(^|[^\\\\])'/g;\n\nfunction util_escape_str(x) {\n  return x.replace(escape_str_re, \"$1\\\\'\");\n}\n\n// utility functions\n\nu.identity = function(x) { return x; };\n\nu.true = function() { return true; };\n\nu.false = function() { return false; };\n\nu.duplicate = function(obj) {\n  return JSON.parse(JSON.stringify(obj));\n};\n\nu.equal = function(a, b) {\n  return JSON.stringify(a) === JSON.stringify(b);\n};\n\nu.extend = function(obj) {\n  for (var x, name, i=1, len=arguments.length; i<len; ++i) {\n    x = arguments[i];\n    for (name in x) { obj[name] = x[name]; }\n  }\n  return obj;\n};\n\nu.keys = function(x) {\n  var keys = [], k;\n  for (k in x) keys.push(k);\n  return keys;\n};\n\nu.vals = function(x) {\n  var vals = [], k;\n  for (k in x) vals.push(x[k]);\n  return vals;\n};\n\nu.toMap = function(list) {\n  return list.reduce(function(obj, x) {\n    return (obj[x] = 1, obj);\n  }, {});\n};\n\nu.keystr = function(values) {\n  // use to ensure consistent key generation across modules\n  return values.join(\"|\");\n};\n\n// data access functions\n\nu.field = function(f) {\n  return f.split(\"\\\\.\")\n    .map(function(d) { return d.split(\".\"); })\n    .reduce(function(a, b) {\n      if (a.length) { a[a.length-1] += \".\" + b.shift(); }\n      a.push.apply(a, b);\n      return a;\n    }, []);\n};\n\nu.accessor = function(f) {\n  var s;\n  return (u.isFunction(f) || f==null)\n    ? f : u.isString(f) && (s=u.field(f)).length > 1\n    ? function(x) { return s.reduce(function(x,f) {\n          return x[f];\n        }, x);\n      }\n    : function(x) { return x[f]; };\n};\n\nu.mutator = function(f) {\n  var s;\n  return u.isString(f) && (s=u.field(f)).length > 1\n    ? function(x, v) {\n        for (var i=0; i<s.length-1; ++i) x = x[s[i]];\n        x[s[i]] = v;\n      }\n    : function(x, v) { x[f] = v; };\n};\n\n\n// comparison / sorting functions\n\nu.comparator = function(sort) {\n  var sign = [];\n  if (sort === undefined) sort = [];\n  sort = u.array(sort).map(function(f) {\n    var s = 1;\n    if      (f[0] === \"-\") { s = -1; f = f.slice(1); }\n    else if (f[0] === \"+\") { s = +1; f = f.slice(1); }\n    sign.push(s);\n    return u.accessor(f);\n  });\n  return function(a,b) {\n    var i, n, f, x, y;\n    for (i=0, n=sort.length; i<n; ++i) {\n      f = sort[i]; x = f(a); y = f(b);\n      if (x < y) return -1 * sign[i];\n      if (x > y) return sign[i];\n    }\n    return 0;\n  };\n};\n\nu.cmp = function(a, b) {\n  if (a < b) {\n    return -1;\n  } else if (a > b) {\n    return 1;\n  } else if (a >= b) {\n    return 0;\n  } else if (a === null && b === null) {\n    return 0;\n  } else if (a === null) {\n    return -1;\n  } else if (b === null) {\n    return 1;\n  }\n  return NaN;\n};\n\nu.numcmp = function(a, b) { return a - b; };\n\nu.stablesort = function(array, sortBy, keyFn) {\n  var indices = array.reduce(function(idx, v, i) {\n    return (idx[keyFn(v)] = i, idx);\n  }, {});\n\n  array.sort(function(a, b) {\n    var sa = sortBy(a),\n        sb = sortBy(b);\n    return sa < sb ? -1 : sa > sb ? 1\n         : (indices[keyFn(a)] - indices[keyFn(b)]);\n  });\n\n  return array;\n};\n\n\n// string functions\n\n// ES6 compatibility per https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith#Polyfill\n// We could have used the polyfill code, but lets wait until ES6 becomes a standard first\nu.startsWith = String.prototype.startsWith\n  ? function(string, searchString) {\n    return string.startsWith(searchString);\n  }\n  : function(string, searchString) {\n    return string.lastIndexOf(searchString, 0) === 0;\n  };\n\nu.truncate = function(s, length, pos, word, ellipsis) {\n  var len = s.length;\n  if (len <= length) return s;\n  ellipsis = ellipsis !== undefined ? String(ellipsis) : \"…\";\n  var l = Math.max(0, length - ellipsis.length);\n\n  switch (pos) {\n    case \"left\":\n      return ellipsis + (word ? truncateOnWord(s,l,1) : s.slice(len-l));\n    case \"middle\":\n    case \"center\":\n      var l1 = Math.ceil(l/2), l2 = Math.floor(l/2);\n      return (word ? truncateOnWord(s,l1) : s.slice(0,l1)) + ellipsis\n        + (word ? truncateOnWord(s,l2,1) : s.slice(len-l2));\n    default:\n      return (word ? truncateOnWord(s,l) : s.slice(0,l)) + ellipsis;\n  }\n};\n\nfunction truncateOnWord(s, len, rev) {\n  var cnt = 0, tok = s.split(truncate_word_re);\n  if (rev) {\n    s = (tok = tok.reverse())\n      .filter(function(w) { cnt += w.length; return cnt <= len; })\n      .reverse();\n  } else {\n    s = tok.filter(function(w) { cnt += w.length; return cnt <= len; });\n  }\n  return s.length ? s.join(\"\").trim() : tok[0].slice(0, len);\n}\n\nvar truncate_word_re = /([\\u0009\\u000A\\u000B\\u000C\\u000D\\u0020\\u00A0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u2028\\u2029\\u3000\\uFEFF])/;\n","'use strict';\n\nvar globals = require('./globals'),\n  consts = require('./consts'),\n  util = require('./util'),\n  vlfield = require('./field'),\n  vlenc = require('./enc'),\n  schema = require('./schema/schema'),\n  time = require('./compile/time');\n\nvar Encoding = module.exports = (function() {\n\n  function Encoding(marktype, enc, data, config, filter, theme) {\n    var defaults = schema.instantiate();\n\n    var spec = {\n      data: data,\n      marktype: marktype,\n      enc: enc,\n      config: config,\n      filter: filter || []\n    };\n\n    // type to bitcode\n    for (var e in defaults.enc) {\n      defaults.enc[e].type = consts.dataTypes[defaults.enc[e].type];\n    }\n\n    var specExtended = schema.util.merge(defaults, theme || {}, spec) ;\n\n    this._data = specExtended.data;\n    this._marktype = specExtended.marktype;\n    this._enc = specExtended.enc;\n    this._config = specExtended.config;\n    this._filter = specExtended.filter;\n  }\n\n  var proto = Encoding.prototype;\n\n  proto.marktype = function() {\n    return this._marktype;\n  };\n\n  proto.is = function(m) {\n    return this._marktype === m;\n  };\n\n  proto.has = function(encType) {\n    // equivalent to calling vlenc.has(this._enc, encType)\n    return this._enc[encType].name !== undefined;\n  };\n\n  proto.enc = function(et) {\n    return this._enc[et];\n  };\n\n  proto.filter = function() {\n    var filterNull = [],\n      fields = this.fields(),\n      self = this;\n\n    util.forEach(fields, function(fieldList, fieldName) {\n      if (fieldName === '*') return; //count\n\n      if ((self.config('filterNull').Q && fieldList.containsType[Q]) ||\n          (self.config('filterNull').T && fieldList.containsType[T]) ||\n          (self.config('filterNull').O && fieldList.containsType[O])) {\n        filterNull.push({\n          operands: [fieldName],\n          operator: 'notNull'\n        });\n      }\n    });\n\n    return filterNull.concat(this._filter);\n  };\n\n  // get \"field\" property for vega\n  proto.field = function(et, nodata, nofn) {\n    if (!this.has(et)) return null;\n\n    var f = (nodata ? '' : 'data.');\n\n    if (this._enc[et].aggr === 'count') {\n      return f + 'count';\n    } else if (!nofn && this._enc[et].bin) {\n      return f + 'bin_' + this._enc[et].name;\n    } else if (!nofn && this._enc[et].aggr) {\n      return f + this._enc[et].aggr + '_' + this._enc[et].name;\n    } else if (!nofn && this._enc[et].fn) {\n      return f + this._enc[et].fn + '_' + this._enc[et].name;\n    } else {\n      return f + this._enc[et].name;\n    }\n  };\n\n  proto.fieldName = function(et) {\n    return this._enc[et].name;\n  };\n\n  /*\n   * return key-value pairs of field name and list of fields of that field name\n   */\n  proto.fields = function() {\n    return vlenc.fields(this._enc);\n  };\n\n  proto.fieldTitle = function(et) {\n    if (vlfield.isCount(this._enc[et])) {\n      return vlfield.count.displayName;\n    }\n    var fn = this._enc[et].aggr || this._enc[et].fn || (this._enc[et].bin && \"bin\");\n    if (fn) {\n      return fn.toUpperCase() + '(' + this._enc[et].name + ')';\n    } else {\n      return this._enc[et].name;\n    }\n  };\n\n  proto.scale = function(et) {\n    return this._enc[et].scale || {};\n  };\n\n  proto.axis = function(et) {\n    return this._enc[et].axis || {};\n  };\n\n  proto.band = function(et) {\n    return this._enc[et].band || {};\n  };\n\n  proto.bandSize = function(encType, useSmallBand) {\n    useSmallBand = useSmallBand ||\n      //isBandInSmallMultiples\n      (encType === Y && this.has(ROW) && this.has(Y)) ||\n      (encType === X && this.has(COL) && this.has(X));\n\n    // if band.size is explicitly specified, follow the specification, otherwise draw value from config.\n    return this.band(encType).size ||\n      this.config(useSmallBand ? 'smallBandSize' : 'largeBandSize');\n  };\n\n  proto.aggr = function(et) {\n    return this._enc[et].aggr;\n  };\n\n  // returns false if binning is disabled, otherwise an object with binning properties\n  proto.bin = function(et) {\n    var bin = this._enc[et].bin;\n    if (bin === {})\n      return false;\n    if (bin === true)\n      return {\n        maxbins: schema.MAXBINS_DEFAULT\n      };\n    return bin;\n  };\n\n  proto.legend = function(et) {\n    return this._enc[et].legend;\n  };\n\n  proto.value = function(et) {\n    return this._enc[et].value;\n  };\n\n  proto.fn = function(et) {\n    return this._enc[et].fn;\n  };\n\n  proto.sort = function(et, stats) {\n    var sort = this._enc[et].sort,\n      enc = this._enc,\n      isType = vlfield.isType.byCode;\n\n    // console.log('sort:', sort, 'support:', Encoding.toggleSort.support({enc:this._enc}, stats) , 'toggle:', this.config('toggleSort'))\n\n    if ((!sort || sort.length===0) &&\n        Encoding.toggleSort.support({enc:this._enc}, stats, true) && //HACK\n        this.config('toggleSort') === 'Q'\n      ) {\n      var qField = isType(enc.x, O) ? enc.y : enc.x;\n\n      if (isType(enc[et], O)) {\n        sort = [{\n          name: qField.name,\n          aggr: qField.aggr,\n          type: qField.type,\n          reverse: true\n        }];\n      }\n    }\n\n    return sort;\n  };\n\n  proto.length = function() {\n    return util.keys(this._enc).length;\n  };\n\n  proto.map = function(f) {\n    return vlenc.map(this._enc, f);\n  };\n\n  proto.reduce = function(f, init) {\n    return vlenc.reduce(this._enc, f, init);\n  };\n\n  proto.forEach = function(f) {\n    return vlenc.forEach(this._enc, f);\n  };\n\n  proto.type = function(et) {\n    return this.has(et) ? this._enc[et].type : null;\n  };\n\n  proto.role = function(et) {\n    return this.has(et) ? vlfield.role(this._enc[et]) : null;\n  };\n\n  proto.text = function(prop) {\n    var text = this._enc[TEXT].text;\n    return prop ? text[prop] : text;\n  };\n\n  proto.font = function(prop) {\n    var font = this._enc[TEXT].font;\n    return prop ? font[prop] : font;\n  };\n\n  proto.isType = function(et, type) {\n    var field = this.enc(et);\n    return field && Encoding.isType(field, type);\n  };\n\n  Encoding.isType = function (fieldDef, type) {\n    // FIXME vlfield.isType\n    return (fieldDef.type & type) > 0;\n  };\n\n  Encoding.isOrdinalScale = function(encoding, encType) {\n    return vlfield.isOrdinalScale(encoding.enc(encType), true);\n  };\n\n  Encoding.isDimension = function(encoding, encType) {\n    return vlfield.isDimension(encoding.enc(encType), true);\n  };\n\n  Encoding.isMeasure = function(encoding, encType) {\n    return vlfield.isMeasure(encoding.enc(encType), true);\n  };\n\n  proto.isOrdinalScale = function(encType) {\n    return this.has(encType) && Encoding.isOrdinalScale(this, encType);\n  };\n\n  proto.isDimension = function(encType) {\n    return this.has(encType) && Encoding.isDimension(this, encType);\n  };\n\n  proto.isMeasure = function(encType) {\n    return this.has(encType) && Encoding.isMeasure(this, encType);\n  };\n\n  proto.isAggregate = function() {\n    return vlenc.isAggregate(this._enc);\n  };\n\n  Encoding.isAggregate = function(spec) {\n    return vlenc.isAggregate(spec.enc);\n  };\n\n  Encoding.alwaysNoOcclusion = function(spec, stats) {\n    // FIXME raw OxQ with # of rows = # of O\n    return vlenc.isAggregate(spec.enc);\n  };\n\n  Encoding.isStack = function(spec) {\n    // FIXME update this once we have control for stack ...\n    return (spec.marktype === 'bar' || spec.marktype === 'area') &&\n      spec.enc.color;\n  };\n\n  proto.isStack = function() {\n    // FIXME update this once we have control for stack ...\n    return (this.is('bar') || this.is('area')) && this.has('color');\n  };\n\n  proto.cardinality = function(encType, stats) {\n    return vlfield.cardinality(this.enc(encType), stats, this.config('filterNull'), true);\n  };\n\n  proto.isRaw = function() {\n    return !this.isAggregate();\n  };\n\n  proto.data = function(name) {\n    return this._data[name];\n  };\n\n  proto.config = function(name) {\n    return this._config[name];\n  };\n\n  proto.toSpec = function(excludeConfig) {\n    var enc = util.duplicate(this._enc),\n      spec;\n\n    // convert type's bitcode to type name\n    for (var e in enc) {\n      enc[e].type = consts.dataTypeNames[enc[e].type];\n    }\n\n    spec = {\n      marktype: this._marktype,\n      enc: enc,\n      filter: this._filter\n    };\n\n    if (!excludeConfig) {\n      spec.config = util.duplicate(this._config);\n    }\n\n    // remove defaults\n    var defaults = schema.instantiate();\n    return schema.util.subtract(spec, defaults);\n  };\n\n  proto.toShorthand = function() {\n    var c = consts.shorthand;\n    return 'mark' + c.assign + this._marktype +\n      c.delim + vlenc.shorthand(this._enc);\n  };\n\n  Encoding.shorthand = function (spec) {\n    var c = consts.shorthand;\n    return 'mark' + c.assign + spec.marktype +\n      c.delim + vlenc.shorthand(spec.enc);\n  };\n\n  Encoding.fromShorthand = function(shorthand, data, config, theme) {\n    var c = consts.shorthand,\n        split = shorthand.split(c.delim),\n        marktype = split.shift().split(c.assign)[1].trim(),\n        enc = vlenc.fromShorthand(split, true);\n\n    return new Encoding(marktype, enc, data, config, null, theme);\n  };\n\n  Encoding.specFromShorthand = function(shorthand, data, config, excludeConfig) {\n    return Encoding.fromShorthand(shorthand, data, config).toSpec(excludeConfig);\n  };\n\n  Encoding.fromSpec = function(spec, theme) {\n    var enc = util.duplicate(spec.enc || {});\n\n    //convert type from string to bitcode (e.g, O=1)\n    for (var e in enc) {\n      enc[e].type = consts.dataTypes[enc[e].type];\n    }\n\n    return new Encoding(spec.marktype, enc, spec.data, spec.config, spec.filter, theme);\n  };\n\n  Encoding.transpose = function(spec) {\n    var oldenc = spec.enc,\n      enc = util.duplicate(spec.enc);\n    enc.x = oldenc.y;\n    enc.y = oldenc.x;\n    enc.row = oldenc.col;\n    enc.col = oldenc.row;\n    spec.enc = enc;\n    return spec;\n  };\n\n  Encoding.toggleSort = function(spec) {\n    spec.config = spec.config || {};\n    spec.config.toggleSort = spec.config.toggleSort === 'Q' ? 'O' :'Q';\n    return spec;\n  };\n\n\n  Encoding.toggleSort.direction = function(spec, useTypeCode) {\n    if (!Encoding.toggleSort.support(spec, useTypeCode)) { return; }\n    var enc = spec.enc;\n    return enc.x.type === 'O' ? 'x' :  'y';\n  };\n\n  Encoding.toggleSort.mode = function(spec) {\n    return spec.config.toggleSort;\n  };\n\n  Encoding.toggleSort.support = function(spec, stats, useTypeCode) {\n    var enc = spec.enc,\n      isType = vlfield.isType.get(useTypeCode);\n\n    if (vlenc.has(enc, ROW) || vlenc.has(enc, COL) ||\n      !vlenc.has(enc, X) || !vlenc.has(enc, Y) ||\n      !Encoding.alwaysNoOcclusion(spec, stats)) {\n      return false;\n    }\n\n    return ( isType(enc.x, O) && vlfield.isMeasure(enc.y, useTypeCode)) ? 'x' :\n      ( isType(enc.y, O) && vlfield.isMeasure(enc.x, useTypeCode)) ? 'y' : false;\n  };\n\n  Encoding.toggleFilterNullO = function(spec) {\n    spec.config = spec.config || {};\n    spec.config.filterNull = spec.config.filterNull || { //FIXME\n      T: true,\n      Q: true\n    };\n    spec.config.filterNull.O = !spec.config.filterNull.O;\n    return spec;\n  };\n\n  Encoding.toggleFilterNullO.support = function(spec, stats) {\n    var fields = vlenc.fields(spec.enc);\n    for (var fieldName in fields) {\n      var fieldList = fields[fieldName];\n      if (fieldList.containsType.O && fieldName in stats && stats[fieldName].nulls > 0) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  return Encoding;\n})();\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util');\n\nmodule.exports = aggregates;\n\nfunction aggregates(spec, encoding, opt) {\n  opt = opt || {};\n\n  var dims = {}, meas = {}, detail = {}, facets = {},\n    data = spec.data[1]; // currently data[0] is raw and data[1] is table\n\n  encoding.forEach(function(field, encType) {\n    if (field.aggr) {\n      if (field.aggr === 'count') {\n        meas.count = {op: 'count', field: '*'};\n      }else {\n        meas[field.aggr + '|'+ field.name] = {\n          op: field.aggr,\n          field: 'data.'+ field.name\n        };\n      }\n    } else {\n      dims[field.name] = encoding.field(encType);\n      if (encType == ROW || encType == COL) {\n        facets[field.name] = dims[field.name];\n      }else if (encType !== X && encType !== Y) {\n        detail[field.name] = dims[field.name];\n      }\n    }\n  });\n  dims = util.vals(dims);\n  meas = util.vals(meas);\n\n  if (meas.length > 0 && !opt.preaggregatedData) {\n    if (!data.transform) data.transform = [];\n    data.transform.push({\n      type: 'aggregate',\n      groupby: dims,\n      fields: meas\n    });\n  }\n  return {\n    details: util.vals(detail),\n    dims: dims,\n    facets: util.vals(facets),\n    aggregated: meas.length > 0\n  };\n}\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  setter = util.setter,\n  getter = util.getter,\n  time = require('./time');\n\nvar axis = module.exports = {};\n\naxis.names = function(props) {\n  return util.keys(util.keys(props).reduce(function(a, x) {\n    var s = props[x].scale;\n    if (s === X || s === Y) a[props[x].scale] = 1;\n    return a;\n  }, {}));\n};\n\naxis.defs = function(names, encoding, layout, stats, opt) {\n  return names.reduce(function(a, name) {\n    a.push(axis.def(name, encoding, layout, stats, opt));\n    return a;\n  }, []);\n};\n\naxis.def = function(name, encoding, layout, stats, opt) {\n  var type = name;\n  var isCol = name == COL, isRow = name == ROW;\n  var rowOffset = axisTitleOffset(encoding, layout, Y) + 20,\n    cellPadding = layout.cellPadding;\n\n\n  if (isCol) type = 'x';\n  if (isRow) type = 'y';\n\n  var def = {\n    type: type,\n    scale: name\n  };\n\n  if (encoding.axis(name).grid) {\n    def.grid = true;\n    def.layer = (isRow || isCol) ? 'front' :  'back';\n\n    if (isCol) {\n      // set grid property -- put the lines on the right the cell\n      setter(def, ['properties', 'grid'], {\n        x: {\n          offset: layout.cellWidth * (1+ cellPadding/2.0),\n          // default value(s) -- vega doesn't do recursive merge\n          scale: 'col'\n        },\n        y: {\n          value: -layout.cellHeight * (cellPadding/2),\n        },\n        stroke: { value: encoding.config('cellGridColor') }\n      });\n    } else if (isRow) {\n      // set grid property -- put the lines on the top\n      setter(def, ['properties', 'grid'], {\n        y: {\n          offset: -layout.cellHeight * (cellPadding/2),\n          // default value(s) -- vega doesn't do recursive merge\n          scale: 'row'\n        },\n        x: {\n          value: rowOffset\n        },\n        x2: {\n          offset: rowOffset + (layout.cellWidth * 0.05),\n          // default value(s) -- vega doesn't do recursive merge\n          group: \"mark.group.width\",\n          mult: 1\n        },\n        stroke: { value: encoding.config('cellGridColor') }\n      });\n    } else {\n      setter(def, ['properties', 'grid', 'stroke'], {\n        value: encoding.config('gridColor')\n      });\n    }\n  }\n\n  if (encoding.axis(name).title) {\n    def = axis_title(def, name, encoding, layout, opt);\n  }\n\n  if (isRow || isCol) {\n    setter(def, ['properties', 'ticks'], {\n      opacity: {value: 0}\n    });\n    setter(def, ['properties', 'majorTicks'], {\n      opacity: {value: 0}\n    });\n    setter(def, ['properties', 'axis'], {\n      opacity: {value: 0}\n    });\n  }\n\n  if (isCol) {\n    def.orient = 'top';\n  }\n\n  if (isRow) {\n    def.offset = rowOffset;\n  }\n\n  if (name == X) {\n    if (encoding.has(Y) && encoding.isOrdinalScale(Y) && encoding.cardinality(Y, stats) > 30) {\n      def.orient = 'top';\n    }\n\n    if (encoding.isDimension(X) || encoding.isType(X, T)) {\n      setter(def, ['properties','labels'], {\n        angle: {value: 270},\n        align: {value: 'right'},\n        baseline: {value: 'middle'}\n      });\n    } else { // Q\n      def.ticks = 5;\n    }\n  }\n\n  def = axis_labels(def, name, encoding, layout, opt);\n\n  return def;\n};\n\nfunction axis_title(def, name, encoding, layout, opt) {\n  var maxlength = null,\n    fieldTitle = encoding.fieldTitle(name);\n  if (name===X) {\n    maxlength = layout.cellWidth / encoding.config('characterWidth');\n  } else if (name === Y) {\n    maxlength = layout.cellHeight / encoding.config('characterWidth');\n  }\n\n  def.title = maxlength ? util.truncate(fieldTitle, maxlength) : fieldTitle;\n\n  if (name === ROW) {\n    setter(def, ['properties','title'], {\n      angle: {value: 0},\n      align: {value: 'right'},\n      baseline: {value: 'middle'},\n      dy: {value: (-layout.height/2) -20}\n    });\n  }\n\n  def.titleOffset = axisTitleOffset(encoding, layout, name);\n  return def;\n}\n\nfunction axis_labels(def, name, encoding, layout, opt) {\n  var fn;\n  // add custom label for time type\n  if (encoding.isType(name, T) && (fn = encoding.fn(name)) && (time.hasScale(fn))) {\n    setter(def, ['properties','labels','text','scale'], 'time-'+ fn);\n  }\n\n  var textTemplatePath = ['properties','labels','text','template'];\n  if (encoding.axis(name).format) {\n    def.format = encoding.axis(name).format;\n  } else if (encoding.isType(name, Q)) {\n    setter(def, textTemplatePath, \"{{data | number:'.3s'}}\");\n  } else if (encoding.isType(name, T) && !encoding.fn(name)) {\n    setter(def, textTemplatePath, \"{{data | time:'%Y-%m-%d'}}\");\n  } else if (encoding.isType(name, T) && encoding.fn(name) === 'year') {\n    setter(def, textTemplatePath, \"{{data | number:'d'}}\");\n  } else if (encoding.isType(name, O) && encoding.axis(name).maxLabelLength) {\n    setter(def, textTemplatePath, '{{data | truncate:' + encoding.axis(name).maxLabelLength + '}}');\n  }\n\n  return def;\n}\n\nfunction axisTitleOffset(encoding, layout, name) {\n  var value = encoding.axis(name).titleOffset;\n  if (value) {\n    return value;\n  }\n  switch (name) {\n    case ROW: return 0;\n    case COL: return 35;\n  }\n  return getter(layout, [name, 'axisTitleOffset']);\n}\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util');\n\nmodule.exports = binning;\n\nfunction binning(spec, encoding, opt) {\n  opt = opt || {};\n  var bins = {};\n\n  if (opt.preaggregatedData) {\n    return;\n  }\n\n  if (!spec.transform) spec.transform = [];\n\n  encoding.forEach(function(field, encType) {\n    if (encoding.bin(encType)) {\n      spec.transform.push({\n        type: 'bin',\n        field: 'data.' + field.name,\n        output: 'data.bin_' + field.name,\n        maxbins: encoding.bin(encType).maxbins\n      });\n    }\n  });\n}\n","'use strict';\n\nvar globals = require('../globals');\n\nmodule.exports = compile;\n\nvar Encoding = require('../Encoding'),\n  axis = compile.axis = require('./axis'),\n  filter = compile.filter = require('./filter'),\n  legend = compile.legend = require('./legend'),\n  marks = compile.marks = require('./marks'),\n  scale = compile.scale = require('./scale');\n\ncompile.aggregate = require('./aggregate');\ncompile.bin = require('./bin');\ncompile.facet = require('./facet');\ncompile.group = require('./group');\ncompile.layout = require('./layout');\ncompile.sort = require('./sort');\ncompile.stack = require('./stack');\ncompile.style = require('./style');\ncompile.subfacet = require('./subfacet');\ncompile.template = require('./template');\ncompile.time = require('./time');\n\nfunction compile(spec, stats, theme) {\n  return compile.encoding(Encoding.fromSpec(spec, theme), stats);\n}\n\ncompile.shorthand = function (shorthand, stats, config, theme) {\n  return compile.encoding(Encoding.fromShorthand(shorthand, config, theme), stats);\n};\n\ncompile.encoding = function (encoding, stats) {\n  var layout = compile.layout(encoding, stats),\n    style = compile.style(encoding, stats),\n    spec = compile.template(encoding, layout, stats),\n    group = spec.marks[0],\n    mark = marks[encoding.marktype()],\n    mdefs = marks.def(mark, encoding, layout, style),\n    mdef = mdefs[0];  // TODO: remove this dirty hack by refactoring the whole flow\n\n  filter.addFilters(spec, encoding);\n  var sorting = compile.sort(spec, encoding, stats);\n\n  var hasRow = encoding.has(ROW), hasCol = encoding.has(COL);\n\n  var preaggregatedData = !!encoding.data('vegaServer');\n\n  for (var i = 0; i < mdefs.length; i++) {\n    group.marks.push(mdefs[i]);\n  }\n\n  compile.bin(spec.data[1], encoding, {preaggregatedData: preaggregatedData});\n\n  var lineType = marks[encoding.marktype()].line;\n\n  if (!preaggregatedData) {\n    spec = compile.time(spec, encoding);\n  }\n\n  // handle subfacets\n  var aggResult = compile.aggregate(spec, encoding, {preaggregatedData: preaggregatedData}),\n    details = aggResult.details,\n    hasDetails = details && details.length > 0,\n    stack = hasDetails && compile.stack(spec, encoding, mdef, aggResult.facets);\n\n  if (hasDetails && (stack || lineType)) {\n    //subfacet to group stack / line together in one group\n    compile.subfacet(group, mdef, details, stack, encoding);\n  }\n\n  // auto-sort line/area values\n  //TODO(kanitw): have some config to turn off auto-sort for line (for line chart that encodes temporal information)\n  if (lineType) {\n    var f = (encoding.isMeasure(X) && encoding.isDimension(Y)) ? Y : X;\n    if (!mdef.from) mdef.from = {};\n    // TODO: why - ?\n    mdef.from.transform = [{type: 'sort', by: '-' + encoding.field(f)}];\n  }\n\n  // Small Multiples\n  if (hasRow || hasCol) {\n    spec = compile.facet(group, encoding, layout, style, sorting, spec, mdef, stack, stats);\n    spec.legends = legend.defs(encoding);\n  } else {\n    group.scales = scale.defs(scale.names(mdef.properties.update), encoding, layout, style, sorting,\n      {stack: stack, stats: stats});\n    group.axes = axis.defs(axis.names(mdef.properties.update), encoding, layout, stats);\n    group.legends = legend.defs(encoding);\n  }\n\n  filter.filterLessThanZero(spec, encoding);\n\n  return spec;\n};\n\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util');\n\nvar axis = require('./axis'),\n  groupdef = require('./group').def,\n  scale = require('./scale');\n\nmodule.exports = faceting;\n\nfunction faceting(group, encoding, layout, style, sorting, spec, mdef, stack, stats) {\n  var enter = group.properties.enter;\n  var facetKeys = [], cellAxes = [], from, axesGrp;\n\n  var hasRow = encoding.has(ROW), hasCol = encoding.has(COL);\n\n  enter.fill = {value: encoding.config('cellBackgroundColor')};\n\n  //move \"from\" to cell level and add facet transform\n  group.from = {data: group.marks[0].from.data};\n\n  // Hack, this needs to be refactored\n  for (var i = 0; i < group.marks.length; i++) {\n    var mark = group.marks[i];\n    if (mark.from.transform) {\n      delete mark.from.data; //need to keep transform for subfacetting case\n    } else {\n      delete mark.from;\n    }\n  }\n\n  if (hasRow) {\n    if (!encoding.isDimension(ROW)) {\n      util.error('Row encoding should be ordinal.');\n    }\n    enter.y = {scale: ROW, field: 'keys.' + facetKeys.length};\n    enter.height = {'value': layout.cellHeight}; // HACK\n\n    facetKeys.push(encoding.field(ROW));\n\n    if (hasCol) {\n      from = util.duplicate(group.from);\n      from.transform = from.transform || [];\n      from.transform.unshift({type: 'facet', keys: [encoding.field(COL)]});\n    }\n\n    axesGrp = groupdef('x-axes', {\n        axes: encoding.has(X) ? axis.defs(['x'], encoding, layout, stats) : undefined,\n        x: hasCol ? {scale: COL, field: 'keys.0'} : {value: 0},\n        width: hasCol && {'value': layout.cellWidth}, //HACK?\n        from: from\n      });\n\n    spec.marks.unshift(axesGrp); // need to prepend so it appears under the plots\n    (spec.axes = spec.axes || []);\n    spec.axes.push.apply(spec.axes, axis.defs(['row'], encoding, layout, stats));\n  } else { // doesn't have row\n    if (encoding.has(X)) {\n      //keep x axis in the cell\n      cellAxes.push.apply(cellAxes, axis.defs(['x'], encoding, layout, stats));\n    }\n  }\n\n  if (hasCol) {\n    if (!encoding.isDimension(COL)) {\n      util.error('Col encoding should be ordinal.');\n    }\n    enter.x = {scale: COL, field: 'keys.' + facetKeys.length};\n    enter.width = {'value': layout.cellWidth}; // HACK\n\n    facetKeys.push(encoding.field(COL));\n\n    if (hasRow) {\n      from = util.duplicate(group.from);\n      from.transform = from.transform || [];\n      from.transform.unshift({type: 'facet', keys: [encoding.field(ROW)]});\n    }\n\n    axesGrp = groupdef('y-axes', {\n      axes: encoding.has(Y) ? axis.defs(['y'], encoding, layout, stats) : undefined,\n      y: hasRow && {scale: ROW, field: 'keys.0'},\n      x: hasRow && {value: 0},\n      height: hasRow && {'value': layout.cellHeight}, //HACK?\n      from: from\n    });\n\n    spec.marks.unshift(axesGrp); // need to prepend so it appears under the plots\n    (spec.axes = spec.axes || []);\n    spec.axes.push.apply(spec.axes, axis.defs(['col'], encoding, layout, stats));\n  } else { // doesn't have col\n    if (encoding.has(Y)) {\n      cellAxes.push.apply(cellAxes, axis.defs(['y'], encoding, layout, stats));\n    }\n  }\n\n  // assuming equal cellWidth here\n  // TODO: support heterogenous cellWidth (maybe by using multiple scales?)\n  spec.scales = (spec.scales || []).concat(scale.defs(\n    scale.names(enter).concat(scale.names(mdef.properties.update)),\n    encoding,\n    layout,\n    style,\n    sorting,\n    {stack: stack, facet: true, stats: stats}\n  )); // row/col scales + cell scales\n\n  if (cellAxes.length > 0) {\n    group.axes = cellAxes;\n  }\n\n  // add facet transform\n  var trans = (group.from.transform || (group.from.transform = []));\n  trans.unshift({type: 'facet', keys: facetKeys});\n\n  return spec;\n}\n","'use strict';\n\nvar globals = require('../globals');\n\nvar filter = module.exports = {};\n\nvar BINARY = {\n  '>':  true,\n  '>=': true,\n  '=':  true,\n  '!=': true,\n  '<':  true,\n  '<=': true\n};\n\nfilter.addFilters = function(spec, encoding) {\n  var filters = encoding.filter(),\n    data = spec.data[0];  // apply filters to raw data before aggregation\n\n  if (!data.transform)\n    data.transform = [];\n\n  // add custom filters\n  for (var i in filters) {\n    var filter = filters[i];\n\n    var condition = '';\n    var operator = filter.operator;\n    var operands = filter.operands;\n\n    if (BINARY[operator]) {\n      // expects a field and a value\n      if (operator === '=') {\n        operator = '==';\n      }\n\n      var op1 = operands[0];\n      var op2 = operands[1];\n      condition = 'd.data.' + op1 + operator + op2;\n    } else if (operator === 'notNull') {\n      // expects a number of fields\n      for (var j in operands) {\n        condition += 'd.data.' + operands[j] + '!==null';\n        if (j < operands.length - 1) {\n          condition += ' && ';\n        }\n      }\n    } else {\n      console.warn('Unsupported operator: ', operator);\n    }\n\n    data.transform.push({\n      type: 'filter',\n      test: condition\n    });\n  }\n};\n\n// remove less than 0 values if we use log function\nfilter.filterLessThanZero = function(spec, encoding) {\n  encoding.forEach(function(field, encType) {\n    if (encoding.scale(encType).type === 'log') {\n      spec.data[1].transform.push({\n        type: 'filter',\n        test: 'd.' + encoding.field(encType) + '>0'\n      });\n    }\n  });\n};\n\n","'use strict';\n\nmodule.exports = {\n  def: groupdef\n};\n\nfunction groupdef(name, opt) {\n  opt = opt || {};\n  return {\n    _name: name || undefined,\n    type: 'group',\n    from: opt.from,\n    properties: {\n      enter: {\n        x: opt.x || undefined,\n        y: opt.y || undefined,\n        width: opt.width || {group: 'width'},\n        height: opt.height || {group: 'height'}\n      }\n    },\n    scales: opt.scales || undefined,\n    axes: opt.axes || undefined,\n    marks: opt.marks || []\n  };\n}\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  setter = util.setter,\n  schema = require('../schema/schema'),\n  time = require('./time'),\n  vlfield = require('../field');\n\nmodule.exports = vllayout;\n\nfunction vllayout(encoding, stats) {\n  var layout = box(encoding, stats);\n  layout = offset(encoding, stats, layout);\n  return layout;\n}\n\n/*\n  HACK to set chart size\n  NOTE: this fails for plots driven by derived values (e.g., aggregates)\n  One solution is to update Vega to support auto-sizing\n  In the meantime, auto-padding (mostly) does the trick\n */\nfunction box(encoding, stats) {\n  var hasRow = encoding.has(ROW),\n      hasCol = encoding.has(COL),\n      hasX = encoding.has(X),\n      hasY = encoding.has(Y),\n      marktype = encoding.marktype();\n\n  // FIXME/HACK we need to take filter into account\n  var xCardinality = hasX && encoding.isDimension(X) ? encoding.cardinality(X, stats) : 1,\n    yCardinality = hasY && encoding.isDimension(Y) ? encoding.cardinality(Y, stats) : 1;\n\n  var useSmallBand = xCardinality > encoding.config('largeBandMaxCardinality') ||\n    yCardinality > encoding.config('largeBandMaxCardinality');\n\n  var cellWidth, cellHeight, cellPadding = encoding.config('cellPadding');\n\n  // set cellWidth\n  if (hasX) {\n    if (encoding.isOrdinalScale(X)) {\n      // for ordinal, hasCol or not doesn't matter -- we scale based on cardinality\n      cellWidth = (xCardinality + encoding.band(X).padding) * encoding.bandSize(X, useSmallBand);\n    } else {\n      cellWidth = hasCol || hasRow ? encoding.enc(COL).width :  encoding.config(\"singleWidth\");\n    }\n  } else {\n    if (marktype === TEXT) {\n      cellWidth = encoding.config('textCellWidth');\n    } else {\n      cellWidth = encoding.bandSize(X);\n    }\n  }\n\n  // set cellHeight\n  if (hasY) {\n    if (encoding.isOrdinalScale(Y)) {\n      // for ordinal, hasCol or not doesn't matter -- we scale based on cardinality\n      cellHeight = (yCardinality + encoding.band(Y).padding) * encoding.bandSize(Y, useSmallBand);\n    } else {\n      cellHeight = hasCol || hasRow ? encoding.enc(ROW).height :  encoding.config(\"singleHeight\");\n    }\n  } else {\n    cellHeight = encoding.bandSize(Y);\n  }\n\n  // Cell bands use rangeBands(). There are n-1 padding.  Outerpadding = 0 for cells\n\n  var width = cellWidth, height = cellHeight;\n  if (hasCol) {\n    var colCardinality = encoding.cardinality(COL, stats);\n    width = cellWidth * ((1 + cellPadding) * (colCardinality - 1) + 1);\n  }\n  if (hasRow) {\n    var rowCardinality =  encoding.cardinality(ROW, stats);\n    height = cellHeight * ((1 + cellPadding) * (rowCardinality - 1) + 1);\n  }\n\n  return {\n    // width and height of the whole cell\n    cellWidth: cellWidth,\n    cellHeight: cellHeight,\n    cellPadding: cellPadding,\n    // width and height of the chart\n    width: width,\n    height: height,\n    // information about x and y, such as band size\n    x: {useSmallBand: useSmallBand},\n    y: {useSmallBand: useSmallBand}\n  };\n}\n\nfunction getMaxLength(encoding, stats, et) {\n  // FIXME determine constant for Q and T in a nicer way\n  return encoding.isType(et, Q) ? 20 :\n    encoding.isType(et, T) ? 20 :\n    stats[encoding.fieldName(et)].max;\n}\n\nfunction offset(encoding, stats, layout) {\n  [X, Y].forEach(function (x) {\n    var maxLength;\n    if (encoding.isDimension(x) || encoding.isType(x, T)) {\n      maxLength =  getMaxLength(encoding, stats, x);\n    } else if (encoding.aggr(x) === 'count') {\n      //assign default value for count as it won't have stats\n      maxLength =  3;\n    } else if (encoding.isType(x, Q)) {\n      if (x===X) {\n        maxLength = 3;\n      } else { // Y\n        //assume that default formating is always shorter than 7\n        maxLength = Math.min(getMaxLength(encoding, stats, x), 7);\n      }\n    }\n    setter(layout,[x, 'axisTitleOffset'], encoding.config('characterWidth') *  maxLength + 20);\n  });\n  return layout;\n}\n","'use strict';\n\nvar global = require('../globals'),\n  time = require('./time');\n\nvar legend = module.exports = {};\n\nlegend.defs = function(encoding) {\n  var defs = [];\n\n  // TODO: support alpha\n\n  if (encoding.has(COLOR) && encoding.legend(COLOR)) {\n    defs.push(legend.def(COLOR, encoding, {\n      fill: COLOR,\n      orient: 'right'\n    }));\n  }\n\n  if (encoding.has(SIZE) && encoding.legend(SIZE)) {\n    defs.push(legend.def(SIZE, encoding, {\n      size: SIZE,\n      orient: defs.length === 1 ? 'left' : 'right'\n    }));\n  }\n\n  if (encoding.has(SHAPE) && encoding.legend(SHAPE)) {\n    if (defs.length === 2) {\n      // TODO: fix this\n      console.error('Vegalite currently only supports two legends');\n      return defs;\n    }\n    defs.push(legend.def(SHAPE, encoding, {\n      shape: SHAPE,\n      orient: defs.length === 1 ? 'left' : 'right'\n    }));\n  }\n\n  return defs;\n};\n\nlegend.def = function(name, encoding, props) {\n  var def = props, fn;\n\n  def.title = encoding.fieldTitle(name);\n\n  if (encoding.isType(name, T) && (fn = encoding.fn(name)) &&\n    time.hasScale(fn)) {\n    var properties = def.properties = def.properties || {},\n      labels = properties.labels = properties.labels || {},\n      text = labels.text = labels.text || {};\n\n    text.scale = 'time-'+ fn;\n  }\n\n  return def;\n};\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  vlscale = require('./scale');\n\nvar marks = module.exports = {};\n\nmarks.def = function(mark, encoding, layout, style) {\n  var defs = [];\n\n  // to add a background to text, we need to add it before the text\n  if (encoding.marktype() === TEXT && encoding.has(COLOR)) {\n    var bg = {\n      x: {value: 0},\n      y: {value: 0},\n      x2: {value: layout.cellWidth},\n      y2: {value: layout.cellHeight},\n      fill: {scale: COLOR, field: encoding.field(COLOR)}\n    };\n    defs.push({\n      type: 'rect',\n      from: {data: TABLE},\n      properties: {enter: bg, update: bg}\n    });\n  }\n\n  // add the mark def for the main thing\n  var p = mark.prop(encoding, layout, style);\n  defs.push({\n    type: mark.type,\n    from: {data: TABLE},\n    properties: {enter: p, update: p}\n  });\n\n  return defs;\n};\n\nmarks.bar = {\n  type: 'rect',\n  stack: true,\n  prop: bar_props,\n  requiredEncoding: ['x', 'y'],\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, size: 1, color: 1, alpha: 1}\n};\n\nmarks.line = {\n  type: 'line',\n  line: true,\n  prop: line_props,\n  requiredEncoding: ['x', 'y'],\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, color: 1, alpha: 1, detail:1}\n};\n\nmarks.area = {\n  type: 'area',\n  stack: true,\n  line: true,\n  requiredEncoding: ['x', 'y'],\n  prop: area_props,\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, color: 1, alpha: 1}\n};\n\nmarks.tick = {\n  type: 'rect',\n  prop: tick_props,\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, color: 1, alpha: 1, detail: 1}\n};\n\nmarks.circle = {\n  type: 'symbol',\n  prop: filled_point_props('circle'),\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, size: 1, color: 1, alpha: 1, detail: 1}\n};\n\nmarks.square = {\n  type: 'symbol',\n  prop: filled_point_props('square'),\n  supportedEncoding: marks.circle.supportedEncoding\n};\n\nmarks.point = {\n  type: 'symbol',\n  prop: point_props,\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, size: 1, color: 1, alpha: 1, shape: 1, detail: 1}\n};\n\nmarks.text = {\n  type: 'text',\n  prop: text_props,\n  requiredEncoding: ['text'],\n  supportedEncoding: {row: 1, col: 1, size: 1, color: 1, alpha: 1, text: 1}\n};\n\nfunction bar_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.isMeasure(X)) {\n    p.x = {scale: X, field: e.field(X)};\n    if (e.isDimension(Y)) {\n      p.x2 = {scale: X, value: e.scale(X).type === 'log' ? 1 : 0};\n    }\n  } else if (e.has(X)) { // is ordinal\n    p.xc = {scale: X, field: e.field(X)};\n  } else {\n    // TODO add single bar offset\n    p.xc = {value: 0};\n  }\n\n  // y\n  if (e.isMeasure(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n    p.y2 = {scale: Y, value: e.scale(Y).type === 'log' ? 1 : 0};\n  } else if (e.has(Y)) { // is ordinal\n    p.yc = {scale: Y, field: e.field(Y)};\n  } else {\n    // TODO add single bar offset\n    p.yc = {group: 'height'};\n  }\n\n  // width\n  if (!e.has(X) || e.isOrdinalScale(X)) { // no X or X is ordinal\n    if (e.has(SIZE)) {\n      p.width = {scale: SIZE, field: e.field(SIZE)};\n    } else {\n      p.width = {\n        value: e.bandSize(X, layout.x.useSmallBand),\n        offset: -1\n      };\n    }\n  } else { // X is Quant or Time Scale\n    p.width = {value: 2};\n  }\n\n  // height\n  if (!e.has(Y) || e.isOrdinalScale(Y)) { // no Y or Y is ordinal\n    if (e.has(SIZE)) {\n      p.height = {scale: SIZE, field: e.field(SIZE)};\n    } else {\n      p.height = {\n        value: e.bandSize(Y, layout.y.useSmallBand),\n        offset: -1\n      };\n    }\n  } else { // Y is Quant or Time Scale\n    p.height = {value: 2};\n  }\n\n  // fill\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else {\n    p.fill = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  }\n\n  return p;\n}\n\nfunction point_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    p.x = {value: e.bandSize(X, layout.x.useSmallBand) / 2};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {value: e.bandSize(Y, layout.y.useSmallBand) / 2};\n  }\n\n  // size\n  if (e.has(SIZE)) {\n    p.size = {scale: SIZE, field: e.field(SIZE)};\n  } else if (!e.has(SIZE)) {\n    p.size = {value: e.value(SIZE)};\n  }\n\n  // shape\n  if (e.has(SHAPE)) {\n    p.shape = {scale: SHAPE, field: e.field(SHAPE)};\n  } else if (!e.has(SHAPE)) {\n    p.shape = {value: e.value(SHAPE)};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.stroke = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.stroke = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  } else if (!e.has(COLOR)) {\n    p.opacity = {value: style.opacity};\n  }\n\n  p.strokeWidth = {value: e.config('strokeWidth')};\n\n  return p;\n}\n\nfunction line_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    p.x = {value: 0};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {group: 'height'};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.stroke = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.stroke = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  }\n\n  p.strokeWidth = {value: e.config('strokeWidth')};\n\n  return p;\n}\n\nfunction area_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.isMeasure(X)) {\n    p.x = {scale: X, field: e.field(X)};\n    if (e.isDimension(Y)) {\n      p.x2 = {scale: X, value: 0};\n      p.orient = {value: 'horizontal'};\n    }\n  } else if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else {\n    p.x = {value: 0};\n  }\n\n  // y\n  if (e.isMeasure(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n    p.y2 = {scale: Y, value: 0};\n  } else if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else {\n    p.y = {group: 'height'};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.fill = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  }\n\n  return p;\n}\n\nfunction tick_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n    if (e.isDimension(X)) {\n      p.x.offset = -e.bandSize(X, layout.x.useSmallBand) / 3;\n    }\n  } else if (!e.has(X)) {\n    p.x = {value: 0};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n    if (e.isDimension(Y)) {\n      p.y.offset = -e.bandSize(Y, layout.y.useSmallBand) / 3;\n    }\n  } else if (!e.has(Y)) {\n    p.y = {value: 0};\n  }\n\n  // width\n  if (!e.has(X) || e.isDimension(X)) {\n    p.width = {value: e.bandSize(X, layout.y.useSmallBand) / 1.5};\n  } else {\n    p.width = {value: 1};\n  }\n\n  // height\n  if (!e.has(Y) || e.isDimension(Y)) {\n    p.height = {value: e.bandSize(Y, layout.y.useSmallBand) / 1.5};\n  } else {\n    p.height = {value: 1};\n  }\n\n  // fill\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else {\n    p.fill = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  } else if (!e.has(COLOR)) {\n    p.opacity = {value: style.opacity};\n  }\n\n  return p;\n}\n\nfunction filled_point_props(shape) {\n  return function(e, layout, style) {\n    var p = {};\n\n    // x\n    if (e.has(X)) {\n      p.x = {scale: X, field: e.field(X)};\n    } else if (!e.has(X)) {\n      p.x = {value: e.bandSize(X, layout.x.useSmallBand) / 2};\n    }\n\n    // y\n    if (e.has(Y)) {\n      p.y = {scale: Y, field: e.field(Y)};\n    } else if (!e.has(Y)) {\n      p.y = {value: e.bandSize(Y, layout.y.useSmallBand) / 2};\n    }\n\n    // size\n    if (e.has(SIZE)) {\n      p.size = {scale: SIZE, field: e.field(SIZE)};\n    } else if (!e.has(X)) {\n      p.size = {value: e.value(SIZE)};\n    }\n\n    // shape\n    p.shape = {value: shape};\n\n    // fill\n    if (e.has(COLOR)) {\n      p.fill = {scale: COLOR, field: e.field(COLOR)};\n    } else if (!e.has(COLOR)) {\n      p.fill = {value: e.value(COLOR)};\n    }\n\n    // alpha\n    if (e.has(ALPHA)) {\n      p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n    } else if (e.value(ALPHA) !== undefined) {\n      p.opacity = {value: e.value(ALPHA)};\n    } else if (!e.has(COLOR)) {\n      p.opacity = {value: style.opacity};\n    }\n\n    return p;\n  };\n}\n\nfunction text_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    if (e.has(TEXT) && e.isType(TEXT, Q)) {\n      p.x = {value: layout.cellWidth-5};\n    } else {\n      p.x = {value: e.bandSize(X, layout.x.useSmallBand) / 2};\n    }\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {value: e.bandSize(Y, layout.y.useSmallBand) / 2};\n  }\n\n  // size\n  if (e.has(SIZE)) {\n    p.fontSize = {scale: SIZE, field: e.field(SIZE)};\n  } else if (!e.has(SIZE)) {\n    p.fontSize = {value: e.font('size')};\n  }\n\n  // fill\n  // color should be set to background\n  p.fill = {value: 'black'};\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  } else {\n    p.opacity = {value: style.opacity};\n  }\n\n  // text\n  if (e.has(TEXT)) {\n    if (e.isType(TEXT, Q)) {\n      p.text = {template: \"{{\" + e.field(TEXT) + \" | number:'.3s'}}\"};\n      p.align = {value: 'right'};\n    } else {\n      p.text = {field: e.field(TEXT)};\n    }\n  } else {\n    p.text = {value: 'Abc'};\n  }\n\n  p.font = {value: e.font('family')};\n  p.fontWeight = {value: e.font('weight')};\n  p.fontStyle = {value: e.font('style')};\n  p.baseline = {value: e.text('baseline')};\n\n  return p;\n}\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  time = require('./time');\n\nvar scale = module.exports = {};\n\nscale.names = function(props) {\n  return util.keys(util.keys(props).reduce(function(a, x) {\n    if (props[x] && props[x].scale) a[props[x].scale] = 1;\n    return a;\n  }, {}));\n};\n\nscale.defs = function(names, encoding, layout, style, sorting, opt) {\n  opt = opt || {};\n\n  return names.reduce(function(a, name) {\n    var s = {\n      name: name,\n      type: scale.type(name, encoding),\n      domain: scale_domain(name, encoding, sorting, opt)\n    };\n    if (s.type === 'ordinal' && !encoding.bin(name) && encoding.sort(name).length === 0) {\n      s.sort = true;\n    }\n\n    scale_range(s, encoding, layout, style, opt);\n\n    return (a.push(s), a);\n  }, []);\n};\n\nscale.type = function(name, encoding) {\n\n  switch (encoding.type(name)) {\n    case O: return 'ordinal';\n    case T:\n      var fn = encoding.fn(name);\n      return (fn && time.scale.type(fn, name)) || 'time';\n    case Q:\n      if (encoding.bin(name)) {\n        return name === COLOR ? 'linear' : 'ordinal';\n      }\n      return encoding.scale(name).type;\n  }\n};\n\nfunction scale_domain(name, encoding, sorting, opt) {\n  if (encoding.isType(name, T)) {\n    var range = time.scale.domain(encoding.fn(name), name);\n    if(range) return range;\n  }\n\n  if (encoding.bin(name)) {\n    // TODO: add includeEmptyConfig here\n    if (opt.stats) {\n      var bins = util.getbins(opt.stats[encoding.fieldName(name)], encoding.bin(name).maxbins);\n      var domain = util.range(bins.start, bins.stop, bins.step);\n      return name === Y ? domain.reverse() : domain;\n    }\n  }\n\n  return name == opt.stack ?\n    {\n      data: STACKED,\n      field: 'data.' + (opt.facet ? 'max_' : '') + 'sum_' + encoding.field(name, true)\n    } :\n    {data: sorting.getDataset(name), field: encoding.field(name)};\n}\n\nfunction scale_range(s, encoding, layout, style, opt) {\n  var spec = encoding.scale(s.name);\n  switch (s.name) {\n    case X:\n      if (s.type === 'ordinal') {\n        s.bandWidth = encoding.bandSize(X, layout.x.useSmallBand);\n      } else {\n        s.range = layout.cellWidth ? [0, layout.cellWidth] : 'width';\n\n        if (encoding.isType(s.name,T) && encoding.fn(s.name) === 'year') {\n          s.zero = false;\n        } else {\n          s.zero = spec.zero === undefined ? true : spec.zero;\n        }\n\n        s.reverse = spec.reverse;\n      }\n      s.round = true;\n      if (s.type === 'time') {\n        s.nice = encoding.fn(s.name);\n      }else {\n        s.nice = true;\n      }\n      break;\n    case Y:\n      if (s.type === 'ordinal') {\n        s.bandWidth = encoding.bandSize(Y, layout.y.useSmallBand);\n      } else {\n        s.range = layout.cellHeight ? [layout.cellHeight, 0] : 'height';\n\n        if (encoding.isType(s.name,T) && encoding.fn(s.name) === 'year') {\n          s.zero = false;\n        } else {\n          s.zero = spec.zero === undefined ? true : spec.zero;\n        }\n\n        s.reverse = spec.reverse;\n      }\n\n      s.round = true;\n\n      if (s.type === 'time') {\n        s.nice = encoding.fn(s.name) || encoding.config('timeScaleNice');\n      }else {\n        s.nice = true;\n      }\n      break;\n    case ROW: // support only ordinal\n      s.bandWidth = layout.cellHeight;\n      s.round = true;\n      s.nice = true;\n      break;\n    case COL: // support only ordinal\n      s.bandWidth = layout.cellWidth;\n      s.round = true;\n      s.nice = true;\n      break;\n    case SIZE:\n      if (encoding.is('bar')) {\n        // FIXME this is definitely incorrect\n        // but let's fix it later since bar size is a bad encoding anyway\n        s.range = [3, Math.max(encoding.bandSize(X), encoding.bandSize(Y))];\n      } else if (encoding.is(TEXT)) {\n        s.range = [8, 40];\n      } else { //point\n        var bandSize = Math.min(encoding.bandSize(X), encoding.bandSize(Y)) - 1;\n        s.range = [10, 0.8 * bandSize*bandSize];\n      }\n      s.round = true;\n      s.zero = false;\n      break;\n    case SHAPE:\n      s.range = 'shapes';\n      break;\n    case COLOR:\n      var range = encoding.scale(COLOR).range;\n      if (range === undefined) {\n        if (s.type === 'ordinal') {\n          // FIXME\n          range = style.colorRange;\n        } else {\n          range = ['#A9DB9F', '#0D5C21'];\n          s.zero = false;\n        }\n      }\n      s.range = range;\n      break;\n    case ALPHA:\n      s.range = [0.2, 1.0];\n      break;\n    default:\n      throw new Error('Unknown encoding name: '+ s.name);\n  }\n\n  switch (s.name) {\n    case ROW:\n    case COL:\n      s.padding = encoding.config('cellPadding');\n      s.outerPadding = 0;\n      break;\n    case X:\n    case Y:\n      if (s.type === 'ordinal') { //&& !s.bandWidth\n        s.points = true;\n        s.padding = encoding.band(s.name).padding;\n      }\n  }\n}\n","'use strict';\n\nvar globals = require('../globals');\n\nmodule.exports = addSortTransforms;\n\n// adds new transforms that produce sorted fields\nfunction addSortTransforms(spec, encoding, stats, opt) {\n  var datasetMapping = {};\n  var counter = 0;\n\n  encoding.forEach(function(field, encType) {\n    var sortBy = encoding.sort(encType, stats);\n    if (sortBy.length > 0) {\n      var fields = sortBy.map(function(d) {\n        return {\n          op: d.aggr,\n          field: 'data.' + d.name\n        };\n      });\n\n      var byClause = sortBy.map(function(d) {\n        var reverse = (d.reverse ? '-' : '');\n        return reverse + 'data.' + (d.aggr==='count' ? 'count' : (d.aggr + '_' + d.name));\n      });\n\n      var dataName = 'sorted' + counter++;\n\n      var transforms = [\n        {\n          type: 'aggregate',\n          groupby: ['data.' + field.name],\n          fields: fields\n        },\n        {\n          type: 'sort',\n          by: byClause\n        }\n      ];\n\n      spec.data.push({\n        name: dataName,\n        source: RAW,\n        transform: transforms\n      });\n\n      datasetMapping[encType] = dataName;\n    }\n  });\n\n  return {\n    spec: spec,\n    getDataset: function(encType) {\n      var data = datasetMapping[encType];\n      if (!data) {\n        return TABLE;\n      }\n      return data;\n    }\n  };\n}\n","\"use strict\";\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  marks = require('./marks');\n\nmodule.exports = stacking;\n\nfunction stacking(spec, encoding, mdef, facets) {\n  if (!marks[encoding.marktype()].stack) return false;\n\n  // TODO: add || encoding.has(LOD) here once LOD is implemented\n  if (!encoding.has(COLOR)) return false;\n\n  var dim=null, val=null, idx =null,\n    isXMeasure = encoding.isMeasure(X),\n    isYMeasure = encoding.isMeasure(Y);\n\n  if (isXMeasure && !isYMeasure) {\n    dim = Y;\n    val = X;\n    idx = 0;\n  } else if (isYMeasure && !isXMeasure) {\n    dim = X;\n    val = Y;\n    idx = 1;\n  } else {\n    return null; // no stack encoding\n  }\n\n  // add transform to compute sums for scale\n  var stacked = {\n    name: STACKED,\n    source: TABLE,\n    transform: [{\n      type: 'aggregate',\n      groupby: [encoding.field(dim)].concat(facets), // dim and other facets\n      fields: [{op: 'sum', field: encoding.field(val)}] // TODO check if field with aggr is correct?\n    }]\n  };\n\n  if (facets && facets.length > 0) {\n    stacked.transform.push({ //calculate max for each facet\n      type: 'aggregate',\n      groupby: facets,\n      fields: [{op: 'max', field: 'data.sum_' + encoding.field(val, true)}]\n    });\n  }\n\n  spec.data.push(stacked);\n\n  // add stack transform to mark\n  mdef.from.transform = [{\n    type: 'stack',\n    point: encoding.field(dim),\n    height: encoding.field(val),\n    output: {y1: val, y0: val + '2'}\n  }];\n\n  // TODO: This is super hack-ish -- consolidate into modular mark properties?\n  mdef.properties.update[val] = mdef.properties.enter[val] = {scale: val, field: val};\n  mdef.properties.update[val + '2'] = mdef.properties.enter[val + '2'] = {scale: val, field: val + '2'};\n\n  return val; //return stack encoding\n}\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  vlfield = require('../field'),\n  Encoding = require('../Encoding');\n\nmodule.exports = function(encoding, stats) {\n  return {\n    opacity: estimateOpacity(encoding, stats),\n    colorRange: colorRange(encoding, stats)\n  };\n};\n\nfunction colorRange(encoding, stats){\n  if (encoding.has(COLOR) && encoding.isDimension(COLOR)) {\n    var cardinality = encoding.cardinality(COLOR, stats);\n    if (cardinality <= 10) {\n      return \"category10\";\n    } else {\n      return \"category20\";\n    }\n    // TODO can vega interpolate range for ordinal scale?\n  }\n  return null;\n}\n\nfunction estimateOpacity(encoding,stats) {\n  if (!stats) {\n    return 1;\n  }\n\n  var numPoints = 0;\n\n  if (encoding.isAggregate()) { // aggregate plot\n    numPoints = 1;\n\n    //  get number of points in each \"cell\"\n    //  by calculating product of cardinality\n    //  for each non faceting and non-ordinal X / Y fields\n    //  note that ordinal x,y are not include since we can\n    //  consider that ordinal x are subdividing the cell into subcells anyway\n    encoding.forEach(function(field, encType) {\n\n      if (encType !== ROW && encType !== COL &&\n          !((encType === X || encType === Y) &&\n          vlfield.isOrdinalScale(field, true))\n        ) {\n        numPoints *= encoding.cardinality(encType, stats);\n      }\n    });\n\n  } else { // raw plot\n    numPoints = stats.count;\n\n    // small multiples divide number of points\n    var numMultiples = 1;\n    if (encoding.has(ROW)) {\n      numMultiples *= encoding.cardinality(ROW, stats);\n    }\n    if (encoding.has(COL)) {\n      numMultiples *= encoding.cardinality(COL, stats);\n    }\n    numPoints /= numMultiples;\n  }\n\n  var opacity = 0;\n  if (numPoints < 20) {\n    opacity = 1;\n  } else if (numPoints < 200) {\n    opacity = 0.7;\n  } else if (numPoints < 1000 || encoding.is('tick')) {\n    opacity = 0.6;\n  } else {\n    opacity = 0.3;\n  }\n\n  return opacity;\n}\n\n","'use strict';\n\nvar global = require('../globals');\n\nvar groupdef = require('./group').def;\n\nmodule.exports = subfaceting;\n\nfunction subfaceting(group, mdef, details, stack, encoding) {\n  var m = group.marks,\n    g = groupdef('subfacet', {marks: m});\n\n  group.marks = [g];\n  g.from = mdef.from;\n  delete mdef.from;\n\n  //TODO test LOD -- we should support stack / line without color (LOD) field\n  var trans = (g.from.transform || (g.from.transform = []));\n  trans.unshift({type: 'facet', keys: details});\n\n  if (stack && encoding.has(COLOR)) {\n    trans.unshift({type: 'sort', by: encoding.field(COLOR)});\n  }\n}\n","'use strict';\n\nvar globals = require('../globals');\n\nvar groupdef = require('./group').def,\n  vldata = require('../data');\n\nmodule.exports = template;\n\nfunction template(encoding, layout, stats) { //hack use stats\n\n  var data = {name: RAW, format: {type: encoding.data('formatType')}},\n    table = {name: TABLE, source: RAW},\n    dataUrl = vldata.getUrl(encoding, stats);\n  if (dataUrl) data.url = dataUrl;\n\n  var preaggregatedData = !!encoding.data('vegaServer');\n\n  encoding.forEach(function(field, encType) {\n    var name;\n    if (field.type == T) {\n      data.format.parse = data.format.parse || {};\n      data.format.parse[field.name] = 'date';\n    } else if (field.type == Q) {\n      data.format.parse = data.format.parse || {};\n      if (field.aggr === 'count') {\n        name = 'count';\n      } else if (preaggregatedData && field.bin) {\n        name = 'bin_' + field.name;\n      } else if (preaggregatedData && field.aggr) {\n        name = field.aggr + '_' + field.name;\n      } else {\n        name = field.name;\n      }\n      data.format.parse[name] = 'number';\n    }\n  });\n\n  return {\n    width: layout.width,\n    height: layout.height,\n    padding: 'auto',\n    data: [data, table],\n    marks: [groupdef('cell', {\n      width: layout.cellWidth ? {value: layout.cellWidth} : undefined,\n      height: layout.cellHeight ? {value: layout.cellHeight} : undefined\n    })]\n  };\n}\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util');\n\nmodule.exports = time;\n\nfunction time(spec, encoding, opt) {\n  var timeFields = {}, timeFn = {};\n\n  // find unique formula transformation and bin function\n  encoding.forEach(function(field, encType) {\n    if (field.type === T && field.fn) {\n      timeFields[encoding.field(encType)] = {\n        field: field,\n        encType: encType\n      };\n      timeFn[field.fn] = true;\n    }\n  });\n\n  // add formula transform\n  var data = spec.data[1],\n    transform = data.transform = data.transform || [];\n\n  for (var f in timeFields) {\n    var tf = timeFields[f];\n    time.transform(transform, encoding, tf.encType, tf.field);\n  }\n\n  // add scales\n  var scales = spec.scales = spec.scales || [];\n  for (var fn in timeFn) {\n    time.scale(scales, fn, encoding);\n  }\n  return spec;\n}\n\ntime.cardinality = function(field, stats, filterNull, type) {\n  var fn = field.fn;\n  switch (fn) {\n    case 'seconds': return 60;\n    case 'minutes': return 60;\n    case 'hours': return 24;\n    case 'day': return 7;\n    case 'date': return 31;\n    case 'month': return 12;\n    case 'year':\n      var stat = stats[field.name],\n        yearstat = stats['year_'+field.name];\n\n      if (!yearstat) { return null; }\n\n      return yearstat.distinct -\n        (stat.nulls > 0 && filterNull[type] ? 1 : 0);\n  }\n\n  return null;\n};\n\nfunction fieldFn(func, field) {\n  return 'utc' + func + '(d.data.'+ field.name +')';\n}\n\n/**\n * @return {String} date binning formula of the given field\n */\ntime.formula = function(field) {\n  return fieldFn(field.fn, field);\n};\n\n/** add formula transforms to data */\ntime.transform = function(transform, encoding, encType, field) {\n  transform.push({\n    type: 'formula',\n    field: encoding.field(encType),\n    expr: time.formula(field)\n  });\n};\n\n/** append custom time scales for axis label */\ntime.scale = function(scales, fn, encoding) {\n  var labelLength = encoding.config('timeScaleLabelLength');\n  // TODO add option for shorter scale / custom range\n  switch (fn) {\n    case 'day':\n      scales.push({\n        name: 'time-'+fn,\n        type: 'ordinal',\n        domain: util.range(0, 7),\n        range: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'].map(\n          function(s) { return s.substr(0, labelLength);}\n        )\n      });\n      break;\n    case 'month':\n      scales.push({\n        name: 'time-'+fn,\n        type: 'ordinal',\n        domain: util.range(0, 12),\n        range: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'].map(\n            function(s) { return s.substr(0, labelLength);}\n          )\n      });\n      break;\n  }\n};\n\ntime.isOrdinalFn = function(fn) {\n  switch (fn) {\n    case 'seconds':\n    case 'minutes':\n    case 'hours':\n    case 'day':\n    case 'date':\n    case 'month':\n      return true;\n  }\n  return false;\n};\n\ntime.scale.type = function(fn, name) {\n  if (name === COLOR) {\n    return 'linear'; // this has order\n  }\n\n  return time.isOrdinalFn(fn) || name === COL || name === ROW ? 'ordinal' : 'linear';\n};\n\ntime.scale.domain = function(fn, name) {\n  var isColor = name === COLOR;\n  switch (fn) {\n    case 'seconds':\n    case 'minutes': return isColor ? [0,59] : util.range(0, 60);\n    case 'hours': return isColor ? [0,23] : util.range(0, 24);\n    case 'day': return isColor ? [0,6] : util.range(0, 7);\n    case 'date': return isColor ? [1,31] : util.range(1, 32);\n    case 'month': return isColor ? [0,11] : util.range(0, 12);\n  }\n  return null;\n};\n\n/** whether a particular time function has custom scale for labels implemented in time.scale */\ntime.hasScale = function(fn) {\n  switch (fn) {\n    case 'day':\n    case 'month':\n      return true;\n  }\n  return false;\n};\n\n\n","'use strict';\n\nvar globals = require('./globals');\n\nvar consts = module.exports = {};\n\nconsts.encodingTypes = [X, Y, ROW, COL, SIZE, SHAPE, COLOR, ALPHA, TEXT, DETAIL];\n\nconsts.dataTypes = {'O': O, 'Q': Q, 'T': T};\n\nconsts.dataTypeNames = ['O', 'Q', 'T'].reduce(function(r, x) {\n  r[consts.dataTypes[x]] = x;\n  return r;\n},{});\n\nconsts.shorthand = {\n  delim:  '|',\n  assign: '=',\n  type:   ',',\n  func:   '_'\n};\n","'use strict';\n\nvar vldata = module.exports = {},\n  vlfield = require('./field'),\n  util = require('./util');\n\nvldata.getUrl = function getDataUrl(encoding, stats) {\n  if (!encoding.data('vegaServer')) {\n    // don't use vega server\n    return encoding.data('url');\n  }\n\n  if (encoding.length() === 0) {\n    // no fields\n    return;\n  }\n\n  var fields = [];\n  encoding.forEach(function(field, encType) {\n    var obj = {\n      name: encoding.field(encType, true),\n      field: field.name\n    };\n    if (field.aggr) {\n      obj.aggr = field.aggr;\n    }\n    if (field.bin) {\n      obj.binSize = util.getbins(stats[field.name], encoding.bin(encType).maxbins).step;\n    }\n    fields.push(obj);\n  });\n\n  var query = {\n    table: encoding.data('vegaServer').table,\n    fields: fields\n  };\n\n  return encoding.data('vegaServer').url + '/query/?q=' + JSON.stringify(query);\n};\n\n/** Mapping from datalib's inferred type to vegalite's type */\nvldata.types = {\n  'boolean': 'O',\n  'number': 'Q',\n  'integer': 'Q',\n  'date': 'T',\n  'string': 'O'\n};\n\n","// utility for enc\n\n'use strict';\n\nvar consts = require('./consts'),\n  c = consts.shorthand,\n  time = require('./compile/time'),\n  vlfield = require('./field'),\n  util = require('./util'),\n  schema = require('./schema/schema'),\n  encTypes = schema.encTypes;\n\nvar vlenc = module.exports = {};\n\nvlenc.countRetinal = function(enc) {\n  var count = 0;\n  if (enc.color) count++;\n  if (enc.alpha) count++;\n  if (enc.size) count++;\n  if (enc.shape) count++;\n  return count;\n};\n\nvlenc.has = function(enc, encType) {\n  var fieldDef = enc && enc[encType];\n  return fieldDef && fieldDef.name;\n};\n\nvlenc.isAggregate = function(enc) {\n  for (var k in enc) {\n    if (vlenc.has(enc, k) && enc[k].aggr) {\n      return true;\n    }\n  }\n  return false;\n};\n\nvlenc.forEach = function(enc, f) {\n  var i = 0;\n  encTypes.forEach(function(k) {\n    if (vlenc.has(enc, k)) {\n      f(enc[k], k, i++);\n    }\n  });\n};\n\nvlenc.map = function(enc, f) {\n  var arr = [];\n  encTypes.forEach(function(k) {\n    if (vlenc.has(enc, k)) {\n      arr.push(f(enc[k], k, enc));\n    }\n  });\n  return arr;\n};\n\nvlenc.reduce = function(enc, f, init) {\n  var r = init, i = 0, k;\n  encTypes.forEach(function(k) {\n    if (vlenc.has(enc, k)) {\n      r = f(r, enc[k], k,  enc);\n    }\n  });\n  return r;\n};\n\n/*\n * return key-value pairs of field name and list of fields of that field name\n */\nvlenc.fields = function(enc) {\n  return vlenc.reduce(enc, function (m, field, encType) {\n    var fieldList = m[field.name] = m[field.name] || [],\n      containsType = fieldList.containsType = fieldList.containsType || {};\n\n    if (fieldList.indexOf(field) === -1) {\n      fieldList.push(field);\n      // augment the array with containsType.Q / O / T\n      containsType[field.type] = true;\n    }\n    return m;\n  }, {});\n};\n\nvlenc.shorthand = function(enc) {\n  return vlenc.map(enc, function(field, et) {\n    return et + c.assign + vlfield.shorthand(field);\n  }).join(c.delim);\n};\n\nvlenc.fromShorthand = function(shorthand, convertType) {\n  var enc = util.isArray(shorthand) ? shorthand : shorthand.split(c.delim);\n  return enc.reduce(function(m, e) {\n    var split = e.split(c.assign),\n        enctype = split[0].trim(),\n        field = split[1];\n\n    m[enctype] = vlfield.fromShorthand(field, convertType);\n    return m;\n  }, {});\n};","'use strict';\n\n// utility for field\n\nvar consts = require('./consts'),\n  c = consts.shorthand,\n  time = require('./compile/time'),\n  util = require('./util'),\n  schema = require('./schema/schema');\n\nvar vlfield = module.exports = {};\n\nvlfield.shorthand = function(f) {\n  var c = consts.shorthand;\n  return (f.aggr ? f.aggr + c.func : '') +\n    (f.fn ? f.fn + c.func : '') +\n    (f.bin ? 'bin' + c.func : '') +\n    (f.name || '') + c.type +\n    (consts.dataTypeNames[f.type] || f.type);\n};\n\nvlfield.shorthands = function(fields, delim) {\n  delim = delim || c.delim;\n  return fields.map(vlfield.shorthand).join(delim);\n};\n\nvlfield.fromShorthand = function(shorthand, convertType) {\n  var split = shorthand.split(c.type), i;\n  var o = {\n    name: split[0].trim(),\n    type: convertType ? consts.dataTypes[split[1].trim()] : split[1].trim()\n  };\n\n  // check aggregate type\n  for (i in schema.aggr.enum) {\n    var a = schema.aggr.enum[i];\n    if (o.name.indexOf(a + '_') === 0) {\n      o.name = o.name.substr(a.length + 1);\n      if (a == 'count' && o.name.length === 0) o.name = '*';\n      o.aggr = a;\n      break;\n    }\n  }\n\n  // check time fn\n  for (i in schema.timefns) {\n    var f = schema.timefns[i];\n    if (o.name && o.name.indexOf(f + '_') === 0) {\n      o.name = o.name.substr(o.length + 1);\n      o.fn = f;\n      break;\n    }\n  }\n\n  // check bin\n  if (o.name && o.name.indexOf('bin_') === 0) {\n    o.name = o.name.substr(4);\n    o.bin = true;\n  }\n\n  return o;\n};\n\nvar typeOrder = {\n  O: 0,\n  G: 1,\n  T: 2,\n  Q: 3\n};\n\nvlfield.order = {};\n\nvlfield.order.type = function(field) {\n  if (field.aggr==='count') return 4;\n  return typeOrder[field.type];\n};\n\nvlfield.order.typeThenName = function(field) {\n  return vlfield.order.type(field) + '_' + field.name.toLowerCase();\n};\n\nvlfield.order.original = function() {\n  return 0; // no swap will occur\n};\n\nvlfield.order.name = function(field) {\n  return field.name;\n};\n\nvlfield.order.typeThenCardinality = function(field, stats){\n  return stats[field.name].distinct;\n};\n\n// FIXME refactor\nvlfield.isType = function (fieldDef, type) {\n  return (fieldDef.type & type) > 0;\n};\n\nvlfield.isType.byCode = vlfield.isType;\n\nvlfield.isType.byName = function (field, type) {\n  return field.type === consts.dataTypeNames[type];\n};\n\n\nfunction getIsType(useTypeCode) {\n  return useTypeCode ? vlfield.isType.byCode : vlfield.isType.byName;\n}\n\nvlfield.isType.get = getIsType; //FIXME\n\n/*\n * Most fields that use ordinal scale are dimensions.\n * However, YEAR(T), YEARMONTH(T) use time scale, not ordinal but are dimensions too.\n */\nvlfield.isOrdinalScale = function(field, useTypeCode /*optional*/) {\n  var isType = getIsType(useTypeCode);\n  return  isType(field, O) || field.bin ||\n    ( isType(field, T) && field.fn && time.isOrdinalFn(field.fn) );\n};\n\nfunction isDimension(field, useTypeCode /*optional*/) {\n  var isType = getIsType(useTypeCode);\n  return  isType(field, O) || !!field.bin ||\n    ( isType(field, T) && !!field.fn );\n}\n\n/**\n * For encoding, use encoding.isDimension() to avoid confusion.\n * Or use Encoding.isType if your field is from Encoding (and thus have numeric data type).\n * otherwise, do not specific isType so we can use the default isTypeName here.\n */\nvlfield.isDimension = function(field, useTypeCode /*optional*/) {\n  return field && isDimension(field, useTypeCode);\n};\n\nvlfield.isMeasure = function(field, useTypeCode) {\n  return field && !isDimension(field, useTypeCode);\n};\n\nvlfield.role = function(field) {\n  return isDimension(field) ? 'dimension' : 'measure';\n};\n\nvlfield.count = function() {\n  return {name:'*', aggr: 'count', type:'Q', displayName: vlfield.count.displayName};\n};\n\nvlfield.count.displayName = 'Number of Records';\n\nvlfield.isCount = function(field) {\n  return field.aggr === 'count';\n};\n\n/**\n * For encoding, use encoding.cardinality() to avoid confusion.  Or use Encoding.isType if your field is from Encoding (and thus have numeric data type).\n * otherwise, do not specific isType so we can use the default isTypeName here.\n */\nvlfield.cardinality = function(field, stats, filterNull, useTypeCode) {\n  // FIXME need to take filter into account\n\n  var stat = stats[field.name];\n  var isType = getIsType(useTypeCode),\n    type = useTypeCode ? consts.dataTypeNames[field.type] : field.type;\n\n  filterNull = filterNull || {};\n\n  if (field.bin) {\n    var bins = util.getbins(stat, field.bin.maxbins || schema.MAXBINS_DEFAULT);\n    return (bins.stop - bins.start) / bins.step;\n  }\n  if (isType(field, T)) {\n    var cardinality = time.cardinality(field, stats, filterNull, type);\n    if(cardinality !== null) return cardinality;\n    //otherwise use calculation below\n  }\n  if (field.aggr) {\n    return 1;\n  }\n\n  // remove null\n  return stat.distinct -\n    (stat.nulls > 0 && filterNull[type] ? 1 : 0);\n};\n","'use strict';\n\n// declare global constant\nvar g = global || window;\n\ng.TABLE = 'table';\ng.RAW = 'raw';\ng.STACKED = 'stacked';\ng.INDEX = 'index';\n\ng.X = 'x';\ng.Y = 'y';\ng.ROW = 'row';\ng.COL = 'col';\ng.SIZE = 'size';\ng.SHAPE = 'shape';\ng.COLOR = 'color';\ng.ALPHA = 'alpha';\ng.TEXT = 'text';\ng.DETAIL = 'detail';\n\ng.O = 1;\ng.Q = 2;\ng.T = 4;\n","// Package of defining Vegalite Specification's json schema\n\"use strict\";\n\nvar schema = module.exports = {},\n  util = require('../util');\n\nschema.util = require('./schemautil');\n\nschema.marktype = {\n  type: 'string',\n  enum: ['point', 'tick', 'bar', 'line', 'area', 'circle', 'square', 'text']\n};\n\nschema.aggr = {\n  type: 'string',\n  enum: ['avg', 'sum', 'min', 'max', 'count'],\n  supportedEnums: {\n    Q: ['avg', 'sum', 'min', 'max', 'count'],\n    O: [],\n    T: ['avg', 'min', 'max'],\n    '': ['count']\n  },\n  supportedTypes: {'Q': true, 'O': true, 'T': true, '': true}\n};\nschema.band = {\n  type: 'object',\n  properties: {\n    size: {\n      type: 'integer',\n      minimum: 0\n    },\n    padding: {\n      type: 'integer',\n      minimum: 0,\n      default: 1\n    }\n  }\n};\n\nschema.getSupportedRole = function(encType) {\n  return schema.schema.properties.enc.properties[encType].supportedRole;\n};\n\nschema.timefns = ['year', 'month', 'day', 'date', 'hours', 'minutes', 'seconds'];\n\nschema.defaultTimeFn = 'month';\n\nschema.fn = {\n  type: 'string',\n  enum: schema.timefns,\n  supportedTypes: {'T': true}\n};\n\n//TODO(kanitw): add other type of function here\n\nschema.scale_type = {\n  type: 'string',\n  enum: ['linear', 'log', 'pow', 'sqrt', 'quantile'],\n  default: 'linear',\n  supportedTypes: {'Q': true}\n};\n\nschema.field = {\n  type: 'object',\n  properties: {\n    name: {\n      type: 'string'\n    }\n  }\n};\n\nvar clone = util.duplicate;\nvar merge = schema.util.merge;\n\nschema.MAXBINS_DEFAULT = 15;\n\nvar bin = {\n  type: ['boolean', 'object'],\n  default: false,\n  properties: {\n    maxbins: {\n      type: 'integer',\n      default: schema.MAXBINS_DEFAULT,\n      minimum: 2\n    }\n  },\n  supportedTypes: {'Q': true} // TODO: add 'O' after finishing #81\n};\n\nvar typicalField = merge(clone(schema.field), {\n  type: 'object',\n  properties: {\n    type: {\n      type: 'string',\n      enum: ['O', 'Q', 'T']\n    },\n    aggr: schema.aggr,\n    fn: schema.fn,\n    bin: bin,\n    scale: {\n      type: 'object',\n      properties: {\n        type: schema.scale_type,\n        reverse: {\n          type: 'boolean',\n          default: false,\n          supportedTypes: {'Q': true, 'T': true}\n        },\n        zero: {\n          type: 'boolean',\n          description: 'Include zero',\n          default: true,\n          supportedTypes: {'Q': true, 'T': true}\n        },\n        nice: {\n          type: 'string',\n          enum: ['second', 'minute', 'hour', 'day', 'week', 'month', 'year'],\n          supportedTypes: {'T': true}\n        }\n      }\n    }\n  }\n});\n\nvar onlyOrdinalField = merge(clone(schema.field), {\n  type: 'object',\n  supportedRole: {\n    dimension: true\n  },\n  properties: {\n    type: {\n      type: 'string',\n      enum: ['O','Q', 'T'] // ordinal-only field supports Q when bin is applied and T when fn is applied.\n    },\n    fn: schema.fn,\n    bin: bin,\n    aggr: {\n      type: 'string',\n      enum: ['count'],\n      supportedTypes: {'O': true}\n    }\n  }\n});\n\nvar axisMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true},\n  properties: {\n    axis: {\n      type: 'object',\n      properties: {\n        grid: {\n          type: 'boolean',\n          default: true,\n          description: 'A flag indicate if gridlines should be created in addition to ticks.'\n        },\n        title: {\n          type: 'boolean',\n          default: true,\n          description: 'A title for the axis.'\n        },\n        titleOffset: {\n          type: 'integer',\n          default: undefined,  // auto\n          description: 'A title offset value for the axis.'\n        },\n        format: {\n          type: 'string',\n          default: undefined,  // auto\n          description: 'The formatting pattern for axis labels.'\n        },\n        maxLabelLength: {\n          type: 'integer',\n          default: 25,\n          minimum: 0,\n          description: 'Truncate labels that are too long.'\n        }\n      }\n    }\n  }\n};\n\nvar sortMixin = {\n  type: 'object',\n  properties: {\n    sort: {\n      type: 'array',\n      default: [],\n      items: {\n        type: 'object',\n        supportedTypes: {'O': true},\n        required: ['name', 'aggr'],\n        name: {\n          type: 'string'\n        },\n        aggr: {\n          type: 'string',\n          enum: ['avg', 'sum', 'min', 'max', 'count']\n        },\n        reverse: {\n          type: 'boolean',\n          default: false\n        }\n      }\n    }\n  }\n};\n\nvar bandMixin = {\n  type: 'object',\n  properties: {\n    band: schema.band\n  }\n};\n\nvar legendMixin = {\n  type: 'object',\n  properties: {\n    legend: {\n      type: 'boolean',\n      default: true\n    }\n  }\n};\n\nvar textMixin = {\n  type: 'object',\n  supportedMarktypes: {'text': true},\n  properties: {\n    text: {\n      type: 'object',\n      properties: {\n        align: {\n          type: 'string',\n          default: 'left'\n        },\n        baseline: {\n          type: 'string',\n          default: 'middle'\n        },\n        margin: {\n          type: 'integer',\n          default: 4,\n          minimum: 0\n        }\n      }\n    },\n    font: {\n      type: 'object',\n      properties: {\n        weight: {\n          type: 'string',\n          enum: ['normal', 'bold'],\n          default: 'normal'\n        },\n        size: {\n          type: 'integer',\n          default: 10,\n          minimum: 0\n        },\n        family: {\n          type: 'string',\n          default: 'Helvetica Neue'\n        },\n        style: {\n          type: 'string',\n          default: 'normal',\n          enum: ['normal', 'italic']\n        }\n      }\n    }\n  }\n};\n\nvar sizeMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, bar: true, circle: true, square: true, text: true},\n  properties: {\n    value: {\n      type: 'integer',\n      default: 30,\n      minimum: 0\n    }\n  }\n};\n\nvar colorMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true, 'text': true},\n  properties: {\n    value: {\n      type: 'string',\n      role: 'color',\n      default: 'steelblue'\n    },\n    scale: {\n      type: 'object',\n      properties: {\n        range: {\n          type: ['string', 'array']\n        }\n      }\n    }\n  }\n};\n\nvar alphaMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true, 'text': true},\n  properties: {\n    value: {\n      type: 'number',\n      default: undefined,  // auto\n      minimum: 0,\n      maximum: 1\n    }\n  }\n};\n\nvar shapeMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, circle: true, square: true},\n  properties: {\n    value: {\n      type: 'string',\n      enum: ['circle', 'square', 'cross', 'diamond', 'triangle-up', 'triangle-down'],\n      default: 'circle'\n    }\n  }\n};\n\nvar detailMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, line: true, circle: true, square: true}\n};\n\nvar rowMixin = {\n  properties: {\n    height: {\n      type: 'number',\n      minimum: 0,\n      default: 150\n    },\n    grid: {\n      type: 'boolean',\n      default: true,\n      description: 'A flag indicate if gridlines should be created in addition to ticks.'\n    },\n  }\n};\n\nvar colMixin = {\n  properties: {\n    width: {\n      type: 'number',\n      minimum: 0,\n      default: 150\n    },\n    axis: {\n      properties: {\n        maxLabelLength: {\n          type: 'integer',\n          default: 12,\n          minimum: 0,\n          description: 'Truncate labels that are too long.'\n        }\n      }\n    }\n  }\n};\n\nvar facetMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true, text: true},\n  properties: {\n    padding: {\n      type: 'number',\n      minimum: 0,\n      maximum: 1,\n      default: 0.1\n    }\n  }\n};\n\nvar requiredNameType = {\n  required: ['name', 'type']\n};\n\nvar multiRoleField = merge(clone(typicalField), {\n  supportedRole: {\n    measure: true,\n    dimension: true\n  }\n});\n\nvar quantitativeField = merge(clone(typicalField), {\n  supportedRole: {\n    measure: true,\n    dimension: 'ordinal-only' // using alpha / size to encoding category lead to order interpretation\n  }\n});\n\nvar onlyQuantitativeField = merge(clone(typicalField), {\n  supportedRole: {\n    measure: true\n  }\n});\n\nvar x = merge(clone(multiRoleField), axisMixin, bandMixin, requiredNameType, sortMixin);\nvar y = clone(x);\n\nvar facet = merge(clone(onlyOrdinalField), requiredNameType, facetMixin, sortMixin);\nvar row = merge(clone(facet), axisMixin, rowMixin);\nvar col = merge(clone(facet), axisMixin, colMixin);\n\nvar size = merge(clone(quantitativeField), legendMixin, sizeMixin, sortMixin);\nvar color = merge(clone(multiRoleField), legendMixin, colorMixin, sortMixin);\nvar alpha = merge(clone(quantitativeField), alphaMixin, sortMixin);\nvar shape = merge(clone(onlyOrdinalField), legendMixin, shapeMixin, sortMixin);\nvar detail = merge(clone(onlyOrdinalField), detailMixin, sortMixin);\n\n// we only put aggregated measure in pivot table\nvar text = merge(clone(onlyQuantitativeField), textMixin, sortMixin);\n\n// TODO add label\n\nvar filter = {\n  type: 'array',\n  items: {\n    type: 'object',\n    properties: {\n      operands: {\n        type: 'array',\n        items: {\n          type: ['string', 'boolean', 'integer', 'number']\n        }\n      },\n      operator: {\n        type: 'string',\n        enum: ['>', '>=', '=', '!=', '<', '<=', 'notNull']\n      }\n    }\n  }\n};\n\nvar data = {\n  type: 'object',\n  properties: {\n    // data source\n    formatType: {\n      type: 'string',\n      enum: ['json', 'csv'],\n      default: 'json'\n    },\n    url: {\n      type: 'string',\n      default: undefined\n    },\n    vegaServer: {\n      type: 'object',\n      default: null,\n      properties: {\n        table: {\n          type: 'string',\n          default: undefined\n        },\n        url: {\n          type: 'string',\n          default: 'http://localhost:3001'\n        }\n      }\n    }\n  }\n};\n\nvar config = {\n  type: 'object',\n  properties: {\n    // template\n    width: {\n      type: 'integer',\n      default: undefined\n    },\n    height: {\n      type: 'integer',\n      default: undefined\n    },\n    viewport: {\n      type: 'array',\n      items: {\n        type: 'integer'\n      },\n      default: undefined\n    },\n    gridColor: {\n      type: 'string',\n      role: 'color',\n      default: '#eeeeee'\n    },\n\n    // filter null\n    filterNull: {\n      type: 'object',\n      properties: {\n        O: {type:'boolean', default: false},\n        Q: {type:'boolean', default: true},\n        T: {type:'boolean', default: true}\n      }\n    },\n    toggleSort: {\n      type: 'string',\n      default: 'O'\n    },\n\n    // single plot\n    singleHeight: {\n      // will be overwritten by bandWidth * (cardinality + padding)\n      type: 'integer',\n      default: 200,\n      minimum: 0\n    },\n    singleWidth: {\n      // will be overwritten by bandWidth * (cardinality + padding)\n      type: 'integer',\n      default: 200,\n      minimum: 0\n    },\n    // band size\n    largeBandSize: {\n      type: 'integer',\n      default: 21,\n      minimum: 0\n    },\n    smallBandSize: {\n      //small multiples or single plot with high cardinality\n      type: 'integer',\n      default: 12,\n      minimum: 0\n    },\n    largeBandMaxCardinality: {\n      type: 'integer',\n      default: 10\n    },\n    // small multiples\n    cellPadding: {\n      type: 'number',\n      default: 0.1\n    },\n    cellGridColor: {\n      type: 'string',\n      role: 'color',\n      default: '#aaaaaa'\n    },\n    cellBackgroundColor: {\n      type: 'string',\n      role: 'color',\n      default: 'transparent'\n    },\n    textCellWidth: {\n      type: 'integer',\n      default: 90,\n      minimum: 0\n    },\n\n    // marks\n    strokeWidth: {\n      type: 'integer',\n      default: 2,\n      minimum: 0\n    },\n\n    // scales\n    timeScaleLabelLength: {\n      type: 'integer',\n      default: 3,\n      minimum: 0\n    },\n    // other\n    characterWidth: {\n      type: 'integer',\n      default: 6\n    }\n  }\n};\n\n/** @type Object Schema of a vegalite specification */\nschema.schema = {\n  $schema: 'http://json-schema.org/draft-04/schema#',\n  description: 'Schema for vegalite specification',\n  type: 'object',\n  required: ['marktype', 'enc', 'data', 'config'],\n  properties: {\n    data: data,\n    marktype: schema.marktype,\n    enc: {\n      type: 'object',\n      properties: {\n        x: x,\n        y: y,\n        row: row,\n        col: col,\n        size: size,\n        color: color,\n        alpha: alpha,\n        shape: shape,\n        text: text,\n        detail: detail\n      }\n    },\n    filter: filter,\n    config: config\n  }\n};\n\nschema.encTypes = util.keys(schema.schema.properties.enc.properties);\n\n/** Instantiate a verbose vl spec from the schema */\nschema.instantiate = function() {\n  return schema.util.instantiate(schema.schema);\n};\n","'use strict';\n\nvar schemautil = module.exports = {},\n  util = require('../util');\n\nvar isEmpty = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\nschemautil.extend = function(instance, schema) {\n  return schemautil.merge(schemautil.instantiate(schema), instance);\n};\n\n// instantiate a schema\nschemautil.instantiate = function(schema) {\n  var val;\n  if (schema === undefined) {\n    return undefined;\n  } else if ('default' in schema) {\n    val = schema.default;\n    return util.isObject(val) ? util.duplicate(val) : val;\n  } else if (schema.type === 'object') {\n    var instance = {};\n    for (var name in schema.properties) {\n      val = schemautil.instantiate(schema.properties[name]);\n      if (val !== undefined) {\n        instance[name] = val;\n      }\n    }\n    return instance;\n  } else if (schema.type === 'array') {\n    return [];\n  }\n  return undefined;\n};\n\n// remove all defaults from an instance\nschemautil.subtract = function(instance, defaults) {\n  var changes = {};\n  for (var prop in instance) {\n    var def = defaults[prop];\n    var ins = instance[prop];\n    // Note: does not properly subtract arrays\n    if (!defaults || def !== ins) {\n      if (typeof ins === 'object' && !util.isArray(ins) && def) {\n        var c = schemautil.subtract(ins, def);\n        if (!isEmpty(c))\n          changes[prop] = c;\n      } else if (!util.isArray(ins) || ins.length > 0) {\n        changes[prop] = ins;\n      }\n    }\n  }\n  return changes;\n};\n\nschemautil.merge = function(/*dest*, src0, src1, ...*/){\n  var dest = arguments[0];\n  for (var i=1 ; i<arguments.length; i++) {\n    dest = merge(dest, arguments[i]);\n  }\n  return dest;\n};\n\n// recursively merges src into dest\nfunction merge(dest, src) {\n  if (typeof src !== 'object' || src === null) {\n    return dest;\n  }\n\n  for (var p in src) {\n    if (!src.hasOwnProperty(p)) {\n      continue;\n    }\n    if (src[p] === undefined) {\n      continue;\n    }\n    if (typeof src[p] !== 'object' || src[p] === null) {\n      dest[p] = src[p];\n    } else if (typeof dest[p] !== 'object' || dest[p] === null) {\n      dest[p] = merge(src[p].constructor === Array ? [] : {}, src[p]);\n    } else {\n      merge(dest[p], src[p]);\n    }\n  }\n  return dest;\n}","'use strict';\n\nvar util = module.exports = require('datalib/src/util');\n\nutil.extend(util, require('datalib/src/generate'));\nutil.bin = require('datalib/src/bin');\n\nutil.isin = function(item, array) {\n  return array.indexOf(item) !== -1;\n};\n\nutil.forEach = function(obj, f, thisArg) {\n  if (obj.forEach) {\n    obj.forEach.call(thisArg, f);\n  } else {\n    for (var k in obj) {\n      f.call(thisArg, obj[k], k , obj);\n    }\n  }\n};\n\nutil.getbins = function(stats, maxbins) {\n  return util.bin({\n    min: stats.min,\n    max: stats.max,\n    maxbins: maxbins\n  });\n};\n\n/**\n * x[p[0]]...[p[n]] = val\n * @param noaugment determine whether new object should be added f\n * or non-existing properties along the path\n */\nutil.setter = function(x, p, val, noaugment) {\n  for (var i=0; i<p.length-1; ++i) {\n    if (!noaugment && !(p[i] in x)){\n      x = x[p[i]] = {};\n    } else {\n      x = x[p[i]];\n    }\n  }\n  x[p[i]] = val;\n};\n\n\n/**\n * returns x[p[0]]...[p[n]]\n * @param augment determine whether new object should be added f\n * or non-existing properties along the path\n */\nutil.getter = function(x, p, noaugment) {\n  for (var i=0; i<p.length; ++i) {\n    if (!noaugment && !(p[i] in x)){\n      x = x[p[i]] = {};\n    } else {\n      x = x[p[i]];\n    }\n  }\n  return x;\n};\n\nutil.error = function(msg) {\n  console.error('[VL Error]', msg);\n};\n\n"],"sourceRoot":"/source/"}