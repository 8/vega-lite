{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/vl","vegalite.js","src/Encoding.js","src/compile/aggregate.js","src/compile/axis.js","src/compile/bin.js","src/compile/compile.js","src/compile/facet.js","src/compile/filter.js","src/compile/group.js","src/compile/layout.js","src/compile/legend.js","src/compile/marks.js","src/compile/scale.js","src/compile/sort.js","src/compile/stack.js","src/compile/style.js","src/compile/subfacet.js","src/compile/template.js","src/compile/time.js","src/consts.js","src/data.js","src/enc.js","src/field.js","src/globals.js","src/schema/schema.js","src/schema/schemautil.js","src/util.js"],"names":["e","exports","module","define","amd","f","window","global","self","vl","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"util","consts","merge","version","Encoding","compile","data","field","enc","schema","toShorthand","shorthand","./Encoding","./compile/compile","./consts","./data","./enc","./field","./globals","./schema/schema","./util",2,"vlfield","vlenc","marktype","config","filter","theme","defaults","instantiate","spec","type","dataTypes","specExtended","this","_data","_marktype","_enc","_config","_filter","proto","prototype","is","m","has","encType","undefined","name","et","filterNull","fields","forEach","fieldList","fieldName","Q","containsType","T","O","push","operands","operator","concat","nodata","nofn","aggr","bin","fn","fieldTitle","isCount","count","displayName","toUpperCase","scale","axis","band","bandSize","useSmallBand","Y","ROW","X","COL","size","maxbins","MAXBINS_DEFAULT","legend","value","sort","stats","isType","byCode","toggleSort","support","qField","x","y","reverse","any","all","keys","map","reduce","init","role","text","prop","TEXT","font","fieldDef","isOrdinalScale","encoding","isDimension","isMeasure","isAggregate","alwaysNoOcclusion","isStack","color","cardinality","isRaw","toSpec","excludeConfig","duplicate","dataTypeNames","subtract","c","assign","delim","fromShorthand","split","shift","trim","specFromShorthand","fromSpec","transpose","oldenc","row","col","direction","useTypeCode","mode","get","toggleFilterNullO","numNulls","./compile/time",3,"aggregates","opt","dims","meas","detail","facets","op","vals","preaggregatedData","transform","groupby","details","aggregated","../globals","../util",4,"axis_title","def","layout","maxlength","cellWidth","cellHeight","title","truncate","setter","angle","align","baseline","dy","height","titleOffset","axisTitleOffset","axis_labels","time","hasScale","textTemplatePath","format","maxLabelLength","getter","names","props","defs","isCol","isRow","rowOffset","cellPadding","grid","layer","offset","stroke","x2","group","mult","opacity","orient","ticks","./time",5,"binning","output",6,"template","marks","vlsort","vlstyle","style","aggregate","facet","vlstack","stack","subfacet","mark","mdefs","mdef","addFilters","sorting","hasRow","hasCol","lineType","line","aggResult","hasDetails","from","by","legends","scales","properties","update","axes","filterLessThanZero","../Encoding","./aggregate","./axis","./bin","./facet","./filter","./group","./layout","./legend","./marks","./scale","./sort","./stack","./style","./subfacet","./template",7,"faceting","axesGrp","enter","facetKeys","cellAxes","fill","error","unshift","groupdef","width","apply","trans",8,"BINARY",">",">=","=","!=","<","<=","filters","condition","op1","op2","j","console","warn","test",9,"_name",10,"vllayout","box","hasX","hasY","xCardinality","yCardinality","padding","colCardinality","rowCardinality","maxLength","Math","min","../field","../schema/schema",11,"COLOR","SIZE","SHAPE","shape","labels",12,"bar_props","p","xc","y2","yc","ALPHA","point_props","strokeWidth","line_props","area_props","tick_props","filled_point_props","text_props","fontSize","fontWeight","fontStyle","bg","TABLE","bar","requiredEncoding","supportedEncoding","alpha","area","tick","circle","square","point",13,"scale_domain","range","domain","bins","getbins","start","stop","step","STACKED","getDataset","scale_range","bandWidth","zero","round","nice","max","colorRange","outerPadding","points",14,"addSortTransforms","datasetMapping","counter","sortBy","d","byClause","dataName","transforms","source","RAW",15,"stacking","dim","val","idx","isXMeasure","isYMeasure","stacked","y1","y0",16,"estimateOpacity","numPoints","numMultiples",17,"subfaceting","g",18,"table","dataUrl","vldata","getUrl","url","parse","../data",19,"timeFields","timeFn","tf","fieldFn","func","stat","yearstat","formula","expr","labelLength","substr","isOrdinalFn","isColor",20,"encodingTypes","DETAIL",21,"obj","binSize","query","JSON","stringify","getSchema","order","k","datum","Date","stablesort","typeThenName","getStats","column","minmax","numbers","dates","uniq","len","toString","skew","stdev","mean","median","sample","Object","floor","random",22,"encTypes","countRetinal","arr","indexOf","join","convertType","isArray","enctype",23,"getIsType","byName","shorthands","timefns","typeOrder","G","toLowerCase","original","typeThenCardinality",24,"INDEX",25,"enum","supportedEnums","supportedTypes","minimum","default","getSupportedRole","supportedRole","defaultTimeFn","scale_type","clone","typicalField","description","onlyOrdinalField","dimension","axisMixin","supportedMarktypes","sortMixin","items","required","bandMixin","legendMixin","textMixin","margin","weight","family","sizeMixin","colorMixin","alphaMixin","maximum","shapeMixin","detailMixin","rowMixin","colMixin","facetMixin","requiredNameType","multiRoleField","measure","quantitativeField","onlyQuantitativeField","formatType","vegaServer","log","viewport","gridColor","singleHeight","singleWidth","largeBandSize","smallBandSize","largeBandMaxCardinality","cellGridColor","cellBackgroundColor","textCellWidth","timeScaleLabelLength","characterWidth","$schema","./schemautil",26,"dest","src","hasOwnProperty","constructor","Array","schemautil","isEmpty","extend","instance","isObject","changes","ins","arguments",27,"util_bisectLeft","lo","hi","mid","cmp","vg_truncateOnWord","rev","cnt","tok","vg_truncate_word_re","w","slice","v","Infinity","find","list","pattern","isin","item","array","isNumber","isNaN","parseFloat","isFinite","values","nums","date","b","half","variance","avg","diffs","pow","keyFn","indices","sa","sb","sqrt","med","std","thisArg","NaN","precision","eps","maxb","base","div","mins","minstep","logb","level","ceil","span","nbins","steps","unit","noaugment","pos","word","ellipsis","l1","l2","msg"],"mappings":"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","file":"vegalite.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\nvar globals = require('./globals'),\n    util = require('./util'),\n    consts = require('./consts');\n\nvar vl = util.merge(consts, util);\n\nvl.version = \"0.6.2\";\n\nvl.Encoding = require('./Encoding');\nvl.compile = require('./compile/compile');\nvl.data = require('./data');\nvl.field = require('./field');\nvl.enc = require('./enc');\nvl.schema = require('./schema/schema');\nvl.toShorthand = vl.Encoding.shorthand;\n\n\nmodule.exports = vl;\n","!function(e){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=e();else if(\"function\"==typeof define&&define.amd)define([],e);else{var f;\"undefined\"!=typeof window?f=window:\"undefined\"!=typeof global?f=global:\"undefined\"!=typeof self&&(f=self),f.vl=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nvar globals = require('./globals'),\n    util = require('./util'),\n    consts = require('./consts');\n\nvar vl = util.merge(consts, util);\n\nvl.version = \"0.6.2\";\n\nvl.Encoding = require('./Encoding');\nvl.compile = require('./compile/compile');\nvl.data = require('./data');\nvl.field = require('./field');\nvl.enc = require('./enc');\nvl.schema = require('./schema/schema');\nvl.toShorthand = vl.Encoding.shorthand;\n\n\nmodule.exports = vl;\n\n},{\"./Encoding\":2,\"./compile/compile\":6,\"./consts\":20,\"./data\":21,\"./enc\":22,\"./field\":23,\"./globals\":24,\"./schema/schema\":25,\"./util\":27}],2:[function(require,module,exports){\n'use strict';\n\nvar globals = require('./globals'),\n  consts = require('./consts'),\n  util = require('./util'),\n  vlfield = require('./field'),\n  vlenc = require('./enc'),\n  schema = require('./schema/schema'),\n  time = require('./compile/time');\n\nvar Encoding = module.exports = (function() {\n\n  function Encoding(marktype, enc, data, config, filter, theme) {\n    var defaults = schema.instantiate();\n\n    var spec = {\n      data: data,\n      marktype: marktype,\n      enc: enc,\n      config: config,\n      filter: filter || []\n    };\n\n    // type to bitcode\n    for (var e in defaults.enc) {\n      defaults.enc[e].type = consts.dataTypes[defaults.enc[e].type];\n    }\n\n    var specExtended = schema.util.merge(defaults, theme || {}, spec) ;\n\n    this._data = specExtended.data;\n    this._marktype = specExtended.marktype;\n    this._enc = specExtended.enc;\n    this._config = specExtended.config;\n    this._filter = specExtended.filter;\n  }\n\n  var proto = Encoding.prototype;\n\n  proto.marktype = function() {\n    return this._marktype;\n  };\n\n  proto.is = function(m) {\n    return this._marktype === m;\n  };\n\n  proto.has = function(encType) {\n    // equivalent to calling vlenc.has(this._enc, encType)\n    return this._enc[encType].name !== undefined;\n  };\n\n  proto.enc = function(et) {\n    return this._enc[et];\n  };\n\n  proto.filter = function() {\n    var filterNull = [],\n      fields = this.fields(),\n      self = this;\n\n    util.forEach(fields, function(fieldList, fieldName) {\n      if (fieldName === '*') return; //count\n\n      if ((self.config('filterNull').Q && fieldList.containsType[Q]) ||\n          (self.config('filterNull').T && fieldList.containsType[T]) ||\n          (self.config('filterNull').O && fieldList.containsType[O])) {\n        filterNull.push({\n          operands: [fieldName],\n          operator: 'notNull'\n        });\n      }\n    });\n\n    return filterNull.concat(this._filter);\n  };\n\n  // get \"field\" property for vega\n  proto.field = function(et, nodata, nofn) {\n    if (!this.has(et)) return null;\n\n    var f = (nodata ? '' : 'data.');\n\n    if (this._enc[et].aggr === 'count') {\n      return f + 'count';\n    } else if (!nofn && this._enc[et].bin) {\n      return f + 'bin_' + this._enc[et].name;\n    } else if (!nofn && this._enc[et].aggr) {\n      return f + this._enc[et].aggr + '_' + this._enc[et].name;\n    } else if (!nofn && this._enc[et].fn) {\n      return f + this._enc[et].fn + '_' + this._enc[et].name;\n    } else {\n      return f + this._enc[et].name;\n    }\n  };\n\n  proto.fieldName = function(et) {\n    return this._enc[et].name;\n  };\n\n  /*\n   * return key-value pairs of field name and list of fields of that field name\n   */\n  proto.fields = function() {\n    return vlenc.fields(this._enc);\n  };\n\n  proto.fieldTitle = function(et) {\n    if (vlfield.isCount(this._enc[et])) {\n      return vlfield.count.displayName;\n    }\n    var fn = this._enc[et].aggr || this._enc[et].fn || (this._enc[et].bin && \"bin\");\n    if (fn) {\n      return fn.toUpperCase() + '(' + this._enc[et].name + ')';\n    } else {\n      return this._enc[et].name;\n    }\n  };\n\n  proto.scale = function(et) {\n    return this._enc[et].scale || {};\n  };\n\n  proto.axis = function(et) {\n    return this._enc[et].axis || {};\n  };\n\n  proto.band = function(et) {\n    return this._enc[et].band || {};\n  };\n\n  proto.bandSize = function(encType, useSmallBand) {\n    useSmallBand = useSmallBand ||\n      //isBandInSmallMultiples\n      (encType === Y && this.has(ROW) && this.has(Y)) ||\n      (encType === X && this.has(COL) && this.has(X));\n\n    // if band.size is explicitly specified, follow the specification, otherwise draw value from config.\n    return this.band(encType).size ||\n      this.config(useSmallBand ? 'smallBandSize' : 'largeBandSize');\n  };\n\n  proto.aggr = function(et) {\n    return this._enc[et].aggr;\n  };\n\n  // returns false if binning is disabled, otherwise an object with binning properties\n  proto.bin = function(et) {\n    var bin = this._enc[et].bin;\n    if (bin === {})\n      return false;\n    if (bin === true)\n      return {\n        maxbins: schema.MAXBINS_DEFAULT\n      };\n    return bin;\n  };\n\n  proto.legend = function(et) {\n    return this._enc[et].legend;\n  };\n\n  proto.value = function(et) {\n    return this._enc[et].value;\n  };\n\n  proto.fn = function(et) {\n    return this._enc[et].fn;\n  };\n\n  proto.sort = function(et, stats) {\n    var sort = this._enc[et].sort,\n      enc = this._enc,\n      isType = vlfield.isType.byCode;\n\n    // console.log('sort:', sort, 'support:', Encoding.toggleSort.support({enc:this._enc}, stats) , 'toggle:', this.config('toggleSort'))\n\n    if ((!sort || sort.length===0) &&\n        Encoding.toggleSort.support({enc:this._enc}, stats, true) && //HACK\n        this.config('toggleSort') === 'Q'\n      ) {\n      var qField = isType(enc.x, O) ? enc.y : enc.x;\n\n      if (isType(enc[et], O)) {\n        sort = [{\n          name: qField.name,\n          aggr: qField.aggr,\n          type: qField.type,\n          reverse: true\n        }];\n      }\n    }\n\n    return sort;\n  };\n\n  proto.any = function(f) {\n    return util.any(this._enc, f);\n  };\n\n  proto.all = function(f) {\n    return util.all(this._enc, f);\n  };\n\n  proto.length = function() {\n    return util.keys(this._enc).length;\n  };\n\n  proto.map = function(f) {\n    return vlenc.map(this._enc, f);\n  };\n\n  proto.reduce = function(f, init) {\n    return vlenc.reduce(this._enc, f, init);\n  };\n\n  proto.forEach = function(f) {\n    return vlenc.forEach(this._enc, f);\n  };\n\n  proto.type = function(et) {\n    return this.has(et) ? this._enc[et].type : null;\n  };\n\n  proto.role = function(et) {\n    return this.has(et) ? vlfield.role(this._enc[et]) : null;\n  };\n\n  proto.text = function(prop) {\n    var text = this._enc[TEXT].text;\n    return prop ? text[prop] : text;\n  };\n\n  proto.font = function(prop) {\n    var font = this._enc[TEXT].font;\n    return prop ? font[prop] : font;\n  };\n\n  proto.isType = function(et, type) {\n    var field = this.enc(et);\n    return field && Encoding.isType(field, type);\n  };\n\n  Encoding.isType = function (fieldDef, type) {\n    // FIXME vlfield.isType\n    return (fieldDef.type & type) > 0;\n  };\n\n  Encoding.isOrdinalScale = function(encoding, encType) {\n    return vlfield.isOrdinalScale(encoding.enc(encType), true);\n  };\n\n  Encoding.isDimension = function(encoding, encType) {\n    return vlfield.isDimension(encoding.enc(encType), true);\n  };\n\n  Encoding.isMeasure = function(encoding, encType) {\n    return vlfield.isMeasure(encoding.enc(encType), true);\n  };\n\n  proto.isOrdinalScale = function(encType) {\n    return this.has(encType) && Encoding.isOrdinalScale(this, encType);\n  };\n\n  proto.isDimension = function(encType) {\n    return this.has(encType) && Encoding.isDimension(this, encType);\n  };\n\n  proto.isMeasure = function(encType) {\n    return this.has(encType) && Encoding.isMeasure(this, encType);\n  };\n\n  proto.isAggregate = function() {\n    return vlenc.isAggregate(this._enc);\n  };\n\n  Encoding.isAggregate = function(spec) {\n    return vlenc.isAggregate(spec.enc);\n  };\n\n  Encoding.alwaysNoOcclusion = function(spec, stats) {\n    // FIXME raw OxQ with # of rows = # of O\n    return vlenc.isAggregate(spec.enc);\n  };\n\n  Encoding.isStack = function(spec) {\n    // FIXME update this once we have control for stack ...\n    return (spec.marktype === 'bar' || spec.marktype === 'area') &&\n      spec.enc.color;\n  };\n\n  proto.isStack = function() {\n    // FIXME update this once we have control for stack ...\n    return (this.is('bar') || this.is('area')) && this.has('color');\n  };\n\n  proto.cardinality = function(encType, stats) {\n    return vlfield.cardinality(this.enc(encType), stats, this.config('filterNull'), true);\n  };\n\n  proto.isRaw = function() {\n    return !this.isAggregate();\n  };\n\n  proto.data = function(name) {\n    return this._data[name];\n  };\n\n  proto.config = function(name) {\n    return this._config[name];\n  };\n\n  proto.toSpec = function(excludeConfig) {\n    var enc = util.duplicate(this._enc),\n      spec;\n\n    // convert type's bitcode to type name\n    for (var e in enc) {\n      enc[e].type = consts.dataTypeNames[enc[e].type];\n    }\n\n    spec = {\n      marktype: this._marktype,\n      enc: enc,\n      filter: this._filter\n    };\n\n    if (!excludeConfig) {\n      spec.config = util.duplicate(this._config);\n    }\n\n    // remove defaults\n    var defaults = schema.instantiate();\n    return schema.util.subtract(spec, defaults);\n  };\n\n  proto.toShorthand = function() {\n    var c = consts.shorthand;\n    return 'mark' + c.assign + this._marktype +\n      c.delim + vlenc.shorthand(this._enc);\n  };\n\n  Encoding.shorthand = function (spec) {\n    var c = consts.shorthand;\n    return 'mark' + c.assign + spec.marktype +\n      c.delim + vlenc.shorthand(spec.enc);\n  };\n\n  Encoding.fromShorthand = function(shorthand, data, config, theme) {\n    var c = consts.shorthand,\n        split = shorthand.split(c.delim),\n        marktype = split.shift().split(c.assign)[1].trim(),\n        enc = vlenc.fromShorthand(split, true);\n\n    return new Encoding(marktype, enc, data, config, null, theme);\n  };\n\n  Encoding.specFromShorthand = function(shorthand, data, config, excludeConfig) {\n    return Encoding.fromShorthand(shorthand, data, config).toSpec(excludeConfig);\n  };\n\n  Encoding.fromSpec = function(spec, theme) {\n    var enc = util.duplicate(spec.enc || {});\n\n    //convert type from string to bitcode (e.g, O=1)\n    for (var e in enc) {\n      enc[e].type = consts.dataTypes[enc[e].type];\n    }\n\n    return new Encoding(spec.marktype, enc, spec.data, spec.config, spec.filter, theme);\n  };\n\n  Encoding.transpose = function(spec) {\n    var oldenc = spec.enc,\n      enc = util.duplicate(spec.enc);\n    enc.x = oldenc.y;\n    enc.y = oldenc.x;\n    enc.row = oldenc.col;\n    enc.col = oldenc.row;\n    spec.enc = enc;\n    return spec;\n  };\n\n  Encoding.toggleSort = function(spec) {\n    spec.config = spec.config || {};\n    spec.config.toggleSort = spec.config.toggleSort === 'Q' ? 'O' :'Q';\n    return spec;\n  };\n\n\n  Encoding.toggleSort.direction = function(spec, useTypeCode) {\n    if (!Encoding.toggleSort.support(spec, useTypeCode)) { return; }\n    var enc = spec.enc;\n    return enc.x.type === 'O' ? 'x' :  'y';\n  };\n\n  Encoding.toggleSort.mode = function(spec) {\n    return spec.config.toggleSort;\n  };\n\n  Encoding.toggleSort.support = function(spec, stats, useTypeCode) {\n    var enc = spec.enc,\n      isType = vlfield.isType.get(useTypeCode);\n\n    if (vlenc.has(enc, ROW) || vlenc.has(enc, COL) ||\n      !vlenc.has(enc, X) || !vlenc.has(enc, Y) ||\n      !Encoding.alwaysNoOcclusion(spec, stats)) {\n      return false;\n    }\n\n    return ( isType(enc.x, O) && vlfield.isMeasure(enc.y, useTypeCode)) ? 'x' :\n      ( isType(enc.y, O) && vlfield.isMeasure(enc.x, useTypeCode)) ? 'y' : false;\n  };\n\n  Encoding.toggleFilterNullO = function(spec) {\n    spec.config = spec.config || {};\n    spec.config.filterNull = spec.config.filterNull || { //FIXME\n      T: true,\n      Q: true\n    };\n    spec.config.filterNull.O = !spec.config.filterNull.O;\n    return spec;\n  };\n\n  Encoding.toggleFilterNullO.support = function(spec, stats) {\n    var fields = vlenc.fields(spec.enc);\n    for (var fieldName in fields) {\n      var fieldList = fields[fieldName];\n      if (fieldList.containsType.O && fieldName in stats && stats[fieldName].numNulls > 0) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  return Encoding;\n})();\n\n},{\"./compile/time\":19,\"./consts\":20,\"./enc\":22,\"./field\":23,\"./globals\":24,\"./schema/schema\":25,\"./util\":27}],3:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util');\n\nmodule.exports = aggregates;\n\nfunction aggregates(spec, encoding, opt) {\n  opt = opt || {};\n\n  var dims = {}, meas = {}, detail = {}, facets = {},\n    data = spec.data[1]; // currently data[0] is raw and data[1] is table\n\n  encoding.forEach(function(field, encType) {\n    if (field.aggr) {\n      if (field.aggr === 'count') {\n        meas.count = {op: 'count', field: '*'};\n      }else {\n        meas[field.aggr + '|'+ field.name] = {\n          op: field.aggr,\n          field: 'data.'+ field.name\n        };\n      }\n    } else {\n      dims[field.name] = encoding.field(encType);\n      if (encType == ROW || encType == COL) {\n        facets[field.name] = dims[field.name];\n      }else if (encType !== X && encType !== Y) {\n        detail[field.name] = dims[field.name];\n      }\n    }\n  });\n  dims = util.vals(dims);\n  meas = util.vals(meas);\n\n  if (meas.length > 0 && !opt.preaggregatedData) {\n    if (!data.transform) data.transform = [];\n    data.transform.push({\n      type: 'aggregate',\n      groupby: dims,\n      fields: meas\n    });\n  }\n  return {\n    details: util.vals(detail),\n    dims: dims,\n    facets: util.vals(facets),\n    aggregated: meas.length > 0\n  };\n}\n\n},{\"../globals\":24,\"../util\":27}],4:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  setter = util.setter,\n  getter = util.getter,\n  time = require('./time');\n\nvar axis = module.exports = {};\n\naxis.names = function(props) {\n  return util.keys(util.keys(props).reduce(function(a, x) {\n    var s = props[x].scale;\n    if (s === X || s === Y) a[props[x].scale] = 1;\n    return a;\n  }, {}));\n};\n\naxis.defs = function(names, encoding, layout, stats, opt) {\n  return names.reduce(function(a, name) {\n    a.push(axis.def(name, encoding, layout, stats, opt));\n    return a;\n  }, []);\n};\n\naxis.def = function(name, encoding, layout, stats, opt) {\n  var type = name;\n  var isCol = name == COL, isRow = name == ROW;\n  var rowOffset = axisTitleOffset(encoding, layout, Y) + 20,\n    cellPadding = layout.cellPadding;\n\n\n  if (isCol) type = 'x';\n  if (isRow) type = 'y';\n\n  var def = {\n    type: type,\n    scale: name\n  };\n\n  if (encoding.axis(name).grid) {\n    def.grid = true;\n    def.layer = (isRow || isCol) ? 'front' :  'back';\n\n    if (isCol) {\n      // set grid property -- put the lines on the right the cell\n      setter(def, ['properties', 'grid'], {\n        x: {\n          offset: layout.cellWidth * (1+ cellPadding/2.0),\n          // default value(s) -- vega doesn't do recursive merge\n          scale: 'col'\n        },\n        y: {\n          value: -layout.cellHeight * (cellPadding/2),\n        },\n        stroke: { value: encoding.config('cellGridColor') }\n      });\n    } else if (isRow) {\n      // set grid property -- put the lines on the top\n      setter(def, ['properties', 'grid'], {\n        y: {\n          offset: -layout.cellHeight * (cellPadding/2),\n          // default value(s) -- vega doesn't do recursive merge\n          scale: 'row'\n        },\n        x: {\n          value: rowOffset\n        },\n        x2: {\n          offset: rowOffset + (layout.cellWidth * 0.05),\n          // default value(s) -- vega doesn't do recursive merge\n          group: \"mark.group.width\",\n          mult: 1\n        },\n        stroke: { value: encoding.config('cellGridColor') }\n      });\n    } else {\n      setter(def, ['properties', 'grid', 'stroke'], {\n        value: encoding.config('gridColor')\n      });\n    }\n  }\n\n  if (encoding.axis(name).title) {\n    def = axis_title(def, name, encoding, layout, opt);\n  }\n\n  if (isRow || isCol) {\n    setter(def, ['properties', 'ticks'], {\n      opacity: {value: 0}\n    });\n    setter(def, ['properties', 'majorTicks'], {\n      opacity: {value: 0}\n    });\n    setter(def, ['properties', 'axis'], {\n      opacity: {value: 0}\n    });\n  }\n\n  if (isCol) {\n    def.orient = 'top';\n  }\n\n  if (isRow) {\n    def.offset = rowOffset;\n  }\n\n  if (name == X) {\n    if (encoding.has(Y) && encoding.isOrdinalScale(Y) && encoding.cardinality(Y, stats) > 30) {\n      def.orient = 'top';\n    }\n\n    if (encoding.isDimension(X) || encoding.isType(X, T)) {\n      setter(def, ['properties','labels'], {\n        angle: {value: 270},\n        align: {value: 'right'},\n        baseline: {value: 'middle'}\n      });\n    } else { // Q\n      def.ticks = 5;\n    }\n  }\n\n  def = axis_labels(def, name, encoding, layout, opt);\n\n  return def;\n};\n\nfunction axis_title(def, name, encoding, layout, opt) {\n  var maxlength = null,\n    fieldTitle = encoding.fieldTitle(name);\n  if (name===X) {\n    maxlength = layout.cellWidth / encoding.config('characterWidth');\n  } else if (name === Y) {\n    maxlength = layout.cellHeight / encoding.config('characterWidth');\n  }\n\n  def.title = maxlength ? util.truncate(fieldTitle, maxlength) : fieldTitle;\n\n  if (name === ROW) {\n    setter(def, ['properties','title'], {\n      angle: {value: 0},\n      align: {value: 'right'},\n      baseline: {value: 'middle'},\n      dy: {value: (-layout.height/2) -20}\n    });\n  }\n\n  def.titleOffset = axisTitleOffset(encoding, layout, name);\n  return def;\n}\n\nfunction axis_labels(def, name, encoding, layout, opt) {\n  var fn;\n  // add custom label for time type\n  if (encoding.isType(name, T) && (fn = encoding.fn(name)) && (time.hasScale(fn))) {\n    setter(def, ['properties','labels','text','scale'], 'time-'+ fn);\n  }\n\n  var textTemplatePath = ['properties','labels','text','template'];\n  if (encoding.axis(name).format) {\n    def.format = encoding.axis(name).format;\n  } else if (encoding.isType(name, Q)) {\n    setter(def, textTemplatePath, \"{{data | number:'.3s'}}\");\n  } else if (encoding.isType(name, T) && !encoding.fn(name)) {\n    setter(def, textTemplatePath, \"{{data | time:'%Y-%m-%d'}}\");\n  } else if (encoding.isType(name, T) && encoding.fn(name) === 'year') {\n    setter(def, textTemplatePath, \"{{data | number:'d'}}\");\n  } else if (encoding.isType(name, O) && encoding.axis(name).maxLabelLength) {\n    setter(def, textTemplatePath, '{{data | truncate:' + encoding.axis(name).maxLabelLength + '}}');\n  }\n\n  return def;\n}\n\nfunction axisTitleOffset(encoding, layout, name) {\n  var value = encoding.axis(name).titleOffset;\n  if (value) {\n    return value;\n  }\n  switch (name) {\n    case ROW: return 0;\n    case COL: return 35;\n  }\n  return getter(layout, [name, 'axisTitleOffset']);\n}\n\n},{\"../globals\":24,\"../util\":27,\"./time\":19}],5:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util');\n\nmodule.exports = binning;\n\nfunction binning(spec, encoding, opt) {\n  opt = opt || {};\n  var bins = {};\n\n  if (opt.preaggregatedData) {\n    return;\n  }\n\n  if (!spec.transform) spec.transform = [];\n\n  encoding.forEach(function(field, encType) {\n    if (encoding.bin(encType)) {\n      spec.transform.push({\n        type: 'bin',\n        field: 'data.' + field.name,\n        output: 'data.bin_' + field.name,\n        maxbins: encoding.bin(encType).maxbins\n      });\n    }\n  });\n}\n\n},{\"../globals\":24,\"../util\":27}],6:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util');\n\nmodule.exports = compile;\n\nvar Encoding = require('../Encoding'),\n  template = compile.template = require('./template'),\n  axis = compile.axis = require('./axis'),\n  filter = compile.filter = require('./filter'),\n  legend = compile.legend = require('./legend'),\n  marks = compile.marks = require('./marks'),\n  scale = compile.scale = require('./scale'),\n  vlsort = compile.sort = require('./sort'),\n  vlstyle = compile.style = require('./style'),\n  time = compile.time = require('./time'),\n  aggregate = compile.aggregate = require('./aggregate'),\n  bin = compile.bin = require('./bin'),\n  facet = compile.facet = require('./facet'),\n  vlstack = compile.stack = require('./stack'),\n  subfacet = compile.subfacet = require('./subfacet');\n\ncompile.layout = require('./layout');\ncompile.group = require('./group');\n\nfunction compile(spec, stats, theme) {\n  return compile.encoding(Encoding.fromSpec(spec, theme), stats);\n}\n\ncompile.shorthand = function (shorthand, stats, config, theme) {\n  return compile.encoding(Encoding.fromShorthand(shorthand, config, theme), stats);\n};\n\ncompile.encoding = function (encoding, stats) {\n  var layout = compile.layout(encoding, stats),\n    style = vlstyle(encoding, stats),\n    spec = template(encoding, layout, stats),\n    group = spec.marks[0],\n    mark = marks[encoding.marktype()],\n    mdefs = marks.def(mark, encoding, layout, style),\n    mdef = mdefs[0];  // TODO: remove this dirty hack by refactoring the whole flow\n\n  filter.addFilters(spec, encoding);\n  var sorting = vlsort(spec, encoding, stats);\n\n  var hasRow = encoding.has(ROW), hasCol = encoding.has(COL);\n\n  var preaggregatedData = !!encoding.data('vegaServer');\n\n  for (var i = 0; i < mdefs.length; i++) {\n    group.marks.push(mdefs[i]);\n  }\n\n  bin(spec.data[1], encoding, {preaggregatedData: preaggregatedData});\n\n  var lineType = marks[encoding.marktype()].line;\n\n  if (!preaggregatedData) {\n    spec = time(spec, encoding);\n  }\n\n  // handle subfacets\n  var aggResult = aggregate(spec, encoding, {preaggregatedData: preaggregatedData}),\n    details = aggResult.details,\n    hasDetails = details && details.length > 0,\n    stack = hasDetails && vlstack(spec, encoding, mdef, aggResult.facets);\n\n  if (hasDetails && (stack || lineType)) {\n    //subfacet to group stack / line together in one group\n    subfacet(group, mdef, details, stack, encoding);\n  }\n\n  // auto-sort line/area values\n  //TODO(kanitw): have some config to turn off auto-sort for line (for line chart that encodes temporal information)\n  if (lineType) {\n    var f = (encoding.isMeasure(X) && encoding.isDimension(Y)) ? Y : X;\n    if (!mdef.from) mdef.from = {};\n    // TODO: why - ?\n    mdef.from.transform = [{type: 'sort', by: '-' + encoding.field(f)}];\n  }\n\n  // Small Multiples\n  if (hasRow || hasCol) {\n    spec = facet(group, encoding, layout, style, sorting, spec, mdef, stack, stats);\n    spec.legends = legend.defs(encoding);\n  } else {\n    group.scales = scale.defs(scale.names(mdef.properties.update), encoding, layout, style, sorting,\n      {stack: stack, stats: stats});\n    group.axes = axis.defs(axis.names(mdef.properties.update), encoding, layout, stats);\n    group.legends = legend.defs(encoding);\n  }\n\n  filter.filterLessThanZero(spec, encoding);\n\n  return spec;\n};\n\n\n},{\"../Encoding\":2,\"../globals\":24,\"../util\":27,\"./aggregate\":3,\"./axis\":4,\"./bin\":5,\"./facet\":7,\"./filter\":8,\"./group\":9,\"./layout\":10,\"./legend\":11,\"./marks\":12,\"./scale\":13,\"./sort\":14,\"./stack\":15,\"./style\":16,\"./subfacet\":17,\"./template\":18,\"./time\":19}],7:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util');\n\nvar axis = require('./axis'),\n  groupdef = require('./group').def,\n  scale = require('./scale');\n\nmodule.exports = faceting;\n\nfunction faceting(group, encoding, layout, style, sorting, spec, mdef, stack, stats) {\n  var enter = group.properties.enter;\n  var facetKeys = [], cellAxes = [], from, axesGrp;\n\n  var hasRow = encoding.has(ROW), hasCol = encoding.has(COL);\n\n  enter.fill = {value: encoding.config('cellBackgroundColor')};\n\n  //move \"from\" to cell level and add facet transform\n  group.from = {data: group.marks[0].from.data};\n\n  // Hack, this needs to be refactored\n  for (var i = 0; i < group.marks.length; i++) {\n    var mark = group.marks[i];\n    if (mark.from.transform) {\n      delete mark.from.data; //need to keep transform for subfacetting case\n    } else {\n      delete mark.from;\n    }\n  }\n\n  if (hasRow) {\n    if (!encoding.isDimension(ROW)) {\n      util.error('Row encoding should be ordinal.');\n    }\n    enter.y = {scale: ROW, field: 'keys.' + facetKeys.length};\n    enter.height = {'value': layout.cellHeight}; // HACK\n\n    facetKeys.push(encoding.field(ROW));\n\n    if (hasCol) {\n      from = util.duplicate(group.from);\n      from.transform = from.transform || [];\n      from.transform.unshift({type: 'facet', keys: [encoding.field(COL)]});\n    }\n\n    axesGrp = groupdef('x-axes', {\n        axes: encoding.has(X) ? axis.defs(['x'], encoding, layout, stats) : undefined,\n        x: hasCol ? {scale: COL, field: 'keys.0'} : {value: 0},\n        width: hasCol && {'value': layout.cellWidth}, //HACK?\n        from: from\n      });\n\n    spec.marks.unshift(axesGrp); // need to prepend so it appears under the plots\n    (spec.axes = spec.axes || []);\n    spec.axes.push.apply(spec.axes, axis.defs(['row'], encoding, layout, stats));\n  } else { // doesn't have row\n    if (encoding.has(X)) {\n      //keep x axis in the cell\n      cellAxes.push.apply(cellAxes, axis.defs(['x'], encoding, layout, stats));\n    }\n  }\n\n  if (hasCol) {\n    if (!encoding.isDimension(COL)) {\n      util.error('Col encoding should be ordinal.');\n    }\n    enter.x = {scale: COL, field: 'keys.' + facetKeys.length};\n    enter.width = {'value': layout.cellWidth}; // HACK\n\n    facetKeys.push(encoding.field(COL));\n\n    if (hasRow) {\n      from = util.duplicate(group.from);\n      from.transform = from.transform || [];\n      from.transform.unshift({type: 'facet', keys: [encoding.field(ROW)]});\n    }\n\n    axesGrp = groupdef('y-axes', {\n      axes: encoding.has(Y) ? axis.defs(['y'], encoding, layout, stats) : undefined,\n      y: hasRow && {scale: ROW, field: 'keys.0'},\n      x: hasRow && {value: 0},\n      height: hasRow && {'value': layout.cellHeight}, //HACK?\n      from: from\n    });\n\n    spec.marks.unshift(axesGrp); // need to prepend so it appears under the plots\n    (spec.axes = spec.axes || []);\n    spec.axes.push.apply(spec.axes, axis.defs(['col'], encoding, layout, stats));\n  } else { // doesn't have col\n    if (encoding.has(Y)) {\n      cellAxes.push.apply(cellAxes, axis.defs(['y'], encoding, layout, stats));\n    }\n  }\n\n  // assuming equal cellWidth here\n  // TODO: support heterogenous cellWidth (maybe by using multiple scales?)\n  spec.scales = (spec.scales || []).concat(scale.defs(\n    scale.names(enter).concat(scale.names(mdef.properties.update)),\n    encoding,\n    layout,\n    style,\n    sorting,\n    {stack: stack, facet: true, stats: stats}\n  )); // row/col scales + cell scales\n\n  if (cellAxes.length > 0) {\n    group.axes = cellAxes;\n  }\n\n  // add facet transform\n  var trans = (group.from.transform || (group.from.transform = []));\n  trans.unshift({type: 'facet', keys: facetKeys});\n\n  return spec;\n}\n\n},{\"../globals\":24,\"../util\":27,\"./axis\":4,\"./group\":9,\"./scale\":13}],8:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals');\n\nvar filter = module.exports = {};\n\nvar BINARY = {\n  '>':  true,\n  '>=': true,\n  '=':  true,\n  '!=': true,\n  '<':  true,\n  '<=': true\n};\n\nfilter.addFilters = function(spec, encoding) {\n  var filters = encoding.filter(),\n    data = spec.data[0];  // apply filters to raw data before aggregation\n\n  if (!data.transform)\n    data.transform = [];\n\n  // add custom filters\n  for (var i in filters) {\n    var filter = filters[i];\n\n    var condition = '';\n    var operator = filter.operator;\n    var operands = filter.operands;\n\n    if (BINARY[operator]) {\n      // expects a field and a value\n      if (operator === '=') {\n        operator = '==';\n      }\n\n      var op1 = operands[0];\n      var op2 = operands[1];\n      condition = 'd.data.' + op1 + operator + op2;\n    } else if (operator === 'notNull') {\n      // expects a number of fields\n      for (var j in operands) {\n        condition += 'd.data.' + operands[j] + '!==null';\n        if (j < operands.length - 1) {\n          condition += ' && ';\n        }\n      }\n    } else {\n      console.warn('Unsupported operator: ', operator);\n    }\n\n    data.transform.push({\n      type: 'filter',\n      test: condition\n    });\n  }\n};\n\n// remove less than 0 values if we use log function\nfilter.filterLessThanZero = function(spec, encoding) {\n  encoding.forEach(function(field, encType) {\n    if (encoding.scale(encType).type === 'log') {\n      spec.data[1].transform.push({\n        type: 'filter',\n        test: 'd.' + encoding.field(encType) + '>0'\n      });\n    }\n  });\n};\n\n\n},{\"../globals\":24}],9:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  def: groupdef\n};\n\nfunction groupdef(name, opt) {\n  opt = opt || {};\n  return {\n    _name: name || undefined,\n    type: 'group',\n    from: opt.from,\n    properties: {\n      enter: {\n        x: opt.x || undefined,\n        y: opt.y || undefined,\n        width: opt.width || {group: 'width'},\n        height: opt.height || {group: 'height'}\n      }\n    },\n    scales: opt.scales || undefined,\n    axes: opt.axes || undefined,\n    marks: opt.marks || []\n  };\n}\n\n},{}],10:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  setter = util.setter,\n  schema = require('../schema/schema'),\n  time = require('./time'),\n  vlfield = require('../field');\n\nmodule.exports = vllayout;\n\nfunction vllayout(encoding, stats) {\n  var layout = box(encoding, stats);\n  layout = offset(encoding, stats, layout);\n  return layout;\n}\n\n/*\n  HACK to set chart size\n  NOTE: this fails for plots driven by derived values (e.g., aggregates)\n  One solution is to update Vega to support auto-sizing\n  In the meantime, auto-padding (mostly) does the trick\n */\nfunction box(encoding, stats) {\n  var hasRow = encoding.has(ROW),\n      hasCol = encoding.has(COL),\n      hasX = encoding.has(X),\n      hasY = encoding.has(Y),\n      marktype = encoding.marktype();\n\n  // FIXME/HACK we need to take filter into account\n  var xCardinality = hasX && encoding.isDimension(X) ? encoding.cardinality(X, stats) : 1,\n    yCardinality = hasY && encoding.isDimension(Y) ? encoding.cardinality(Y, stats) : 1;\n\n  var useSmallBand = xCardinality > encoding.config('largeBandMaxCardinality') ||\n    yCardinality > encoding.config('largeBandMaxCardinality');\n\n  var cellWidth, cellHeight, cellPadding = encoding.config('cellPadding');\n\n  // set cellWidth\n  if (hasX) {\n    if (encoding.isOrdinalScale(X)) {\n      // for ordinal, hasCol or not doesn't matter -- we scale based on cardinality\n      cellWidth = (xCardinality + encoding.band(X).padding) * encoding.bandSize(X, useSmallBand);\n    } else {\n      cellWidth = hasCol || hasRow ? encoding.enc(COL).width :  encoding.config(\"singleWidth\");\n    }\n  } else {\n    if (marktype === TEXT) {\n      cellWidth = encoding.config('textCellWidth');\n    } else {\n      cellWidth = encoding.bandSize(X);\n    }\n  }\n\n  // set cellHeight\n  if (hasY) {\n    if (encoding.isOrdinalScale(Y)) {\n      // for ordinal, hasCol or not doesn't matter -- we scale based on cardinality\n      cellHeight = (yCardinality + encoding.band(Y).padding) * encoding.bandSize(Y, useSmallBand);\n    } else {\n      cellHeight = hasCol || hasRow ? encoding.enc(ROW).height :  encoding.config(\"singleHeight\");\n    }\n  } else {\n    cellHeight = encoding.bandSize(Y);\n  }\n\n  // Cell bands use rangeBands(). There are n-1 padding.  Outerpadding = 0 for cells\n\n  var width = cellWidth, height = cellHeight;\n  if (hasCol) {\n    var colCardinality = encoding.cardinality(COL, stats);\n    width = cellWidth * ((1 + cellPadding) * (colCardinality - 1) + 1);\n  }\n  if (hasRow) {\n    var rowCardinality =  encoding.cardinality(ROW, stats);\n    height = cellHeight * ((1 + cellPadding) * (rowCardinality - 1) + 1);\n  }\n\n  return {\n    // width and height of the whole cell\n    cellWidth: cellWidth,\n    cellHeight: cellHeight,\n    cellPadding: cellPadding,\n    // width and height of the chart\n    width: width,\n    height: height,\n    // information about x and y, such as band size\n    x: {useSmallBand: useSmallBand},\n    y: {useSmallBand: useSmallBand}\n  };\n}\n\nfunction offset(encoding, stats, layout) {\n  [X, Y].forEach(function (x) {\n    var maxLength;\n    if (encoding.isDimension(x) || encoding.isType(x, T)) {\n      maxLength = stats[encoding.fieldName(x)].maxlength;\n    } else if (encoding.aggr(x) === 'count') {\n      //assign default value for count as it won't have stats\n      maxLength =  3;\n    } else if (encoding.isType(x, Q)) {\n      if (x===X) {\n        maxLength = 3;\n      } else { // Y\n        //assume that default formating is always shorter than 7\n        maxLength = Math.min(stats[encoding.fieldName(x)].maxlength, 7);\n      }\n    }\n    setter(layout,[x, 'axisTitleOffset'], encoding.config('characterWidth') *  maxLength + 20);\n  });\n  return layout;\n}\n\n},{\"../field\":23,\"../globals\":24,\"../schema/schema\":25,\"../util\":27,\"./time\":19}],11:[function(require,module,exports){\n'use strict';\n\nvar global = require('../globals'),\n  time = require('./time');\n\nvar legend = module.exports = {};\n\nlegend.defs = function(encoding) {\n  var defs = [];\n\n  // TODO: support alpha\n\n  if (encoding.has(COLOR) && encoding.legend(COLOR)) {\n    defs.push(legend.def(COLOR, encoding, {\n      fill: COLOR,\n      orient: 'right'\n    }));\n  }\n\n  if (encoding.has(SIZE) && encoding.legend(SIZE)) {\n    defs.push(legend.def(SIZE, encoding, {\n      size: SIZE,\n      orient: defs.length === 1 ? 'left' : 'right'\n    }));\n  }\n\n  if (encoding.has(SHAPE) && encoding.legend(SHAPE)) {\n    if (defs.length === 2) {\n      // TODO: fix this\n      console.error('Vegalite currently only supports two legends');\n      return defs;\n    }\n    defs.push(legend.def(SHAPE, encoding, {\n      shape: SHAPE,\n      orient: defs.length === 1 ? 'left' : 'right'\n    }));\n  }\n\n  return defs;\n};\n\nlegend.def = function(name, encoding, props) {\n  var def = props, fn;\n\n  def.title = encoding.fieldTitle(name);\n\n  if (encoding.isType(name, T) && (fn = encoding.fn(name)) &&\n    time.hasScale(fn)) {\n    var properties = def.properties = def.properties || {},\n      labels = properties.labels = properties.labels || {},\n      text = labels.text = labels.text || {};\n\n    text.scale = 'time-'+ fn;\n  }\n\n  return def;\n};\n\n},{\"../globals\":24,\"./time\":19}],12:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  vlscale = require('./scale');\n\nvar marks = module.exports = {};\n\nmarks.def = function(mark, encoding, layout, style) {\n  var defs = [];\n\n  // to add a background to text, we need to add it before the text\n  if (encoding.marktype() === TEXT && encoding.has(COLOR)) {\n    var bg = {\n      x: {value: 0},\n      y: {value: 0},\n      x2: {value: layout.cellWidth},\n      y2: {value: layout.cellHeight},\n      fill: {scale: COLOR, field: encoding.field(COLOR)}\n    };\n    defs.push({\n      type: 'rect',\n      from: {data: TABLE},\n      properties: {enter: bg, update: bg}\n    });\n  }\n\n  // add the mark def for the main thing\n  var p = mark.prop(encoding, layout, style);\n  defs.push({\n    type: mark.type,\n    from: {data: TABLE},\n    properties: {enter: p, update: p}\n  });\n\n  return defs;\n};\n\nmarks.bar = {\n  type: 'rect',\n  stack: true,\n  prop: bar_props,\n  requiredEncoding: ['x', 'y'],\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, size: 1, color: 1, alpha: 1}\n};\n\nmarks.line = {\n  type: 'line',\n  line: true,\n  prop: line_props,\n  requiredEncoding: ['x', 'y'],\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, color: 1, alpha: 1, detail:1}\n};\n\nmarks.area = {\n  type: 'area',\n  stack: true,\n  line: true,\n  requiredEncoding: ['x', 'y'],\n  prop: area_props,\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, color: 1, alpha: 1}\n};\n\nmarks.tick = {\n  type: 'rect',\n  prop: tick_props,\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, color: 1, alpha: 1, detail: 1}\n};\n\nmarks.circle = {\n  type: 'symbol',\n  prop: filled_point_props('circle'),\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, size: 1, color: 1, alpha: 1, detail: 1}\n};\n\nmarks.square = {\n  type: 'symbol',\n  prop: filled_point_props('square'),\n  supportedEncoding: marks.circle.supportedEncoding\n};\n\nmarks.point = {\n  type: 'symbol',\n  prop: point_props,\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, size: 1, color: 1, alpha: 1, shape: 1, detail: 1}\n};\n\nmarks.text = {\n  type: 'text',\n  prop: text_props,\n  requiredEncoding: ['text'],\n  supportedEncoding: {row: 1, col: 1, size: 1, color: 1, alpha: 1, text: 1}\n};\n\nfunction bar_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.isMeasure(X)) {\n    p.x = {scale: X, field: e.field(X)};\n    if (e.isDimension(Y)) {\n      p.x2 = {scale: X, value: e.scale(X).type === 'log' ? 1 : 0};\n    }\n  } else if (e.has(X)) { // is ordinal\n    p.xc = {scale: X, field: e.field(X)};\n  } else {\n    // TODO add single bar offset\n    p.xc = {value: 0};\n  }\n\n  // y\n  if (e.isMeasure(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n    p.y2 = {scale: Y, value: e.scale(Y).type === 'log' ? 1 : 0};\n  } else if (e.has(Y)) { // is ordinal\n    p.yc = {scale: Y, field: e.field(Y)};\n  } else {\n    // TODO add single bar offset\n    p.yc = {group: 'height'};\n  }\n\n  // width\n  if (!e.has(X) || e.isOrdinalScale(X)) { // no X or X is ordinal\n    if (e.has(SIZE)) {\n      p.width = {scale: SIZE, field: e.field(SIZE)};\n    } else {\n      p.width = {\n        value: e.bandSize(X, layout.x.useSmallBand),\n        offset: -1\n      };\n    }\n  } else { // X is Quant or Time Scale\n    p.width = {value: 2};\n  }\n\n  // height\n  if (!e.has(Y) || e.isOrdinalScale(Y)) { // no Y or Y is ordinal\n    if (e.has(SIZE)) {\n      p.height = {scale: SIZE, field: e.field(SIZE)};\n    } else {\n      p.height = {\n        value: e.bandSize(Y, layout.y.useSmallBand),\n        offset: -1\n      };\n    }\n  } else { // Y is Quant or Time Scale\n    p.height = {value: 2};\n  }\n\n  // fill\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else {\n    p.fill = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  }\n\n  return p;\n}\n\nfunction point_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    p.x = {value: e.bandSize(X, layout.x.useSmallBand) / 2};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {value: e.bandSize(Y, layout.y.useSmallBand) / 2};\n  }\n\n  // size\n  if (e.has(SIZE)) {\n    p.size = {scale: SIZE, field: e.field(SIZE)};\n  } else if (!e.has(SIZE)) {\n    p.size = {value: e.value(SIZE)};\n  }\n\n  // shape\n  if (e.has(SHAPE)) {\n    p.shape = {scale: SHAPE, field: e.field(SHAPE)};\n  } else if (!e.has(SHAPE)) {\n    p.shape = {value: e.value(SHAPE)};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.stroke = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.stroke = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  } else if (!e.has(COLOR)) {\n    p.opacity = {value: style.opacity};\n  }\n\n  p.strokeWidth = {value: e.config('strokeWidth')};\n\n  return p;\n}\n\nfunction line_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    p.x = {value: 0};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {group: 'height'};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.stroke = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.stroke = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  }\n\n  p.strokeWidth = {value: e.config('strokeWidth')};\n\n  return p;\n}\n\nfunction area_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.isMeasure(X)) {\n    p.x = {scale: X, field: e.field(X)};\n    if (e.isDimension(Y)) {\n      p.x2 = {scale: X, value: 0};\n      p.orient = {value: 'horizontal'};\n    }\n  } else if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else {\n    p.x = {value: 0};\n  }\n\n  // y\n  if (e.isMeasure(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n    p.y2 = {scale: Y, value: 0};\n  } else if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else {\n    p.y = {group: 'height'};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.fill = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  }\n\n  return p;\n}\n\nfunction tick_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n    if (e.isDimension(X)) {\n      p.x.offset = -e.bandSize(X, layout.x.useSmallBand) / 3;\n    }\n  } else if (!e.has(X)) {\n    p.x = {value: 0};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n    if (e.isDimension(Y)) {\n      p.y.offset = -e.bandSize(Y, layout.y.useSmallBand) / 3;\n    }\n  } else if (!e.has(Y)) {\n    p.y = {value: 0};\n  }\n\n  // width\n  if (!e.has(X) || e.isDimension(X)) {\n    p.width = {value: e.bandSize(X, layout.y.useSmallBand) / 1.5};\n  } else {\n    p.width = {value: 1};\n  }\n\n  // height\n  if (!e.has(Y) || e.isDimension(Y)) {\n    p.height = {value: e.bandSize(Y, layout.y.useSmallBand) / 1.5};\n  } else {\n    p.height = {value: 1};\n  }\n\n  // fill\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else {\n    p.fill = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  } else if (!e.has(COLOR)) {\n    p.opacity = {value: style.opacity};\n  }\n\n  return p;\n}\n\nfunction filled_point_props(shape) {\n  return function(e, layout, style) {\n    var p = {};\n\n    // x\n    if (e.has(X)) {\n      p.x = {scale: X, field: e.field(X)};\n    } else if (!e.has(X)) {\n      p.x = {value: e.bandSize(X, layout.x.useSmallBand) / 2};\n    }\n\n    // y\n    if (e.has(Y)) {\n      p.y = {scale: Y, field: e.field(Y)};\n    } else if (!e.has(Y)) {\n      p.y = {value: e.bandSize(Y, layout.y.useSmallBand) / 2};\n    }\n\n    // size\n    if (e.has(SIZE)) {\n      p.size = {scale: SIZE, field: e.field(SIZE)};\n    } else if (!e.has(X)) {\n      p.size = {value: e.value(SIZE)};\n    }\n\n    // shape\n    p.shape = {value: shape};\n\n    // fill\n    if (e.has(COLOR)) {\n      p.fill = {scale: COLOR, field: e.field(COLOR)};\n    } else if (!e.has(COLOR)) {\n      p.fill = {value: e.value(COLOR)};\n    }\n\n    // alpha\n    if (e.has(ALPHA)) {\n      p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n    } else if (e.value(ALPHA) !== undefined) {\n      p.opacity = {value: e.value(ALPHA)};\n    } else if (!e.has(COLOR)) {\n      p.opacity = {value: style.opacity};\n    }\n\n    return p;\n  };\n}\n\nfunction text_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    if (e.has(TEXT) && e.isType(TEXT, Q)) {\n      p.x = {value: layout.cellWidth-5};\n    } else {\n      p.x = {value: e.bandSize(X, layout.x.useSmallBand) / 2};\n    }\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {value: e.bandSize(Y, layout.y.useSmallBand) / 2};\n  }\n\n  // size\n  if (e.has(SIZE)) {\n    p.fontSize = {scale: SIZE, field: e.field(SIZE)};\n  } else if (!e.has(SIZE)) {\n    p.fontSize = {value: e.font('size')};\n  }\n\n  // fill\n  // color should be set to background\n  p.fill = {value: 'black'};\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  } else {\n    p.opacity = {value: style.opacity};\n  }\n\n  // text\n  if (e.has(TEXT)) {\n    if (e.isType(TEXT, Q)) {\n      p.text = {template: \"{{\" + e.field(TEXT) + \" | number:'.3s'}}\"};\n      p.align = {value: 'right'};\n    } else {\n      p.text = {field: e.field(TEXT)};\n    }\n  } else {\n    p.text = {value: 'Abc'};\n  }\n\n  p.font = {value: e.font('family')};\n  p.fontWeight = {value: e.font('weight')};\n  p.fontStyle = {value: e.font('style')};\n  p.baseline = {value: e.text('baseline')};\n\n  return p;\n}\n\n},{\"../globals\":24,\"../util\":27,\"./scale\":13}],13:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  time = require('./time');\n\nvar scale = module.exports = {};\n\nscale.names = function(props) {\n  return util.keys(util.keys(props).reduce(function(a, x) {\n    if (props[x] && props[x].scale) a[props[x].scale] = 1;\n    return a;\n  }, {}));\n};\n\nscale.defs = function(names, encoding, layout, style, sorting, opt) {\n  opt = opt || {};\n\n  return names.reduce(function(a, name) {\n    var s = {\n      name: name,\n      type: scale.type(name, encoding),\n      domain: scale_domain(name, encoding, sorting, opt)\n    };\n    if (s.type === 'ordinal' && !encoding.bin(name) && encoding.sort(name).length === 0) {\n      s.sort = true;\n    }\n\n    scale_range(s, encoding, layout, style, opt);\n\n    return (a.push(s), a);\n  }, []);\n};\n\nscale.type = function(name, encoding) {\n\n  switch (encoding.type(name)) {\n    case O: return 'ordinal';\n    case T:\n      var fn = encoding.fn(name);\n      return (fn && time.scale.type(fn, name)) || 'time';\n    case Q:\n      if (encoding.bin(name)) {\n        return name === COLOR ? 'linear' : 'ordinal';\n      }\n      return encoding.scale(name).type;\n  }\n};\n\nfunction scale_domain(name, encoding, sorting, opt) {\n  if (encoding.isType(name, T)) {\n    var range = time.scale.domain(encoding.fn(name), name);\n    if(range) return range;\n  }\n\n  if (encoding.bin(name)) {\n    // TODO: add includeEmptyConfig here\n    if (opt.stats) {\n      var bins = util.getbins(opt.stats[encoding.fieldName(name)], encoding.bin(name).maxbins);\n      var domain = util.range(bins.start, bins.stop, bins.step);\n      return name === Y ? domain.reverse() : domain;\n    }\n  }\n\n  return name == opt.stack ?\n    {\n      data: STACKED,\n      field: 'data.' + (opt.facet ? 'max_' : '') + 'sum_' + encoding.field(name, true)\n    } :\n    {data: sorting.getDataset(name), field: encoding.field(name)};\n}\n\nfunction scale_range(s, encoding, layout, style, opt) {\n  var spec = encoding.scale(s.name);\n  switch (s.name) {\n    case X:\n      if (s.type === 'ordinal') {\n        s.bandWidth = encoding.bandSize(X, layout.x.useSmallBand);\n      } else {\n        s.range = layout.cellWidth ? [0, layout.cellWidth] : 'width';\n\n        if (encoding.isType(s.name,T) && encoding.fn(s.name) === 'year') {\n          s.zero = false;\n        } else {\n          s.zero = spec.zero === undefined ? true : spec.zero;\n        }\n\n        s.reverse = spec.reverse;\n      }\n      s.round = true;\n      if (s.type === 'time') {\n        s.nice = encoding.fn(s.name);\n      }else {\n        s.nice = true;\n      }\n      break;\n    case Y:\n      if (s.type === 'ordinal') {\n        s.bandWidth = encoding.bandSize(Y, layout.y.useSmallBand);\n      } else {\n        s.range = layout.cellHeight ? [layout.cellHeight, 0] : 'height';\n\n        if (encoding.isType(s.name,T) && encoding.fn(s.name) === 'year') {\n          s.zero = false;\n        } else {\n          s.zero = spec.zero === undefined ? true : spec.zero;\n        }\n\n        s.reverse = spec.reverse;\n      }\n\n      s.round = true;\n\n      if (s.type === 'time') {\n        s.nice = encoding.fn(s.name) || encoding.config('timeScaleNice');\n      }else {\n        s.nice = true;\n      }\n      break;\n    case ROW: // support only ordinal\n      s.bandWidth = layout.cellHeight;\n      s.round = true;\n      s.nice = true;\n      break;\n    case COL: // support only ordinal\n      s.bandWidth = layout.cellWidth;\n      s.round = true;\n      s.nice = true;\n      break;\n    case SIZE:\n      if (encoding.is('bar')) {\n        // FIXME this is definitely incorrect\n        // but let's fix it later since bar size is a bad encoding anyway\n        s.range = [3, Math.max(encoding.bandSize(X), encoding.bandSize(Y))];\n      } else if (encoding.is(TEXT)) {\n        s.range = [8, 40];\n      } else { //point\n        var bandSize = Math.min(encoding.bandSize(X), encoding.bandSize(Y)) - 1;\n        s.range = [10, 0.8 * bandSize*bandSize];\n      }\n      s.round = true;\n      s.zero = false;\n      break;\n    case SHAPE:\n      s.range = 'shapes';\n      break;\n    case COLOR:\n      var range = encoding.scale(COLOR).range;\n      if (range === undefined) {\n        if (s.type === 'ordinal') {\n          // FIXME\n          range = style.colorRange;\n        } else {\n          range = ['#A9DB9F', '#0D5C21'];\n          s.zero = false;\n        }\n      }\n      s.range = range;\n      break;\n    case ALPHA:\n      s.range = [0.2, 1.0];\n      break;\n    default:\n      throw new Error('Unknown encoding name: '+ s.name);\n  }\n\n  switch (s.name) {\n    case ROW:\n    case COL:\n      s.padding = encoding.config('cellPadding');\n      s.outerPadding = 0;\n      break;\n    case X:\n    case Y:\n      if (s.type === 'ordinal') { //&& !s.bandWidth\n        s.points = true;\n        s.padding = encoding.band(s.name).padding;\n      }\n  }\n}\n\n},{\"../globals\":24,\"../util\":27,\"./time\":19}],14:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals');\n\nmodule.exports = addSortTransforms;\n\n// adds new transforms that produce sorted fields\nfunction addSortTransforms(spec, encoding, stats, opt) {\n  var datasetMapping = {};\n  var counter = 0;\n\n  encoding.forEach(function(field, encType) {\n    var sortBy = encoding.sort(encType, stats);\n    if (sortBy.length > 0) {\n      var fields = sortBy.map(function(d) {\n        return {\n          op: d.aggr,\n          field: 'data.' + d.name\n        };\n      });\n\n      var byClause = sortBy.map(function(d) {\n        var reverse = (d.reverse ? '-' : '');\n        return reverse + 'data.' + (d.aggr==='count' ? 'count' : (d.aggr + '_' + d.name));\n      });\n\n      var dataName = 'sorted' + counter++;\n\n      var transforms = [\n        {\n          type: 'aggregate',\n          groupby: ['data.' + field.name],\n          fields: fields\n        },\n        {\n          type: 'sort',\n          by: byClause\n        }\n      ];\n\n      spec.data.push({\n        name: dataName,\n        source: RAW,\n        transform: transforms\n      });\n\n      datasetMapping[encType] = dataName;\n    }\n  });\n\n  return {\n    spec: spec,\n    getDataset: function(encType) {\n      var data = datasetMapping[encType];\n      if (!data) {\n        return TABLE;\n      }\n      return data;\n    }\n  };\n}\n\n},{\"../globals\":24}],15:[function(require,module,exports){\n\"use strict\";\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  marks = require('./marks');\n\nmodule.exports = stacking;\n\nfunction stacking(spec, encoding, mdef, facets) {\n  if (!marks[encoding.marktype()].stack) return false;\n\n  // TODO: add || encoding.has(LOD) here once LOD is implemented\n  if (!encoding.has(COLOR)) return false;\n\n  var dim=null, val=null, idx =null,\n    isXMeasure = encoding.isMeasure(X),\n    isYMeasure = encoding.isMeasure(Y);\n\n  if (isXMeasure && !isYMeasure) {\n    dim = Y;\n    val = X;\n    idx = 0;\n  } else if (isYMeasure && !isXMeasure) {\n    dim = X;\n    val = Y;\n    idx = 1;\n  } else {\n    return null; // no stack encoding\n  }\n\n  // add transform to compute sums for scale\n  var stacked = {\n    name: STACKED,\n    source: TABLE,\n    transform: [{\n      type: 'aggregate',\n      groupby: [encoding.field(dim)].concat(facets), // dim and other facets\n      fields: [{op: 'sum', field: encoding.field(val)}] // TODO check if field with aggr is correct?\n    }]\n  };\n\n  if (facets && facets.length > 0) {\n    stacked.transform.push({ //calculate max for each facet\n      type: 'aggregate',\n      groupby: facets,\n      fields: [{op: 'max', field: 'data.sum_' + encoding.field(val, true)}]\n    });\n  }\n\n  spec.data.push(stacked);\n\n  // add stack transform to mark\n  mdef.from.transform = [{\n    type: 'stack',\n    point: encoding.field(dim),\n    height: encoding.field(val),\n    output: {y1: val, y0: val + '2'}\n  }];\n\n  // TODO: This is super hack-ish -- consolidate into modular mark properties?\n  mdef.properties.update[val] = mdef.properties.enter[val] = {scale: val, field: val};\n  mdef.properties.update[val + '2'] = mdef.properties.enter[val + '2'] = {scale: val, field: val + '2'};\n\n  return val; //return stack encoding\n}\n\n},{\"../globals\":24,\"../util\":27,\"./marks\":12}],16:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  vlfield = require('../field'),\n  Encoding = require('../Encoding');\n\nmodule.exports = function(encoding, stats) {\n  return {\n    opacity: estimateOpacity(encoding, stats),\n    colorRange: colorRange(encoding, stats)\n  };\n};\n\nfunction colorRange(encoding, stats){\n  if (encoding.has(COLOR) && encoding.isDimension(COLOR)) {\n    var cardinality = encoding.cardinality(COLOR, stats);\n    if (cardinality <= 10) {\n      return \"category10\";\n    } else {\n      return \"category20\";\n    }\n    // TODO can vega interpolate range for ordinal scale?\n  }\n  return null;\n}\n\nfunction estimateOpacity(encoding,stats) {\n  if (!stats) {\n    return 1;\n  }\n\n  var numPoints = 0;\n\n  if (encoding.isAggregate()) { // aggregate plot\n    numPoints = 1;\n\n    //  get number of points in each \"cell\"\n    //  by calculating product of cardinality\n    //  for each non faceting and non-ordinal X / Y fields\n    //  note that ordinal x,y are not include since we can\n    //  consider that ordinal x are subdividing the cell into subcells anyway\n    encoding.forEach(function(field, encType) {\n\n      if (encType !== ROW && encType !== COL &&\n          !((encType === X || encType === Y) &&\n          vlfield.isOrdinalScale(field, true))\n        ) {\n        numPoints *= encoding.cardinality(encType, stats);\n      }\n    });\n\n  } else { // raw plot\n    numPoints = stats.count;\n\n    // small multiples divide number of points\n    var numMultiples = 1;\n    if (encoding.has(ROW)) {\n      numMultiples *= encoding.cardinality(ROW, stats);\n    }\n    if (encoding.has(COL)) {\n      numMultiples *= encoding.cardinality(COL, stats);\n    }\n    numPoints /= numMultiples;\n  }\n\n  var opacity = 0;\n  if (numPoints < 20) {\n    opacity = 1;\n  } else if (numPoints < 200) {\n    opacity = 0.7;\n  } else if (numPoints < 1000 || encoding.is('tick')) {\n    opacity = 0.6;\n  } else {\n    opacity = 0.3;\n  }\n\n  return opacity;\n}\n\n\n},{\"../Encoding\":2,\"../field\":23,\"../globals\":24,\"../util\":27}],17:[function(require,module,exports){\n'use strict';\n\nvar global = require('../globals');\n\nvar groupdef = require('./group').def;\n\nmodule.exports = subfaceting;\n\nfunction subfaceting(group, mdef, details, stack, encoding) {\n  var m = group.marks,\n    g = groupdef('subfacet', {marks: m});\n\n  group.marks = [g];\n  g.from = mdef.from;\n  delete mdef.from;\n\n  //TODO test LOD -- we should support stack / line without color (LOD) field\n  var trans = (g.from.transform || (g.from.transform = []));\n  trans.unshift({type: 'facet', keys: details});\n\n  if (stack && encoding.has(COLOR)) {\n    trans.unshift({type: 'sort', by: encoding.field(COLOR)});\n  }\n}\n\n},{\"../globals\":24,\"./group\":9}],18:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals');\n\nvar groupdef = require('./group').def,\n  vldata = require('../data');\n\nmodule.exports = template;\n\nfunction template(encoding, layout, stats) { //hack use stats\n\n  var data = {name: RAW, format: {type: encoding.data('formatType')}},\n    table = {name: TABLE, source: RAW},\n    dataUrl = vldata.getUrl(encoding, stats);\n  if (dataUrl) data.url = dataUrl;\n\n  var preaggregatedData = !!encoding.data('vegaServer');\n\n  encoding.forEach(function(field, encType) {\n    var name;\n    if (field.type == T) {\n      data.format.parse = data.format.parse || {};\n      data.format.parse[field.name] = 'date';\n    } else if (field.type == Q) {\n      data.format.parse = data.format.parse || {};\n      if (field.aggr === 'count') {\n        name = 'count';\n      } else if (preaggregatedData && field.bin) {\n        name = 'bin_' + field.name;\n      } else if (preaggregatedData && field.aggr) {\n        name = field.aggr + '_' + field.name;\n      } else {\n        name = field.name;\n      }\n      data.format.parse[name] = 'number';\n    }\n  });\n\n  return {\n    width: layout.width,\n    height: layout.height,\n    padding: 'auto',\n    data: [data, table],\n    marks: [groupdef('cell', {\n      width: layout.cellWidth ? {value: layout.cellWidth} : undefined,\n      height: layout.cellHeight ? {value: layout.cellHeight} : undefined\n    })]\n  };\n}\n\n},{\"../data\":21,\"../globals\":24,\"./group\":9}],19:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util');\n\nmodule.exports = time;\n\nfunction time(spec, encoding, opt) {\n  var timeFields = {}, timeFn = {};\n\n  // find unique formula transformation and bin function\n  encoding.forEach(function(field, encType) {\n    if (field.type === T && field.fn) {\n      timeFields[encoding.field(encType)] = {\n        field: field,\n        encType: encType\n      };\n      timeFn[field.fn] = true;\n    }\n  });\n\n  // add formula transform\n  var data = spec.data[1],\n    transform = data.transform = data.transform || [];\n\n  for (var f in timeFields) {\n    var tf = timeFields[f];\n    time.transform(transform, encoding, tf.encType, tf.field);\n  }\n\n  // add scales\n  var scales = spec.scales = spec.scales || [];\n  for (var fn in timeFn) {\n    time.scale(scales, fn, encoding);\n  }\n  return spec;\n}\n\ntime.cardinality = function(field, stats, filterNull, type) {\n  var fn = field.fn;\n  switch (fn) {\n    case 'seconds': return 60;\n    case 'minutes': return 60;\n    case 'hours': return 24;\n    case 'day': return 7;\n    case 'date': return 31;\n    case 'month': return 12;\n    case 'year':\n      var stat = stats[field.name],\n        yearstat = stats['year_'+field.name];\n\n      if (!yearstat) { return null; }\n\n      return yearstat.cardinality -\n        (stat.numNulls > 0 && filterNull[type] ? 1 : 0);\n  }\n\n  return null;\n};\n\nfunction fieldFn(func, field) {\n  return 'utc' + func + '(d.data.'+ field.name +')';\n}\n\n/**\n * @return {String} date binning formula of the given field\n */\ntime.formula = function(field) {\n  return fieldFn(field.fn, field);\n};\n\n/** add formula transforms to data */\ntime.transform = function(transform, encoding, encType, field) {\n  transform.push({\n    type: 'formula',\n    field: encoding.field(encType),\n    expr: time.formula(field)\n  });\n};\n\n/** append custom time scales for axis label */\ntime.scale = function(scales, fn, encoding) {\n  var labelLength = encoding.config('timeScaleLabelLength');\n  // TODO add option for shorter scale / custom range\n  switch (fn) {\n    case 'day':\n      scales.push({\n        name: 'time-'+fn,\n        type: 'ordinal',\n        domain: util.range(0, 7),\n        range: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'].map(\n          function(s) { return s.substr(0, labelLength);}\n        )\n      });\n      break;\n    case 'month':\n      scales.push({\n        name: 'time-'+fn,\n        type: 'ordinal',\n        domain: util.range(0, 12),\n        range: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'].map(\n            function(s) { return s.substr(0, labelLength);}\n          )\n      });\n      break;\n  }\n};\n\ntime.isOrdinalFn = function(fn) {\n  switch (fn) {\n    case 'seconds':\n    case 'minutes':\n    case 'hours':\n    case 'day':\n    case 'date':\n    case 'month':\n      return true;\n  }\n  return false;\n};\n\ntime.scale.type = function(fn, name) {\n  if (name === COLOR) {\n    return 'linear'; // this has order\n  }\n\n  return time.isOrdinalFn(fn) || name === COL || name === ROW ? 'ordinal' : 'linear';\n};\n\ntime.scale.domain = function(fn, name) {\n  var isColor = name === COLOR;\n  switch (fn) {\n    case 'seconds':\n    case 'minutes': return isColor ? [0,59] : util.range(0, 60);\n    case 'hours': return isColor ? [0,23] : util.range(0, 24);\n    case 'day': return isColor ? [0,6] : util.range(0, 7);\n    case 'date': return isColor ? [1,31] : util.range(1, 32);\n    case 'month': return isColor ? [0,11] : util.range(0, 12);\n  }\n  return null;\n};\n\n/** whether a particular time function has custom scale for labels implemented in time.scale */\ntime.hasScale = function(fn) {\n  switch (fn) {\n    case 'day':\n    case 'month':\n      return true;\n  }\n  return false;\n};\n\n\n\n},{\"../globals\":24,\"../util\":27}],20:[function(require,module,exports){\n'use strict';\n\nvar globals = require('./globals');\n\nvar consts = module.exports = {};\n\nconsts.encodingTypes = [X, Y, ROW, COL, SIZE, SHAPE, COLOR, ALPHA, TEXT, DETAIL];\n\nconsts.dataTypes = {'O': O, 'Q': Q, 'T': T};\n\nconsts.dataTypeNames = ['O', 'Q', 'T'].reduce(function(r, x) {\n  r[consts.dataTypes[x]] = x;\n  return r;\n},{});\n\nconsts.shorthand = {\n  delim:  '|',\n  assign: '=',\n  type:   ',',\n  func:   '_'\n};\n\n},{\"./globals\":24}],21:[function(require,module,exports){\n'use strict';\n\n// TODO: rename getDataUrl to vl.data.getUrl() ?\n\nvar util = require('./util');\n\nvar vldata = module.exports = {},\n  vlfield = require('./field');\n\nvldata.getUrl = function getDataUrl(encoding, stats) {\n  if (!encoding.data('vegaServer')) {\n    // don't use vega server\n    return encoding.data('url');\n  }\n\n  if (encoding.length() === 0) {\n    // no fields\n    return;\n  }\n\n  var fields = [];\n  encoding.forEach(function(field, encType) {\n    var obj = {\n      name: encoding.field(encType, true),\n      field: field.name\n    };\n    if (field.aggr) {\n      obj.aggr = field.aggr;\n    }\n    if (field.bin) {\n      obj.binSize = util.getbins(stats[field.name], encoding.bin(encType).maxbins).step;\n    }\n    fields.push(obj);\n  });\n\n  var query = {\n    table: encoding.data('vegaServer').table,\n    fields: fields\n  };\n\n  return encoding.data('vegaServer').url + '/query/?q=' + JSON.stringify(query);\n};\n\n/**\n * @param  {Object} data data in JSON/javascript object format\n * @return Array of {name: __name__, type: \"number|text|time|location\"}\n */\nvldata.getSchema = function(data, order) {\n  var schema = [],\n    fields = util.keys(data[0]);\n\n  fields.forEach(function(k) {\n    // find non-null data\n    var i = 0, datum = data[i][k];\n    while (datum === '' || datum === null || datum === undefined) {\n      datum = data[++i][k];\n      if (i >= data.length) {\n        datum = '';\n        break;\n      }\n    }\n\n    datum = util.parse(datum);\n    var type = (typeof datum === 'number') ? 'Q':\n      (datum instanceof Date) ? 'T' : 'O';\n\n    schema.push({name: k, type: type});\n  });\n\n  schema = util.stablesort(schema, order || vlfield.order.typeThenName, vlfield.order.name);\n\n  return schema;\n};\n\nvldata.getStats = function(data) { // hack\n  var stats = {},\n    fields = util.keys(data[0]);\n\n  fields.forEach(function(k) {\n    var column = data.map(function(d) {return d[k];});\n\n    // Hack\n    var val = util.parse(data[0][k]);\n    var type = (typeof val === 'number') ? 'Q':\n      (val instanceof Date) ? 'T' : 'O';\n\n    var stat = {};\n    if (typeof val === 'number') {\n      stat = util.minmax(util.numbers(column));\n    } else if (val instanceof Date) {\n      stat = util.minmax(util.dates(column));\n    } else {\n      stat = util.minmax(column);\n    }\n\n    stat.cardinality = util.uniq(data, k);\n    stat.count = data.length;\n\n    stat.maxlength = data.reduce(function(max,row) {\n      if (row[k] === null) {\n        return max;\n      }\n      var len = row[k].toString().length;\n      return len > max ? len : max;\n    }, 0);\n\n    stat.numNulls = data.reduce(function(count, row) {\n      return row[k] === null ? count + 1 : count;\n    }, 0);\n\n    var numbers = util.numbers(column);\n\n    if (numbers.length > 0) {\n      stat.skew = util.skew(numbers);\n      stat.stdev = util.stdev(numbers);\n      stat.mean = util.mean(numbers);\n      stat.median = util.median(numbers);\n    }\n\n    var sample = {};\n    while(Object.keys(sample).length < Math.min(stat.cardinality, 10)) {\n      var value = data[Math.floor(Math.random() * data.length)][k];\n      sample[value] = true;\n    }\n    stat.sample = Object.keys(sample);\n\n    stats[k] = stat;\n  });\n  stats.count = data.length;\n  return stats;\n};\n\n},{\"./field\":23,\"./util\":27}],22:[function(require,module,exports){\n// utility for enc\n\n'use strict';\n\nvar consts = require('./consts'),\n  c = consts.shorthand,\n  time = require('./compile/time'),\n  vlfield = require('./field'),\n  util = require('./util'),\n  schema = require('./schema/schema'),\n  encTypes = schema.encTypes;\n\nvar vlenc = module.exports = {};\n\nvlenc.countRetinal = function(enc) {\n  var count = 0;\n  if (enc.color) count++;\n  if (enc.alpha) count++;\n  if (enc.size) count++;\n  if (enc.shape) count++;\n  return count;\n};\n\nvlenc.has = function(enc, encType) {\n  var fieldDef = enc && enc[encType];\n  return fieldDef && fieldDef.name;\n};\n\nvlenc.isAggregate = function(enc) {\n  for (var k in enc) {\n    if (vlenc.has(enc, k) && enc[k].aggr) {\n      return true;\n    }\n  }\n  return false;\n};\n\nvlenc.forEach = function(enc, f) {\n  var i = 0;\n  encTypes.forEach(function(k) {\n    if (vlenc.has(enc, k)) {\n      f(enc[k], k, i++);\n    }\n  });\n};\n\nvlenc.map = function(enc, f) {\n  var arr = [];\n  encTypes.forEach(function(k) {\n    if (vlenc.has(enc, k)) {\n      arr.push(f(enc[k], k, enc));\n    }\n  });\n  return arr;\n};\n\nvlenc.reduce = function(enc, f, init) {\n  var r = init, i = 0, k;\n  encTypes.forEach(function(k) {\n    if (vlenc.has(enc, k)) {\n      r = f(r, enc[k], k,  enc);\n    }\n  });\n  return r;\n};\n\n/*\n * return key-value pairs of field name and list of fields of that field name\n */\nvlenc.fields = function(enc) {\n  return vlenc.reduce(enc, function (m, field, encType) {\n    var fieldList = m[field.name] = m[field.name] || [],\n      containsType = fieldList.containsType = fieldList.containsType || {};\n\n    if (fieldList.indexOf(field) === -1) {\n      fieldList.push(field);\n      // augment the array with containsType.Q / O / T\n      containsType[field.type] = true;\n    }\n    return m;\n  }, {});\n};\n\nvlenc.shorthand = function(enc) {\n  return vlenc.map(enc, function(field, et) {\n    return et + c.assign + vlfield.shorthand(field);\n  }).join(c.delim);\n};\n\nvlenc.fromShorthand = function(shorthand, convertType) {\n  var enc = util.isArray(shorthand) ? shorthand : shorthand.split(c.delim);\n  return enc.reduce(function(m, e) {\n    var split = e.split(c.assign),\n        enctype = split[0].trim(),\n        field = split[1];\n\n    m[enctype] = vlfield.fromShorthand(field, convertType);\n    return m;\n  }, {});\n};\n},{\"./compile/time\":19,\"./consts\":20,\"./field\":23,\"./schema/schema\":25,\"./util\":27}],23:[function(require,module,exports){\n'use strict';\n\n// utility for field\n\nvar consts = require('./consts'),\n  c = consts.shorthand,\n  time = require('./compile/time'),\n  util = require('./util'),\n  schema = require('./schema/schema');\n\nvar vlfield = module.exports = {};\n\nvlfield.shorthand = function(f) {\n  var c = consts.shorthand;\n  return (f.aggr ? f.aggr + c.func : '') +\n    (f.fn ? f.fn + c.func : '') +\n    (f.bin ? 'bin' + c.func : '') +\n    (f.name || '') + c.type +\n    (consts.dataTypeNames[f.type] || f.type);\n};\n\nvlfield.shorthands = function(fields, delim) {\n  delim = delim || c.delim;\n  return fields.map(vlfield.shorthand).join(delim);\n};\n\nvlfield.fromShorthand = function(shorthand, convertType) {\n  var split = shorthand.split(c.type), i;\n  var o = {\n    name: split[0].trim(),\n    type: convertType ? consts.dataTypes[split[1].trim()] : split[1].trim()\n  };\n\n  // check aggregate type\n  for (i in schema.aggr.enum) {\n    var a = schema.aggr.enum[i];\n    if (o.name.indexOf(a + '_') === 0) {\n      o.name = o.name.substr(a.length + 1);\n      if (a == 'count' && o.name.length === 0) o.name = '*';\n      o.aggr = a;\n      break;\n    }\n  }\n\n  // check time fn\n  for (i in schema.timefns) {\n    var f = schema.timefns[i];\n    if (o.name && o.name.indexOf(f + '_') === 0) {\n      o.name = o.name.substr(o.length + 1);\n      o.fn = f;\n      break;\n    }\n  }\n\n  // check bin\n  if (o.name && o.name.indexOf('bin_') === 0) {\n    o.name = o.name.substr(4);\n    o.bin = true;\n  }\n\n  return o;\n};\n\nvar typeOrder = {\n  O: 0,\n  G: 1,\n  T: 2,\n  Q: 3\n};\n\nvlfield.order = {};\n\nvlfield.order.type = function(field) {\n  if (field.aggr==='count') return 4;\n  return typeOrder[field.type];\n};\n\nvlfield.order.typeThenName = function(field) {\n  return vlfield.order.type(field) + '_' + field.name.toLowerCase();\n};\n\nvlfield.order.original = function() {\n  return 0; // no swap will occur\n};\n\nvlfield.order.name = function(field) {\n  return field.name;\n};\n\nvlfield.order.typeThenCardinality = function(field, stats){\n  return stats[field.name].cardinality;\n};\n\n// FIXME refactor\nvlfield.isType = function (fieldDef, type) {\n  return (fieldDef.type & type) > 0;\n};\n\nvlfield.isType.byCode = vlfield.isType;\n\nvlfield.isType.byName = function (field, type) {\n  return field.type === consts.dataTypeNames[type];\n};\n\n\nfunction getIsType(useTypeCode) {\n  return useTypeCode ? vlfield.isType.byCode : vlfield.isType.byName;\n}\n\nvlfield.isType.get = getIsType; //FIXME\n\n/*\n * Most fields that use ordinal scale are dimensions.\n * However, YEAR(T), YEARMONTH(T) use time scale, not ordinal but are dimensions too.\n */\nvlfield.isOrdinalScale = function(field, useTypeCode /*optional*/) {\n  var isType = getIsType(useTypeCode);\n  return  isType(field, O) || field.bin ||\n    ( isType(field, T) && field.fn && time.isOrdinalFn(field.fn) );\n};\n\nfunction isDimension(field, useTypeCode /*optional*/) {\n  var isType = getIsType(useTypeCode);\n  return  isType(field, O) || !!field.bin ||\n    ( isType(field, T) && !!field.fn );\n}\n\n/**\n * For encoding, use encoding.isDimension() to avoid confusion.\n * Or use Encoding.isType if your field is from Encoding (and thus have numeric data type).\n * otherwise, do not specific isType so we can use the default isTypeName here.\n */\nvlfield.isDimension = function(field, useTypeCode /*optional*/) {\n  return field && isDimension(field, useTypeCode);\n};\n\nvlfield.isMeasure = function(field, useTypeCode) {\n  return field && !isDimension(field, useTypeCode);\n};\n\nvlfield.role = function(field) {\n  return isDimension(field) ? 'dimension' : 'measure';\n};\n\nvlfield.count = function() {\n  return {name:'*', aggr: 'count', type:'Q', displayName: vlfield.count.displayName};\n};\n\nvlfield.count.displayName = 'Number of Records';\n\nvlfield.isCount = function(field) {\n  return field.aggr === 'count';\n};\n\n/**\n * For encoding, use encoding.cardinality() to avoid confusion.  Or use Encoding.isType if your field is from Encoding (and thus have numeric data type).\n * otherwise, do not specific isType so we can use the default isTypeName here.\n */\nvlfield.cardinality = function(field, stats, filterNull, useTypeCode) {\n  // FIXME need to take filter into account\n  var isType = getIsType(useTypeCode),\n    type = useTypeCode ? consts.dataTypeNames[field.type] : field.type;\n\n  filterNull = filterNull || {};\n\n  if (field.bin) {\n    var bins = util.getbins(stats[field.name], field.bin.maxbins || schema.MAXBINS_DEFAULT);\n    return (bins.stop - bins.start) / bins.step;\n  }\n  if (isType(field, T)) {\n    var cardinality = time.cardinality(field, stats, filterNull, type);\n    if(cardinality !== null) return cardinality;\n    //otherwise use calculation below\n  }\n  if (field.aggr) {\n    return 1;\n  }\n\n  // remove null\n  var stat = stats[field.name];\n  return stat.cardinality -\n    (stat.numNulls > 0 && filterNull[type] ? 1 : 0);\n};\n\n},{\"./compile/time\":19,\"./consts\":20,\"./schema/schema\":25,\"./util\":27}],24:[function(require,module,exports){\n(function (global){\n'use strict';\n\n// declare global constant\nvar g = global || window;\n\ng.TABLE = 'table';\ng.RAW = 'raw';\ng.STACKED = 'stacked';\ng.INDEX = 'index';\n\ng.X = 'x';\ng.Y = 'y';\ng.ROW = 'row';\ng.COL = 'col';\ng.SIZE = 'size';\ng.SHAPE = 'shape';\ng.COLOR = 'color';\ng.ALPHA = 'alpha';\ng.TEXT = 'text';\ng.DETAIL = 'detail';\n\ng.O = 1;\ng.Q = 2;\ng.T = 4;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{}],25:[function(require,module,exports){\n// Package of defining Vegalite Specification's json schema\n\"use strict\";\n\nvar schema = module.exports = {},\n  util = require('../util');\n\nschema.util = require('./schemautil');\n\nschema.marktype = {\n  type: 'string',\n  enum: ['point', 'tick', 'bar', 'line', 'area', 'circle', 'square', 'text']\n};\n\nschema.aggr = {\n  type: 'string',\n  enum: ['avg', 'sum', 'min', 'max', 'count'],\n  supportedEnums: {\n    Q: ['avg', 'sum', 'min', 'max', 'count'],\n    O: [],\n    T: ['avg', 'min', 'max'],\n    '': ['count']\n  },\n  supportedTypes: {'Q': true, 'O': true, 'T': true, '': true}\n};\nschema.band = {\n  type: 'object',\n  properties: {\n    size: {\n      type: 'integer',\n      minimum: 0\n    },\n    padding: {\n      type: 'integer',\n      minimum: 0,\n      default: 1\n    }\n  }\n};\n\nschema.getSupportedRole = function(encType) {\n  return schema.schema.properties.enc.properties[encType].supportedRole;\n};\n\nschema.timefns = ['year', 'month', 'day', 'date', 'hours', 'minutes', 'seconds'];\n\nschema.defaultTimeFn = 'month';\n\nschema.fn = {\n  type: 'string',\n  enum: schema.timefns,\n  supportedTypes: {'T': true}\n};\n\n//TODO(kanitw): add other type of function here\n\nschema.scale_type = {\n  type: 'string',\n  enum: ['linear', 'log', 'pow', 'sqrt', 'quantile'],\n  default: 'linear',\n  supportedTypes: {'Q': true}\n};\n\nschema.field = {\n  type: 'object',\n  properties: {\n    name: {\n      type: 'string'\n    }\n  }\n};\n\nvar clone = util.duplicate;\nvar merge = schema.util.merge;\n\nschema.MAXBINS_DEFAULT = 15;\n\nvar bin = {\n  type: ['boolean', 'object'],\n  default: false,\n  properties: {\n    maxbins: {\n      type: 'integer',\n      default: schema.MAXBINS_DEFAULT,\n      minimum: 2\n    }\n  },\n  supportedTypes: {'Q': true} // TODO: add 'O' after finishing #81\n};\n\nvar typicalField = merge(clone(schema.field), {\n  type: 'object',\n  properties: {\n    type: {\n      type: 'string',\n      enum: ['O', 'Q', 'T']\n    },\n    aggr: schema.aggr,\n    fn: schema.fn,\n    bin: bin,\n    scale: {\n      type: 'object',\n      properties: {\n        type: schema.scale_type,\n        reverse: {\n          type: 'boolean',\n          default: false,\n          supportedTypes: {'Q': true, 'T': true}\n        },\n        zero: {\n          type: 'boolean',\n          description: 'Include zero',\n          default: true,\n          supportedTypes: {'Q': true, 'T': true}\n        },\n        nice: {\n          type: 'string',\n          enum: ['second', 'minute', 'hour', 'day', 'week', 'month', 'year'],\n          supportedTypes: {'T': true}\n        }\n      }\n    }\n  }\n});\n\nvar onlyOrdinalField = merge(clone(schema.field), {\n  type: 'object',\n  supportedRole: {\n    dimension: true\n  },\n  properties: {\n    type: {\n      type: 'string',\n      enum: ['O','Q', 'T'] // ordinal-only field supports Q when bin is applied and T when fn is applied.\n    },\n    fn: schema.fn,\n    bin: bin,\n    aggr: {\n      type: 'string',\n      enum: ['count'],\n      supportedTypes: {'O': true}\n    }\n  }\n});\n\nvar axisMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true},\n  properties: {\n    axis: {\n      type: 'object',\n      properties: {\n        grid: {\n          type: 'boolean',\n          default: true,\n          description: 'A flag indicate if gridlines should be created in addition to ticks.'\n        },\n        title: {\n          type: 'boolean',\n          default: true,\n          description: 'A title for the axis.'\n        },\n        titleOffset: {\n          type: 'integer',\n          default: undefined,  // auto\n          description: 'A title offset value for the axis.'\n        },\n        format: {\n          type: 'string',\n          default: undefined,  // auto\n          description: 'The formatting pattern for axis labels.'\n        },\n        maxLabelLength: {\n          type: 'integer',\n          default: 25,\n          minimum: 0,\n          description: 'Truncate labels that are too long.'\n        }\n      }\n    }\n  }\n};\n\nvar sortMixin = {\n  type: 'object',\n  properties: {\n    sort: {\n      type: 'array',\n      default: [],\n      items: {\n        type: 'object',\n        supportedTypes: {'O': true},\n        required: ['name', 'aggr'],\n        name: {\n          type: 'string'\n        },\n        aggr: {\n          type: 'string',\n          enum: ['avg', 'sum', 'min', 'max', 'count']\n        },\n        reverse: {\n          type: 'boolean',\n          default: false\n        }\n      }\n    }\n  }\n};\n\nvar bandMixin = {\n  type: 'object',\n  properties: {\n    band: schema.band\n  }\n};\n\nvar legendMixin = {\n  type: 'object',\n  properties: {\n    legend: {\n      type: 'boolean',\n      default: true\n    }\n  }\n};\n\nvar textMixin = {\n  type: 'object',\n  supportedMarktypes: {'text': true},\n  properties: {\n    text: {\n      type: 'object',\n      properties: {\n        align: {\n          type: 'string',\n          default: 'left'\n        },\n        baseline: {\n          type: 'string',\n          default: 'middle'\n        },\n        margin: {\n          type: 'integer',\n          default: 4,\n          minimum: 0\n        }\n      }\n    },\n    font: {\n      type: 'object',\n      properties: {\n        weight: {\n          type: 'string',\n          enum: ['normal', 'bold'],\n          default: 'normal'\n        },\n        size: {\n          type: 'integer',\n          default: 10,\n          minimum: 0\n        },\n        family: {\n          type: 'string',\n          default: 'Helvetica Neue'\n        },\n        style: {\n          type: 'string',\n          default: 'normal',\n          enum: ['normal', 'italic']\n        }\n      }\n    }\n  }\n};\n\nvar sizeMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, bar: true, circle: true, square: true, text: true},\n  properties: {\n    value: {\n      type: 'integer',\n      default: 30,\n      minimum: 0\n    }\n  }\n};\n\nvar colorMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true, 'text': true},\n  properties: {\n    value: {\n      type: 'string',\n      role: 'color',\n      default: 'steelblue'\n    },\n    scale: {\n      type: 'object',\n      properties: {\n        range: {\n          type: ['string', 'array']\n        }\n      }\n    }\n  }\n};\n\nvar alphaMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true, 'text': true},\n  properties: {\n    value: {\n      type: 'number',\n      default: undefined,  // auto\n      minimum: 0,\n      maximum: 1\n    }\n  }\n};\n\nvar shapeMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, circle: true, square: true},\n  properties: {\n    value: {\n      type: 'string',\n      enum: ['circle', 'square', 'cross', 'diamond', 'triangle-up', 'triangle-down'],\n      default: 'circle'\n    }\n  }\n};\n\nvar detailMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, line: true, circle: true, square: true}\n};\n\nvar rowMixin = {\n  properties: {\n    height: {\n      type: 'number',\n      minimum: 0,\n      default: 150\n    },\n    grid: {\n      type: 'boolean',\n      default: true,\n      description: 'A flag indicate if gridlines should be created in addition to ticks.'\n    },\n  }\n};\n\nvar colMixin = {\n  properties: {\n    width: {\n      type: 'number',\n      minimum: 0,\n      default: 150\n    },\n    axis: {\n      properties: {\n        maxLabelLength: {\n          type: 'integer',\n          default: 12,\n          minimum: 0,\n          description: 'Truncate labels that are too long.'\n        }\n      }\n    }\n  }\n};\n\nvar facetMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true, text: true},\n  properties: {\n    padding: {\n      type: 'number',\n      minimum: 0,\n      maximum: 1,\n      default: 0.1\n    }\n  }\n};\n\nvar requiredNameType = {\n  required: ['name', 'type']\n};\n\nvar multiRoleField = merge(clone(typicalField), {\n  supportedRole: {\n    measure: true,\n    dimension: true\n  }\n});\n\nvar quantitativeField = merge(clone(typicalField), {\n  supportedRole: {\n    measure: true,\n    dimension: 'ordinal-only' // using alpha / size to encoding category lead to order interpretation\n  }\n});\n\nvar onlyQuantitativeField = merge(clone(typicalField), {\n  supportedRole: {\n    measure: true\n  }\n});\n\nvar x = merge(clone(multiRoleField), axisMixin, bandMixin, requiredNameType, sortMixin);\nvar y = clone(x);\n\nvar facet = merge(clone(onlyOrdinalField), requiredNameType, facetMixin, sortMixin);\nvar row = merge(clone(facet), axisMixin, rowMixin);\nvar col = merge(clone(facet), axisMixin, colMixin);\n\nvar size = merge(clone(quantitativeField), legendMixin, sizeMixin, sortMixin);\nvar color = merge(clone(multiRoleField), legendMixin, colorMixin, sortMixin);\nvar alpha = merge(clone(quantitativeField), alphaMixin, sortMixin);\nvar shape = merge(clone(onlyOrdinalField), legendMixin, shapeMixin, sortMixin);\nvar detail = merge(clone(onlyOrdinalField), detailMixin, sortMixin);\n\n// we only put aggregated measure in pivot table\nvar text = merge(clone(onlyQuantitativeField), textMixin, sortMixin);\n\n// TODO add label\n\nvar filter = {\n  type: 'array',\n  items: {\n    type: 'object',\n    properties: {\n      operands: {\n        type: 'array',\n        items: {\n          type: ['string', 'boolean', 'integer', 'number']\n        }\n      },\n      operator: {\n        type: 'string',\n        enum: ['>', '>=', '=', '!=', '<', '<=', 'notNull']\n      }\n    }\n  }\n};\n\nvar data = {\n  type: 'object',\n  properties: {\n    // data source\n    formatType: {\n      type: 'string',\n      enum: ['json', 'csv'],\n      default: 'json'\n    },\n    url: {\n      type: 'string',\n      default: undefined\n    },\n    vegaServer: {\n      type: 'object',\n      default: null,\n      properties: {\n        table: {\n          type: 'string',\n          default: undefined\n        },\n        url: {\n          type: 'string',\n          default: 'http://localhost:3001'\n        }\n      }\n    }\n  }\n};\n\nconsole.log(schema.util.instantiate(data));\n\nvar config = {\n  type: 'object',\n  properties: {\n    // template\n    width: {\n      type: 'integer',\n      default: undefined\n    },\n    height: {\n      type: 'integer',\n      default: undefined\n    },\n    viewport: {\n      type: 'array',\n      items: {\n        type: 'integer'\n      },\n      default: undefined\n    },\n    gridColor: {\n      type: 'string',\n      role: 'color',\n      default: '#eeeeee'\n    },\n\n    // filter null\n    filterNull: {\n      type: 'object',\n      properties: {\n        O: {type:'boolean', default: false},\n        Q: {type:'boolean', default: true},\n        T: {type:'boolean', default: true}\n      }\n    },\n    toggleSort: {\n      type: 'string',\n      default: 'O'\n    },\n\n    // single plot\n    singleHeight: {\n      // will be overwritten by bandWidth * (cardinality + padding)\n      type: 'integer',\n      default: 200,\n      minimum: 0\n    },\n    singleWidth: {\n      // will be overwritten by bandWidth * (cardinality + padding)\n      type: 'integer',\n      default: 200,\n      minimum: 0\n    },\n    // band size\n    largeBandSize: {\n      type: 'integer',\n      default: 21,\n      minimum: 0\n    },\n    smallBandSize: {\n      //small multiples or single plot with high cardinality\n      type: 'integer',\n      default: 12,\n      minimum: 0\n    },\n    largeBandMaxCardinality: {\n      type: 'integer',\n      default: 10\n    },\n    // small multiples\n    cellPadding: {\n      type: 'number',\n      default: 0.1\n    },\n    cellGridColor: {\n      type: 'string',\n      role: 'color',\n      default: '#aaaaaa'\n    },\n    cellBackgroundColor: {\n      type: 'string',\n      role: 'color',\n      default: 'transparent'\n    },\n    textCellWidth: {\n      type: 'integer',\n      default: 90,\n      minimum: 0\n    },\n\n    // marks\n    strokeWidth: {\n      type: 'integer',\n      default: 2,\n      minimum: 0\n    },\n\n    // scales\n    timeScaleLabelLength: {\n      type: 'integer',\n      default: 3,\n      minimum: 0\n    },\n    // other\n    characterWidth: {\n      type: 'integer',\n      default: 6\n    }\n  }\n};\n\n/** @type Object Schema of a vegalite specification */\nschema.schema = {\n  $schema: 'http://json-schema.org/draft-04/schema#',\n  description: 'Schema for vegalite specification',\n  type: 'object',\n  required: ['marktype', 'enc', 'data', 'config'],\n  properties: {\n    data: data,\n    marktype: schema.marktype,\n    enc: {\n      type: 'object',\n      properties: {\n        x: x,\n        y: y,\n        row: row,\n        col: col,\n        size: size,\n        color: color,\n        alpha: alpha,\n        shape: shape,\n        text: text,\n        detail: detail\n      }\n    },\n    filter: filter,\n    config: config\n  }\n};\n\nschema.encTypes = util.keys(schema.schema.properties.enc.properties);\n\n/** Instantiate a verbose vl spec from the schema */\nschema.instantiate = function() {\n  return schema.util.instantiate(schema.schema);\n};\n\n},{\"../util\":27,\"./schemautil\":26}],26:[function(require,module,exports){\n'use strict';\n\nvar schemautil = module.exports = {},\n  util = require('../util');\n\nvar isEmpty = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\nschemautil.extend = function(instance, schema) {\n  return schemautil.merge(schemautil.instantiate(schema), instance);\n};\n\n// instantiate a schema\nschemautil.instantiate = function(schema) {\n  var val;\n  if (schema === undefined) {\n    return undefined;\n  } else if ('default' in schema) {\n    val = schema.default;\n    return util.isObject(val) ? util.duplicate(val) : val;\n  } else if (schema.type === 'object') {\n    var instance = {};\n    for (var name in schema.properties) {\n      val = schemautil.instantiate(schema.properties[name]);\n      if (val !== undefined) {\n        instance[name] = val;\n      }\n    }\n    return instance;\n  } else if (schema.type === 'array') {\n    return [];\n  }\n  return undefined;\n};\n\n// remove all defaults from an instance\nschemautil.subtract = function(instance, defaults) {\n  var changes = {};\n  for (var prop in instance) {\n    var def = defaults[prop];\n    var ins = instance[prop];\n    // Note: does not properly subtract arrays\n    if (!defaults || def !== ins) {\n      if (typeof ins === 'object' && !util.isArray(ins) && def) {\n        var c = schemautil.subtract(ins, def);\n        if (!isEmpty(c))\n          changes[prop] = c;\n      } else if (!util.isArray(ins) || ins.length > 0) {\n        changes[prop] = ins;\n      }\n    }\n  }\n  return changes;\n};\n\nschemautil.merge = function(/*dest*, src0, src1, ...*/){\n  var dest = arguments[0];\n  for (var i=1 ; i<arguments.length; i++) {\n    dest = merge(dest, arguments[i]);\n  }\n  return dest;\n};\n\n// recursively merges src into dest\nfunction merge(dest, src) {\n  if (typeof src !== 'object' || src === null) {\n    return dest;\n  }\n\n  for (var p in src) {\n    if (!src.hasOwnProperty(p)) {\n      continue;\n    }\n    if (src[p] === undefined) {\n      continue;\n    }\n    if (typeof src[p] !== 'object' || src[p] === null) {\n      dest[p] = src[p];\n    } else if (typeof dest[p] !== 'object' || dest[p] === null) {\n      dest[p] = merge(src[p].constructor === Array ? [] : {}, src[p]);\n    } else {\n      merge(dest[p], src[p]);\n    }\n  }\n  return dest;\n}\n},{\"../util\":27}],27:[function(require,module,exports){\n'use strict';\n\nvar util = module.exports = {};\n\nutil.keys = function(obj) {\n  var k = [], x;\n  for (x in obj) k.push(x);\n  return k;\n};\n\nutil.vals = function(obj) {\n  var v = [], x;\n  for (x in obj) v.push(obj[x]);\n  return v;\n};\n\nutil.range = function(start, stop, step) {\n  if (arguments.length < 3) {\n    step = 1;\n    if (arguments.length < 2) {\n      stop = start;\n      start = 0;\n    }\n  }\n  if ((stop - start) / step == Infinity) throw new Error('infinite range');\n  var range = [], i = -1, j;\n  if (step < 0) while ((j = start + step * ++i) > stop) range.push(j);\n  else while ((j = start + step * ++i) < stop) range.push(j);\n  return range;\n};\n\nutil.find = function(list, pattern) {\n  var l = list.filter(function(x) {\n    return x[pattern.name] === pattern.value;\n  });\n  return l.length && l[0] || null;\n};\n\nutil.isin = function(item, array) {\n  return array.indexOf(item) !== -1;\n};\n\nutil.uniq = function(data, field) {\n  var map = {}, count = 0, i, k;\n  for (i = 0; i < data.length; ++i) {\n    k = data[i][field];\n    if (!map[k]) {\n      map[k] = 1;\n      count += 1;\n    }\n  }\n  return count;\n};\n\nvar isNumber = function(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n};\n\n// try parsing to number\nutil.numbers = function(values) {\n  var nums = [];\n  for (var i = 0; i < values.length; i++) {\n    if (isNumber(values[i])) {\n      nums.push(+values[i]);\n    }\n  }\n  return nums;\n};\n\n// try to parse as date\nutil.dates = function(values) {\n  var dates = [];\n  for (var i = 0; i < values.length; i++) {\n    var date = Date.parse(values[i]);\n    if (!isNaN(date)) {\n      dates.push(new Date(date));\n    }\n  }\n  return dates;\n};\n\nutil.median = function(values) {\n  values.sort(function(a, b) {return a - b;});\n  var half = Math.floor(values.length/2);\n  if (values.length % 2) {\n    return values[half];\n  } else {\n    return (values[half-1] + values[half]) / 2.0;\n  }\n};\n\nutil.mean = function(values) {\n  return values.reduce(function(v, r) {return v + r;}, 0) / values.length;\n};\n\nutil.variance = function(values) {\n  var avg = util.mean(values);\n  var diffs = [];\n  for (var i = 0; i < values.length; i++) {\n    diffs.push(Math.pow((values[i] - avg), 2));\n  }\n  return util.mean(diffs);\n};\n\nutil.stablesort = function(array, sortBy, keyFn) {\n  var indices = {};\n\n  array.forEach(function(v, i) {\n    indices[keyFn(v)] = i;\n  });\n\n  array.sort(function(a, b) {\n    var sa = sortBy(a),\n      sb = sortBy(b);\n\n    return sa<sb ? -1 : sa>sb ? 1 : (indices[keyFn(a)] - indices[keyFn(b)]);\n  });\n  return array;\n};\n\nutil.stdev = function(values) {\n  return Math.sqrt(util.variance(values));\n};\n\nutil.skew = function(values) {\n  var avg = util.mean(values),\n    med = util.median(values),\n    std = util.stdev(values);\n  return 1.0 * (avg - med) / std;\n};\n\n// parses a string to date or number\nutil.parse = function(value) {\n  if (isNumber(value)) {\n    return +value;\n  }\n\n  var date = Date.parse(value);\n  if (!isNaN(date)) {\n    return (new Date(date));\n  }\n  return value;\n};\n\nutil.minmax = function(data) {\n  var stats = {min: +Infinity, max: -Infinity};\n  for (var i = 0; i < data.length; ++i) {\n    var v = data[i];\n    if (v !== null) {\n      if (v > stats.max || stats.max === -Infinity) stats.max = v;\n      if (v < stats.min || stats.min === +Infinity) stats.min = v;\n    }\n  }\n  return stats;\n};\n\nutil.duplicate = function(obj) {\n  return JSON.parse(JSON.stringify(obj));\n};\n\nutil.isObject = function(obj) {\n  return obj === Object(obj);\n};\n\nutil.isArray = Array.isArray || function(obj) {\n  return toString.call(obj) == '[object Array]';\n};\n\nutil.array = function(x) {\n  return x ? (util.isArray(x) ? x : [x]) : [];\n};\n\nutil.forEach = function(obj, f, thisArg) {\n  if (obj.forEach) {\n    obj.forEach.call(thisArg, f);\n  } else {\n    for (var k in obj) {\n      f.call(thisArg, obj[k], k , obj);\n    }\n  }\n};\n\nutil.reduce = function(obj, f, init, thisArg) {\n  if (obj.reduce) {\n    return obj.reduce.call(thisArg, f, init);\n  } else {\n    for (var k in obj) {\n      init = f.call(thisArg, init, obj[k], k, obj);\n    }\n    return init;\n  }\n};\n\nutil.map = function(obj, f, thisArg) {\n  if (obj.map) {\n    return obj.map.call(thisArg, f);\n  } else {\n    var output = [];\n    for (var k in obj) {\n      output.push( f.call(thisArg, obj[k], k, obj));\n    }\n  }\n};\n\nutil.any = function(arr, f) {\n  var i = 0, k;\n  for (k in arr) {\n    if (f(arr[k], k, i++)) return true;\n  }\n  return false;\n};\n\nutil.all = function(arr, f) {\n  var i = 0, k;\n  for (k in arr) {\n    if (!f(arr[k], k, i++)) return false;\n  }\n  return true;\n};\n\n\nutil.cmp = function(a, b) {\n  if (a < b) {\n    return -1;\n  } else if (a > b) {\n    return 1;\n  } else if (a >= b) {\n    return 0;\n  } else if (a === null && b === null) {\n    return 0;\n  } else if (a === null) {\n    return -1;\n  } else if (b === null) {\n    return 1;\n  }\n  return NaN;\n};\n\nvar merge = function(dest, src) {\n  return util.keys(src).reduce(function(c, k) {\n    c[k] = src[k];\n    return c;\n  }, dest);\n};\n\nutil.merge = function(/*dest*, src0, src1, ...*/){\n  var dest = arguments[0];\n  for (var i=1 ; i<arguments.length; i++) {\n    dest = merge(dest, arguments[i]);\n  }\n  return dest;\n};\n\nutil.getbins = function(stats, maxbins) {\n  return util.bins({\n    min: stats.min,\n    max: stats.max,\n    maxbins: maxbins\n  });\n};\n\n\nutil.bins = function(opt) {\n  opt = opt || {};\n\n  // determine range\n  var maxb = opt.maxbins || 1024,\n      base = opt.base || 10,\n      div = opt.div || [5, 2],\n      mins = opt.minstep || 0,\n      logb = Math.log(base),\n      level = Math.ceil(Math.log(maxb) / logb),\n      min = opt.min,\n      max = opt.max,\n      span = max - min,\n      step = Math.max(mins, Math.pow(base, Math.round(Math.log(span) / logb) - level)),\n      nbins = Math.ceil(span / step),\n      precision, v, i, eps;\n\n  if (opt.step) {\n    step = opt.step;\n  } else if (opt.steps) {\n    // if provided, limit choice to acceptable step sizes\n    step = opt.steps[Math.min(\n        opt.steps.length - 1,\n        util_bisectLeft(opt.steps, span / maxb, 0, opt.steps.length)\n    )];\n  } else {\n    // increase step size if too many bins\n    do {\n      step *= base;\n      nbins = Math.ceil(span / step);\n    } while (nbins > maxb);\n\n    // decrease step size if allowed\n    for (i = 0; i < div.length; ++i) {\n      v = step / div[i];\n      if (v >= mins && span / v <= maxb) {\n        step = v;\n        nbins = Math.ceil(span / step);\n      }\n    }\n  }\n\n  // update precision, min and max\n  v = Math.log(step);\n  precision = v >= 0 ? 0 : ~~(-v / logb) + 1;\n  eps = (min<0 ? -1 : 1) * Math.pow(base, -precision - 1);\n  min = Math.min(min, Math.floor(min / step + eps) * step);\n  max = Math.ceil(max / step) * step;\n\n  return {\n    start: min,\n    stop: max,\n    step: step,\n    unit: precision\n  };\n};\n\nfunction util_bisectLeft(a, x, lo, hi) {\n  while (lo < hi) {\n    var mid = lo + hi >>> 1;\n    if (util.cmp(a[mid], x) < 0) { lo = mid + 1; }\n    else { hi = mid; }\n  }\n  return lo;\n}\n\n/**\n * x[p[0]]...[p[n]] = val\n * @param noaugment determine whether new object should be added f\n * or non-existing properties along the path\n */\nutil.setter = function(x, p, val, noaugment) {\n  for (var i=0; i<p.length-1; ++i) {\n    if (!noaugment && !(p[i] in x)){\n      x = x[p[i]] = {};\n    } else {\n      x = x[p[i]];\n    }\n  }\n  x[p[i]] = val;\n};\n\n\n/**\n * returns x[p[0]]...[p[n]]\n * @param augment determine whether new object should be added f\n * or non-existing properties along the path\n */\nutil.getter = function(x, p, noaugment) {\n  for (var i=0; i<p.length; ++i) {\n    if (!noaugment && !(p[i] in x)){\n      x = x[p[i]] = {};\n    } else {\n      x = x[p[i]];\n    }\n  }\n  return x;\n};\n\nutil.truncate = function(s, length, pos, word, ellipsis) {\n  var len = s.length;\n  if (len <= length) return s;\n  ellipsis = ellipsis || \"...\";\n  var l = Math.max(0, length - ellipsis.length);\n\n  switch (pos) {\n    case \"left\":\n      return ellipsis + (word ? vg_truncateOnWord(s,l,1) : s.slice(len-l));\n    case \"middle\":\n    case \"center\":\n      var l1 = Math.ceil(l/2), l2 = Math.floor(l/2);\n      return (word ? vg_truncateOnWord(s,l1) : s.slice(0,l1)) + ellipsis +\n        (word ? vg_truncateOnWord(s,l2,1) : s.slice(len-l2));\n    default:\n      return (word ? vg_truncateOnWord(s,l) : s.slice(0,l)) + ellipsis;\n  }\n};\n\nfunction vg_truncateOnWord(s, len, rev) {\n  var cnt = 0, tok = s.split(vg_truncate_word_re);\n  if (rev) {\n    s = (tok = tok.reverse())\n      .filter(function(w) { cnt += w.length; return cnt <= len; })\n      .reverse();\n  } else {\n    s = tok.filter(function(w) { cnt += w.length; return cnt <= len; });\n  }\n  return s.length ? s.join(\"\").trim() : tok[0].slice(0, len);\n}\n\nvar vg_truncate_word_re = /([\\u0009\\u000A\\u000B\\u000C\\u000D\\u0020\\u00A0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u2028\\u2029\\u3000\\uFEFF])/;\n\n\nutil.error = function(msg) {\n  console.error('[VL Error]', msg);\n};\n\n\n},{}]},{},[1])(1)\n});\n//# sourceMappingURL=data:application/json;base64,\n","'use strict';\n\nvar globals = require('./globals'),\n  consts = require('./consts'),\n  util = require('./util'),\n  vlfield = require('./field'),\n  vlenc = require('./enc'),\n  schema = require('./schema/schema'),\n  time = require('./compile/time');\n\nvar Encoding = module.exports = (function() {\n\n  function Encoding(marktype, enc, data, config, filter, theme) {\n    var defaults = schema.instantiate();\n\n    var spec = {\n      data: data,\n      marktype: marktype,\n      enc: enc,\n      config: config,\n      filter: filter || []\n    };\n\n    // type to bitcode\n    for (var e in defaults.enc) {\n      defaults.enc[e].type = consts.dataTypes[defaults.enc[e].type];\n    }\n\n    var specExtended = schema.util.merge(defaults, theme || {}, spec) ;\n\n    this._data = specExtended.data;\n    this._marktype = specExtended.marktype;\n    this._enc = specExtended.enc;\n    this._config = specExtended.config;\n    this._filter = specExtended.filter;\n  }\n\n  var proto = Encoding.prototype;\n\n  proto.marktype = function() {\n    return this._marktype;\n  };\n\n  proto.is = function(m) {\n    return this._marktype === m;\n  };\n\n  proto.has = function(encType) {\n    // equivalent to calling vlenc.has(this._enc, encType)\n    return this._enc[encType].name !== undefined;\n  };\n\n  proto.enc = function(et) {\n    return this._enc[et];\n  };\n\n  proto.filter = function() {\n    var filterNull = [],\n      fields = this.fields(),\n      self = this;\n\n    util.forEach(fields, function(fieldList, fieldName) {\n      if (fieldName === '*') return; //count\n\n      if ((self.config('filterNull').Q && fieldList.containsType[Q]) ||\n          (self.config('filterNull').T && fieldList.containsType[T]) ||\n          (self.config('filterNull').O && fieldList.containsType[O])) {\n        filterNull.push({\n          operands: [fieldName],\n          operator: 'notNull'\n        });\n      }\n    });\n\n    return filterNull.concat(this._filter);\n  };\n\n  // get \"field\" property for vega\n  proto.field = function(et, nodata, nofn) {\n    if (!this.has(et)) return null;\n\n    var f = (nodata ? '' : 'data.');\n\n    if (this._enc[et].aggr === 'count') {\n      return f + 'count';\n    } else if (!nofn && this._enc[et].bin) {\n      return f + 'bin_' + this._enc[et].name;\n    } else if (!nofn && this._enc[et].aggr) {\n      return f + this._enc[et].aggr + '_' + this._enc[et].name;\n    } else if (!nofn && this._enc[et].fn) {\n      return f + this._enc[et].fn + '_' + this._enc[et].name;\n    } else {\n      return f + this._enc[et].name;\n    }\n  };\n\n  proto.fieldName = function(et) {\n    return this._enc[et].name;\n  };\n\n  /*\n   * return key-value pairs of field name and list of fields of that field name\n   */\n  proto.fields = function() {\n    return vlenc.fields(this._enc);\n  };\n\n  proto.fieldTitle = function(et) {\n    if (vlfield.isCount(this._enc[et])) {\n      return vlfield.count.displayName;\n    }\n    var fn = this._enc[et].aggr || this._enc[et].fn || (this._enc[et].bin && \"bin\");\n    if (fn) {\n      return fn.toUpperCase() + '(' + this._enc[et].name + ')';\n    } else {\n      return this._enc[et].name;\n    }\n  };\n\n  proto.scale = function(et) {\n    return this._enc[et].scale || {};\n  };\n\n  proto.axis = function(et) {\n    return this._enc[et].axis || {};\n  };\n\n  proto.band = function(et) {\n    return this._enc[et].band || {};\n  };\n\n  proto.bandSize = function(encType, useSmallBand) {\n    useSmallBand = useSmallBand ||\n      //isBandInSmallMultiples\n      (encType === Y && this.has(ROW) && this.has(Y)) ||\n      (encType === X && this.has(COL) && this.has(X));\n\n    // if band.size is explicitly specified, follow the specification, otherwise draw value from config.\n    return this.band(encType).size ||\n      this.config(useSmallBand ? 'smallBandSize' : 'largeBandSize');\n  };\n\n  proto.aggr = function(et) {\n    return this._enc[et].aggr;\n  };\n\n  // returns false if binning is disabled, otherwise an object with binning properties\n  proto.bin = function(et) {\n    var bin = this._enc[et].bin;\n    if (bin === {})\n      return false;\n    if (bin === true)\n      return {\n        maxbins: schema.MAXBINS_DEFAULT\n      };\n    return bin;\n  };\n\n  proto.legend = function(et) {\n    return this._enc[et].legend;\n  };\n\n  proto.value = function(et) {\n    return this._enc[et].value;\n  };\n\n  proto.fn = function(et) {\n    return this._enc[et].fn;\n  };\n\n  proto.sort = function(et, stats) {\n    var sort = this._enc[et].sort,\n      enc = this._enc,\n      isType = vlfield.isType.byCode;\n\n    // console.log('sort:', sort, 'support:', Encoding.toggleSort.support({enc:this._enc}, stats) , 'toggle:', this.config('toggleSort'))\n\n    if ((!sort || sort.length===0) &&\n        Encoding.toggleSort.support({enc:this._enc}, stats, true) && //HACK\n        this.config('toggleSort') === 'Q'\n      ) {\n      var qField = isType(enc.x, O) ? enc.y : enc.x;\n\n      if (isType(enc[et], O)) {\n        sort = [{\n          name: qField.name,\n          aggr: qField.aggr,\n          type: qField.type,\n          reverse: true\n        }];\n      }\n    }\n\n    return sort;\n  };\n\n  proto.any = function(f) {\n    return util.any(this._enc, f);\n  };\n\n  proto.all = function(f) {\n    return util.all(this._enc, f);\n  };\n\n  proto.length = function() {\n    return util.keys(this._enc).length;\n  };\n\n  proto.map = function(f) {\n    return vlenc.map(this._enc, f);\n  };\n\n  proto.reduce = function(f, init) {\n    return vlenc.reduce(this._enc, f, init);\n  };\n\n  proto.forEach = function(f) {\n    return vlenc.forEach(this._enc, f);\n  };\n\n  proto.type = function(et) {\n    return this.has(et) ? this._enc[et].type : null;\n  };\n\n  proto.role = function(et) {\n    return this.has(et) ? vlfield.role(this._enc[et]) : null;\n  };\n\n  proto.text = function(prop) {\n    var text = this._enc[TEXT].text;\n    return prop ? text[prop] : text;\n  };\n\n  proto.font = function(prop) {\n    var font = this._enc[TEXT].font;\n    return prop ? font[prop] : font;\n  };\n\n  proto.isType = function(et, type) {\n    var field = this.enc(et);\n    return field && Encoding.isType(field, type);\n  };\n\n  Encoding.isType = function (fieldDef, type) {\n    // FIXME vlfield.isType\n    return (fieldDef.type & type) > 0;\n  };\n\n  Encoding.isOrdinalScale = function(encoding, encType) {\n    return vlfield.isOrdinalScale(encoding.enc(encType), true);\n  };\n\n  Encoding.isDimension = function(encoding, encType) {\n    return vlfield.isDimension(encoding.enc(encType), true);\n  };\n\n  Encoding.isMeasure = function(encoding, encType) {\n    return vlfield.isMeasure(encoding.enc(encType), true);\n  };\n\n  proto.isOrdinalScale = function(encType) {\n    return this.has(encType) && Encoding.isOrdinalScale(this, encType);\n  };\n\n  proto.isDimension = function(encType) {\n    return this.has(encType) && Encoding.isDimension(this, encType);\n  };\n\n  proto.isMeasure = function(encType) {\n    return this.has(encType) && Encoding.isMeasure(this, encType);\n  };\n\n  proto.isAggregate = function() {\n    return vlenc.isAggregate(this._enc);\n  };\n\n  Encoding.isAggregate = function(spec) {\n    return vlenc.isAggregate(spec.enc);\n  };\n\n  Encoding.alwaysNoOcclusion = function(spec, stats) {\n    // FIXME raw OxQ with # of rows = # of O\n    return vlenc.isAggregate(spec.enc);\n  };\n\n  Encoding.isStack = function(spec) {\n    // FIXME update this once we have control for stack ...\n    return (spec.marktype === 'bar' || spec.marktype === 'area') &&\n      spec.enc.color;\n  };\n\n  proto.isStack = function() {\n    // FIXME update this once we have control for stack ...\n    return (this.is('bar') || this.is('area')) && this.has('color');\n  };\n\n  proto.cardinality = function(encType, stats) {\n    return vlfield.cardinality(this.enc(encType), stats, this.config('filterNull'), true);\n  };\n\n  proto.isRaw = function() {\n    return !this.isAggregate();\n  };\n\n  proto.data = function(name) {\n    return this._data[name];\n  };\n\n  proto.config = function(name) {\n    return this._config[name];\n  };\n\n  proto.toSpec = function(excludeConfig) {\n    var enc = util.duplicate(this._enc),\n      spec;\n\n    // convert type's bitcode to type name\n    for (var e in enc) {\n      enc[e].type = consts.dataTypeNames[enc[e].type];\n    }\n\n    spec = {\n      marktype: this._marktype,\n      enc: enc,\n      filter: this._filter\n    };\n\n    if (!excludeConfig) {\n      spec.config = util.duplicate(this._config);\n    }\n\n    // remove defaults\n    var defaults = schema.instantiate();\n    return schema.util.subtract(spec, defaults);\n  };\n\n  proto.toShorthand = function() {\n    var c = consts.shorthand;\n    return 'mark' + c.assign + this._marktype +\n      c.delim + vlenc.shorthand(this._enc);\n  };\n\n  Encoding.shorthand = function (spec) {\n    var c = consts.shorthand;\n    return 'mark' + c.assign + spec.marktype +\n      c.delim + vlenc.shorthand(spec.enc);\n  };\n\n  Encoding.fromShorthand = function(shorthand, data, config, theme) {\n    var c = consts.shorthand,\n        split = shorthand.split(c.delim),\n        marktype = split.shift().split(c.assign)[1].trim(),\n        enc = vlenc.fromShorthand(split, true);\n\n    return new Encoding(marktype, enc, data, config, null, theme);\n  };\n\n  Encoding.specFromShorthand = function(shorthand, data, config, excludeConfig) {\n    return Encoding.fromShorthand(shorthand, data, config).toSpec(excludeConfig);\n  };\n\n  Encoding.fromSpec = function(spec, theme) {\n    var enc = util.duplicate(spec.enc || {});\n\n    //convert type from string to bitcode (e.g, O=1)\n    for (var e in enc) {\n      enc[e].type = consts.dataTypes[enc[e].type];\n    }\n\n    return new Encoding(spec.marktype, enc, spec.data, spec.config, spec.filter, theme);\n  };\n\n  Encoding.transpose = function(spec) {\n    var oldenc = spec.enc,\n      enc = util.duplicate(spec.enc);\n    enc.x = oldenc.y;\n    enc.y = oldenc.x;\n    enc.row = oldenc.col;\n    enc.col = oldenc.row;\n    spec.enc = enc;\n    return spec;\n  };\n\n  Encoding.toggleSort = function(spec) {\n    spec.config = spec.config || {};\n    spec.config.toggleSort = spec.config.toggleSort === 'Q' ? 'O' :'Q';\n    return spec;\n  };\n\n\n  Encoding.toggleSort.direction = function(spec, useTypeCode) {\n    if (!Encoding.toggleSort.support(spec, useTypeCode)) { return; }\n    var enc = spec.enc;\n    return enc.x.type === 'O' ? 'x' :  'y';\n  };\n\n  Encoding.toggleSort.mode = function(spec) {\n    return spec.config.toggleSort;\n  };\n\n  Encoding.toggleSort.support = function(spec, stats, useTypeCode) {\n    var enc = spec.enc,\n      isType = vlfield.isType.get(useTypeCode);\n\n    if (vlenc.has(enc, ROW) || vlenc.has(enc, COL) ||\n      !vlenc.has(enc, X) || !vlenc.has(enc, Y) ||\n      !Encoding.alwaysNoOcclusion(spec, stats)) {\n      return false;\n    }\n\n    return ( isType(enc.x, O) && vlfield.isMeasure(enc.y, useTypeCode)) ? 'x' :\n      ( isType(enc.y, O) && vlfield.isMeasure(enc.x, useTypeCode)) ? 'y' : false;\n  };\n\n  Encoding.toggleFilterNullO = function(spec) {\n    spec.config = spec.config || {};\n    spec.config.filterNull = spec.config.filterNull || { //FIXME\n      T: true,\n      Q: true\n    };\n    spec.config.filterNull.O = !spec.config.filterNull.O;\n    return spec;\n  };\n\n  Encoding.toggleFilterNullO.support = function(spec, stats) {\n    var fields = vlenc.fields(spec.enc);\n    for (var fieldName in fields) {\n      var fieldList = fields[fieldName];\n      if (fieldList.containsType.O && fieldName in stats && stats[fieldName].numNulls > 0) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  return Encoding;\n})();\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util');\n\nmodule.exports = aggregates;\n\nfunction aggregates(spec, encoding, opt) {\n  opt = opt || {};\n\n  var dims = {}, meas = {}, detail = {}, facets = {},\n    data = spec.data[1]; // currently data[0] is raw and data[1] is table\n\n  encoding.forEach(function(field, encType) {\n    if (field.aggr) {\n      if (field.aggr === 'count') {\n        meas.count = {op: 'count', field: '*'};\n      }else {\n        meas[field.aggr + '|'+ field.name] = {\n          op: field.aggr,\n          field: 'data.'+ field.name\n        };\n      }\n    } else {\n      dims[field.name] = encoding.field(encType);\n      if (encType == ROW || encType == COL) {\n        facets[field.name] = dims[field.name];\n      }else if (encType !== X && encType !== Y) {\n        detail[field.name] = dims[field.name];\n      }\n    }\n  });\n  dims = util.vals(dims);\n  meas = util.vals(meas);\n\n  if (meas.length > 0 && !opt.preaggregatedData) {\n    if (!data.transform) data.transform = [];\n    data.transform.push({\n      type: 'aggregate',\n      groupby: dims,\n      fields: meas\n    });\n  }\n  return {\n    details: util.vals(detail),\n    dims: dims,\n    facets: util.vals(facets),\n    aggregated: meas.length > 0\n  };\n}\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  setter = util.setter,\n  getter = util.getter,\n  time = require('./time');\n\nvar axis = module.exports = {};\n\naxis.names = function(props) {\n  return util.keys(util.keys(props).reduce(function(a, x) {\n    var s = props[x].scale;\n    if (s === X || s === Y) a[props[x].scale] = 1;\n    return a;\n  }, {}));\n};\n\naxis.defs = function(names, encoding, layout, stats, opt) {\n  return names.reduce(function(a, name) {\n    a.push(axis.def(name, encoding, layout, stats, opt));\n    return a;\n  }, []);\n};\n\naxis.def = function(name, encoding, layout, stats, opt) {\n  var type = name;\n  var isCol = name == COL, isRow = name == ROW;\n  var rowOffset = axisTitleOffset(encoding, layout, Y) + 20,\n    cellPadding = layout.cellPadding;\n\n\n  if (isCol) type = 'x';\n  if (isRow) type = 'y';\n\n  var def = {\n    type: type,\n    scale: name\n  };\n\n  if (encoding.axis(name).grid) {\n    def.grid = true;\n    def.layer = (isRow || isCol) ? 'front' :  'back';\n\n    if (isCol) {\n      // set grid property -- put the lines on the right the cell\n      setter(def, ['properties', 'grid'], {\n        x: {\n          offset: layout.cellWidth * (1+ cellPadding/2.0),\n          // default value(s) -- vega doesn't do recursive merge\n          scale: 'col'\n        },\n        y: {\n          value: -layout.cellHeight * (cellPadding/2),\n        },\n        stroke: { value: encoding.config('cellGridColor') }\n      });\n    } else if (isRow) {\n      // set grid property -- put the lines on the top\n      setter(def, ['properties', 'grid'], {\n        y: {\n          offset: -layout.cellHeight * (cellPadding/2),\n          // default value(s) -- vega doesn't do recursive merge\n          scale: 'row'\n        },\n        x: {\n          value: rowOffset\n        },\n        x2: {\n          offset: rowOffset + (layout.cellWidth * 0.05),\n          // default value(s) -- vega doesn't do recursive merge\n          group: \"mark.group.width\",\n          mult: 1\n        },\n        stroke: { value: encoding.config('cellGridColor') }\n      });\n    } else {\n      setter(def, ['properties', 'grid', 'stroke'], {\n        value: encoding.config('gridColor')\n      });\n    }\n  }\n\n  if (encoding.axis(name).title) {\n    def = axis_title(def, name, encoding, layout, opt);\n  }\n\n  if (isRow || isCol) {\n    setter(def, ['properties', 'ticks'], {\n      opacity: {value: 0}\n    });\n    setter(def, ['properties', 'majorTicks'], {\n      opacity: {value: 0}\n    });\n    setter(def, ['properties', 'axis'], {\n      opacity: {value: 0}\n    });\n  }\n\n  if (isCol) {\n    def.orient = 'top';\n  }\n\n  if (isRow) {\n    def.offset = rowOffset;\n  }\n\n  if (name == X) {\n    if (encoding.has(Y) && encoding.isOrdinalScale(Y) && encoding.cardinality(Y, stats) > 30) {\n      def.orient = 'top';\n    }\n\n    if (encoding.isDimension(X) || encoding.isType(X, T)) {\n      setter(def, ['properties','labels'], {\n        angle: {value: 270},\n        align: {value: 'right'},\n        baseline: {value: 'middle'}\n      });\n    } else { // Q\n      def.ticks = 5;\n    }\n  }\n\n  def = axis_labels(def, name, encoding, layout, opt);\n\n  return def;\n};\n\nfunction axis_title(def, name, encoding, layout, opt) {\n  var maxlength = null,\n    fieldTitle = encoding.fieldTitle(name);\n  if (name===X) {\n    maxlength = layout.cellWidth / encoding.config('characterWidth');\n  } else if (name === Y) {\n    maxlength = layout.cellHeight / encoding.config('characterWidth');\n  }\n\n  def.title = maxlength ? util.truncate(fieldTitle, maxlength) : fieldTitle;\n\n  if (name === ROW) {\n    setter(def, ['properties','title'], {\n      angle: {value: 0},\n      align: {value: 'right'},\n      baseline: {value: 'middle'},\n      dy: {value: (-layout.height/2) -20}\n    });\n  }\n\n  def.titleOffset = axisTitleOffset(encoding, layout, name);\n  return def;\n}\n\nfunction axis_labels(def, name, encoding, layout, opt) {\n  var fn;\n  // add custom label for time type\n  if (encoding.isType(name, T) && (fn = encoding.fn(name)) && (time.hasScale(fn))) {\n    setter(def, ['properties','labels','text','scale'], 'time-'+ fn);\n  }\n\n  var textTemplatePath = ['properties','labels','text','template'];\n  if (encoding.axis(name).format) {\n    def.format = encoding.axis(name).format;\n  } else if (encoding.isType(name, Q)) {\n    setter(def, textTemplatePath, \"{{data | number:'.3s'}}\");\n  } else if (encoding.isType(name, T) && !encoding.fn(name)) {\n    setter(def, textTemplatePath, \"{{data | time:'%Y-%m-%d'}}\");\n  } else if (encoding.isType(name, T) && encoding.fn(name) === 'year') {\n    setter(def, textTemplatePath, \"{{data | number:'d'}}\");\n  } else if (encoding.isType(name, O) && encoding.axis(name).maxLabelLength) {\n    setter(def, textTemplatePath, '{{data | truncate:' + encoding.axis(name).maxLabelLength + '}}');\n  }\n\n  return def;\n}\n\nfunction axisTitleOffset(encoding, layout, name) {\n  var value = encoding.axis(name).titleOffset;\n  if (value) {\n    return value;\n  }\n  switch (name) {\n    case ROW: return 0;\n    case COL: return 35;\n  }\n  return getter(layout, [name, 'axisTitleOffset']);\n}\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util');\n\nmodule.exports = binning;\n\nfunction binning(spec, encoding, opt) {\n  opt = opt || {};\n  var bins = {};\n\n  if (opt.preaggregatedData) {\n    return;\n  }\n\n  if (!spec.transform) spec.transform = [];\n\n  encoding.forEach(function(field, encType) {\n    if (encoding.bin(encType)) {\n      spec.transform.push({\n        type: 'bin',\n        field: 'data.' + field.name,\n        output: 'data.bin_' + field.name,\n        maxbins: encoding.bin(encType).maxbins\n      });\n    }\n  });\n}\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util');\n\nmodule.exports = compile;\n\nvar Encoding = require('../Encoding'),\n  template = compile.template = require('./template'),\n  axis = compile.axis = require('./axis'),\n  filter = compile.filter = require('./filter'),\n  legend = compile.legend = require('./legend'),\n  marks = compile.marks = require('./marks'),\n  scale = compile.scale = require('./scale'),\n  vlsort = compile.sort = require('./sort'),\n  vlstyle = compile.style = require('./style'),\n  time = compile.time = require('./time'),\n  aggregate = compile.aggregate = require('./aggregate'),\n  bin = compile.bin = require('./bin'),\n  facet = compile.facet = require('./facet'),\n  vlstack = compile.stack = require('./stack'),\n  subfacet = compile.subfacet = require('./subfacet');\n\ncompile.layout = require('./layout');\ncompile.group = require('./group');\n\nfunction compile(spec, stats, theme) {\n  return compile.encoding(Encoding.fromSpec(spec, theme), stats);\n}\n\ncompile.shorthand = function (shorthand, stats, config, theme) {\n  return compile.encoding(Encoding.fromShorthand(shorthand, config, theme), stats);\n};\n\ncompile.encoding = function (encoding, stats) {\n  var layout = compile.layout(encoding, stats),\n    style = vlstyle(encoding, stats),\n    spec = template(encoding, layout, stats),\n    group = spec.marks[0],\n    mark = marks[encoding.marktype()],\n    mdefs = marks.def(mark, encoding, layout, style),\n    mdef = mdefs[0];  // TODO: remove this dirty hack by refactoring the whole flow\n\n  filter.addFilters(spec, encoding);\n  var sorting = vlsort(spec, encoding, stats);\n\n  var hasRow = encoding.has(ROW), hasCol = encoding.has(COL);\n\n  var preaggregatedData = !!encoding.data('vegaServer');\n\n  for (var i = 0; i < mdefs.length; i++) {\n    group.marks.push(mdefs[i]);\n  }\n\n  bin(spec.data[1], encoding, {preaggregatedData: preaggregatedData});\n\n  var lineType = marks[encoding.marktype()].line;\n\n  if (!preaggregatedData) {\n    spec = time(spec, encoding);\n  }\n\n  // handle subfacets\n  var aggResult = aggregate(spec, encoding, {preaggregatedData: preaggregatedData}),\n    details = aggResult.details,\n    hasDetails = details && details.length > 0,\n    stack = hasDetails && vlstack(spec, encoding, mdef, aggResult.facets);\n\n  if (hasDetails && (stack || lineType)) {\n    //subfacet to group stack / line together in one group\n    subfacet(group, mdef, details, stack, encoding);\n  }\n\n  // auto-sort line/area values\n  //TODO(kanitw): have some config to turn off auto-sort for line (for line chart that encodes temporal information)\n  if (lineType) {\n    var f = (encoding.isMeasure(X) && encoding.isDimension(Y)) ? Y : X;\n    if (!mdef.from) mdef.from = {};\n    // TODO: why - ?\n    mdef.from.transform = [{type: 'sort', by: '-' + encoding.field(f)}];\n  }\n\n  // Small Multiples\n  if (hasRow || hasCol) {\n    spec = facet(group, encoding, layout, style, sorting, spec, mdef, stack, stats);\n    spec.legends = legend.defs(encoding);\n  } else {\n    group.scales = scale.defs(scale.names(mdef.properties.update), encoding, layout, style, sorting,\n      {stack: stack, stats: stats});\n    group.axes = axis.defs(axis.names(mdef.properties.update), encoding, layout, stats);\n    group.legends = legend.defs(encoding);\n  }\n\n  filter.filterLessThanZero(spec, encoding);\n\n  return spec;\n};\n\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util');\n\nvar axis = require('./axis'),\n  groupdef = require('./group').def,\n  scale = require('./scale');\n\nmodule.exports = faceting;\n\nfunction faceting(group, encoding, layout, style, sorting, spec, mdef, stack, stats) {\n  var enter = group.properties.enter;\n  var facetKeys = [], cellAxes = [], from, axesGrp;\n\n  var hasRow = encoding.has(ROW), hasCol = encoding.has(COL);\n\n  enter.fill = {value: encoding.config('cellBackgroundColor')};\n\n  //move \"from\" to cell level and add facet transform\n  group.from = {data: group.marks[0].from.data};\n\n  // Hack, this needs to be refactored\n  for (var i = 0; i < group.marks.length; i++) {\n    var mark = group.marks[i];\n    if (mark.from.transform) {\n      delete mark.from.data; //need to keep transform for subfacetting case\n    } else {\n      delete mark.from;\n    }\n  }\n\n  if (hasRow) {\n    if (!encoding.isDimension(ROW)) {\n      util.error('Row encoding should be ordinal.');\n    }\n    enter.y = {scale: ROW, field: 'keys.' + facetKeys.length};\n    enter.height = {'value': layout.cellHeight}; // HACK\n\n    facetKeys.push(encoding.field(ROW));\n\n    if (hasCol) {\n      from = util.duplicate(group.from);\n      from.transform = from.transform || [];\n      from.transform.unshift({type: 'facet', keys: [encoding.field(COL)]});\n    }\n\n    axesGrp = groupdef('x-axes', {\n        axes: encoding.has(X) ? axis.defs(['x'], encoding, layout, stats) : undefined,\n        x: hasCol ? {scale: COL, field: 'keys.0'} : {value: 0},\n        width: hasCol && {'value': layout.cellWidth}, //HACK?\n        from: from\n      });\n\n    spec.marks.unshift(axesGrp); // need to prepend so it appears under the plots\n    (spec.axes = spec.axes || []);\n    spec.axes.push.apply(spec.axes, axis.defs(['row'], encoding, layout, stats));\n  } else { // doesn't have row\n    if (encoding.has(X)) {\n      //keep x axis in the cell\n      cellAxes.push.apply(cellAxes, axis.defs(['x'], encoding, layout, stats));\n    }\n  }\n\n  if (hasCol) {\n    if (!encoding.isDimension(COL)) {\n      util.error('Col encoding should be ordinal.');\n    }\n    enter.x = {scale: COL, field: 'keys.' + facetKeys.length};\n    enter.width = {'value': layout.cellWidth}; // HACK\n\n    facetKeys.push(encoding.field(COL));\n\n    if (hasRow) {\n      from = util.duplicate(group.from);\n      from.transform = from.transform || [];\n      from.transform.unshift({type: 'facet', keys: [encoding.field(ROW)]});\n    }\n\n    axesGrp = groupdef('y-axes', {\n      axes: encoding.has(Y) ? axis.defs(['y'], encoding, layout, stats) : undefined,\n      y: hasRow && {scale: ROW, field: 'keys.0'},\n      x: hasRow && {value: 0},\n      height: hasRow && {'value': layout.cellHeight}, //HACK?\n      from: from\n    });\n\n    spec.marks.unshift(axesGrp); // need to prepend so it appears under the plots\n    (spec.axes = spec.axes || []);\n    spec.axes.push.apply(spec.axes, axis.defs(['col'], encoding, layout, stats));\n  } else { // doesn't have col\n    if (encoding.has(Y)) {\n      cellAxes.push.apply(cellAxes, axis.defs(['y'], encoding, layout, stats));\n    }\n  }\n\n  // assuming equal cellWidth here\n  // TODO: support heterogenous cellWidth (maybe by using multiple scales?)\n  spec.scales = (spec.scales || []).concat(scale.defs(\n    scale.names(enter).concat(scale.names(mdef.properties.update)),\n    encoding,\n    layout,\n    style,\n    sorting,\n    {stack: stack, facet: true, stats: stats}\n  )); // row/col scales + cell scales\n\n  if (cellAxes.length > 0) {\n    group.axes = cellAxes;\n  }\n\n  // add facet transform\n  var trans = (group.from.transform || (group.from.transform = []));\n  trans.unshift({type: 'facet', keys: facetKeys});\n\n  return spec;\n}\n","'use strict';\n\nvar globals = require('../globals');\n\nvar filter = module.exports = {};\n\nvar BINARY = {\n  '>':  true,\n  '>=': true,\n  '=':  true,\n  '!=': true,\n  '<':  true,\n  '<=': true\n};\n\nfilter.addFilters = function(spec, encoding) {\n  var filters = encoding.filter(),\n    data = spec.data[0];  // apply filters to raw data before aggregation\n\n  if (!data.transform)\n    data.transform = [];\n\n  // add custom filters\n  for (var i in filters) {\n    var filter = filters[i];\n\n    var condition = '';\n    var operator = filter.operator;\n    var operands = filter.operands;\n\n    if (BINARY[operator]) {\n      // expects a field and a value\n      if (operator === '=') {\n        operator = '==';\n      }\n\n      var op1 = operands[0];\n      var op2 = operands[1];\n      condition = 'd.data.' + op1 + operator + op2;\n    } else if (operator === 'notNull') {\n      // expects a number of fields\n      for (var j in operands) {\n        condition += 'd.data.' + operands[j] + '!==null';\n        if (j < operands.length - 1) {\n          condition += ' && ';\n        }\n      }\n    } else {\n      console.warn('Unsupported operator: ', operator);\n    }\n\n    data.transform.push({\n      type: 'filter',\n      test: condition\n    });\n  }\n};\n\n// remove less than 0 values if we use log function\nfilter.filterLessThanZero = function(spec, encoding) {\n  encoding.forEach(function(field, encType) {\n    if (encoding.scale(encType).type === 'log') {\n      spec.data[1].transform.push({\n        type: 'filter',\n        test: 'd.' + encoding.field(encType) + '>0'\n      });\n    }\n  });\n};\n\n","'use strict';\n\nmodule.exports = {\n  def: groupdef\n};\n\nfunction groupdef(name, opt) {\n  opt = opt || {};\n  return {\n    _name: name || undefined,\n    type: 'group',\n    from: opt.from,\n    properties: {\n      enter: {\n        x: opt.x || undefined,\n        y: opt.y || undefined,\n        width: opt.width || {group: 'width'},\n        height: opt.height || {group: 'height'}\n      }\n    },\n    scales: opt.scales || undefined,\n    axes: opt.axes || undefined,\n    marks: opt.marks || []\n  };\n}\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  setter = util.setter,\n  schema = require('../schema/schema'),\n  time = require('./time'),\n  vlfield = require('../field');\n\nmodule.exports = vllayout;\n\nfunction vllayout(encoding, stats) {\n  var layout = box(encoding, stats);\n  layout = offset(encoding, stats, layout);\n  return layout;\n}\n\n/*\n  HACK to set chart size\n  NOTE: this fails for plots driven by derived values (e.g., aggregates)\n  One solution is to update Vega to support auto-sizing\n  In the meantime, auto-padding (mostly) does the trick\n */\nfunction box(encoding, stats) {\n  var hasRow = encoding.has(ROW),\n      hasCol = encoding.has(COL),\n      hasX = encoding.has(X),\n      hasY = encoding.has(Y),\n      marktype = encoding.marktype();\n\n  // FIXME/HACK we need to take filter into account\n  var xCardinality = hasX && encoding.isDimension(X) ? encoding.cardinality(X, stats) : 1,\n    yCardinality = hasY && encoding.isDimension(Y) ? encoding.cardinality(Y, stats) : 1;\n\n  var useSmallBand = xCardinality > encoding.config('largeBandMaxCardinality') ||\n    yCardinality > encoding.config('largeBandMaxCardinality');\n\n  var cellWidth, cellHeight, cellPadding = encoding.config('cellPadding');\n\n  // set cellWidth\n  if (hasX) {\n    if (encoding.isOrdinalScale(X)) {\n      // for ordinal, hasCol or not doesn't matter -- we scale based on cardinality\n      cellWidth = (xCardinality + encoding.band(X).padding) * encoding.bandSize(X, useSmallBand);\n    } else {\n      cellWidth = hasCol || hasRow ? encoding.enc(COL).width :  encoding.config(\"singleWidth\");\n    }\n  } else {\n    if (marktype === TEXT) {\n      cellWidth = encoding.config('textCellWidth');\n    } else {\n      cellWidth = encoding.bandSize(X);\n    }\n  }\n\n  // set cellHeight\n  if (hasY) {\n    if (encoding.isOrdinalScale(Y)) {\n      // for ordinal, hasCol or not doesn't matter -- we scale based on cardinality\n      cellHeight = (yCardinality + encoding.band(Y).padding) * encoding.bandSize(Y, useSmallBand);\n    } else {\n      cellHeight = hasCol || hasRow ? encoding.enc(ROW).height :  encoding.config(\"singleHeight\");\n    }\n  } else {\n    cellHeight = encoding.bandSize(Y);\n  }\n\n  // Cell bands use rangeBands(). There are n-1 padding.  Outerpadding = 0 for cells\n\n  var width = cellWidth, height = cellHeight;\n  if (hasCol) {\n    var colCardinality = encoding.cardinality(COL, stats);\n    width = cellWidth * ((1 + cellPadding) * (colCardinality - 1) + 1);\n  }\n  if (hasRow) {\n    var rowCardinality =  encoding.cardinality(ROW, stats);\n    height = cellHeight * ((1 + cellPadding) * (rowCardinality - 1) + 1);\n  }\n\n  return {\n    // width and height of the whole cell\n    cellWidth: cellWidth,\n    cellHeight: cellHeight,\n    cellPadding: cellPadding,\n    // width and height of the chart\n    width: width,\n    height: height,\n    // information about x and y, such as band size\n    x: {useSmallBand: useSmallBand},\n    y: {useSmallBand: useSmallBand}\n  };\n}\n\nfunction offset(encoding, stats, layout) {\n  [X, Y].forEach(function (x) {\n    var maxLength;\n    if (encoding.isDimension(x) || encoding.isType(x, T)) {\n      maxLength = stats[encoding.fieldName(x)].maxlength;\n    } else if (encoding.aggr(x) === 'count') {\n      //assign default value for count as it won't have stats\n      maxLength =  3;\n    } else if (encoding.isType(x, Q)) {\n      if (x===X) {\n        maxLength = 3;\n      } else { // Y\n        //assume that default formating is always shorter than 7\n        maxLength = Math.min(stats[encoding.fieldName(x)].maxlength, 7);\n      }\n    }\n    setter(layout,[x, 'axisTitleOffset'], encoding.config('characterWidth') *  maxLength + 20);\n  });\n  return layout;\n}\n","'use strict';\n\nvar global = require('../globals'),\n  time = require('./time');\n\nvar legend = module.exports = {};\n\nlegend.defs = function(encoding) {\n  var defs = [];\n\n  // TODO: support alpha\n\n  if (encoding.has(COLOR) && encoding.legend(COLOR)) {\n    defs.push(legend.def(COLOR, encoding, {\n      fill: COLOR,\n      orient: 'right'\n    }));\n  }\n\n  if (encoding.has(SIZE) && encoding.legend(SIZE)) {\n    defs.push(legend.def(SIZE, encoding, {\n      size: SIZE,\n      orient: defs.length === 1 ? 'left' : 'right'\n    }));\n  }\n\n  if (encoding.has(SHAPE) && encoding.legend(SHAPE)) {\n    if (defs.length === 2) {\n      // TODO: fix this\n      console.error('Vegalite currently only supports two legends');\n      return defs;\n    }\n    defs.push(legend.def(SHAPE, encoding, {\n      shape: SHAPE,\n      orient: defs.length === 1 ? 'left' : 'right'\n    }));\n  }\n\n  return defs;\n};\n\nlegend.def = function(name, encoding, props) {\n  var def = props, fn;\n\n  def.title = encoding.fieldTitle(name);\n\n  if (encoding.isType(name, T) && (fn = encoding.fn(name)) &&\n    time.hasScale(fn)) {\n    var properties = def.properties = def.properties || {},\n      labels = properties.labels = properties.labels || {},\n      text = labels.text = labels.text || {};\n\n    text.scale = 'time-'+ fn;\n  }\n\n  return def;\n};\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  vlscale = require('./scale');\n\nvar marks = module.exports = {};\n\nmarks.def = function(mark, encoding, layout, style) {\n  var defs = [];\n\n  // to add a background to text, we need to add it before the text\n  if (encoding.marktype() === TEXT && encoding.has(COLOR)) {\n    var bg = {\n      x: {value: 0},\n      y: {value: 0},\n      x2: {value: layout.cellWidth},\n      y2: {value: layout.cellHeight},\n      fill: {scale: COLOR, field: encoding.field(COLOR)}\n    };\n    defs.push({\n      type: 'rect',\n      from: {data: TABLE},\n      properties: {enter: bg, update: bg}\n    });\n  }\n\n  // add the mark def for the main thing\n  var p = mark.prop(encoding, layout, style);\n  defs.push({\n    type: mark.type,\n    from: {data: TABLE},\n    properties: {enter: p, update: p}\n  });\n\n  return defs;\n};\n\nmarks.bar = {\n  type: 'rect',\n  stack: true,\n  prop: bar_props,\n  requiredEncoding: ['x', 'y'],\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, size: 1, color: 1, alpha: 1}\n};\n\nmarks.line = {\n  type: 'line',\n  line: true,\n  prop: line_props,\n  requiredEncoding: ['x', 'y'],\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, color: 1, alpha: 1, detail:1}\n};\n\nmarks.area = {\n  type: 'area',\n  stack: true,\n  line: true,\n  requiredEncoding: ['x', 'y'],\n  prop: area_props,\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, color: 1, alpha: 1}\n};\n\nmarks.tick = {\n  type: 'rect',\n  prop: tick_props,\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, color: 1, alpha: 1, detail: 1}\n};\n\nmarks.circle = {\n  type: 'symbol',\n  prop: filled_point_props('circle'),\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, size: 1, color: 1, alpha: 1, detail: 1}\n};\n\nmarks.square = {\n  type: 'symbol',\n  prop: filled_point_props('square'),\n  supportedEncoding: marks.circle.supportedEncoding\n};\n\nmarks.point = {\n  type: 'symbol',\n  prop: point_props,\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, size: 1, color: 1, alpha: 1, shape: 1, detail: 1}\n};\n\nmarks.text = {\n  type: 'text',\n  prop: text_props,\n  requiredEncoding: ['text'],\n  supportedEncoding: {row: 1, col: 1, size: 1, color: 1, alpha: 1, text: 1}\n};\n\nfunction bar_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.isMeasure(X)) {\n    p.x = {scale: X, field: e.field(X)};\n    if (e.isDimension(Y)) {\n      p.x2 = {scale: X, value: e.scale(X).type === 'log' ? 1 : 0};\n    }\n  } else if (e.has(X)) { // is ordinal\n    p.xc = {scale: X, field: e.field(X)};\n  } else {\n    // TODO add single bar offset\n    p.xc = {value: 0};\n  }\n\n  // y\n  if (e.isMeasure(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n    p.y2 = {scale: Y, value: e.scale(Y).type === 'log' ? 1 : 0};\n  } else if (e.has(Y)) { // is ordinal\n    p.yc = {scale: Y, field: e.field(Y)};\n  } else {\n    // TODO add single bar offset\n    p.yc = {group: 'height'};\n  }\n\n  // width\n  if (!e.has(X) || e.isOrdinalScale(X)) { // no X or X is ordinal\n    if (e.has(SIZE)) {\n      p.width = {scale: SIZE, field: e.field(SIZE)};\n    } else {\n      p.width = {\n        value: e.bandSize(X, layout.x.useSmallBand),\n        offset: -1\n      };\n    }\n  } else { // X is Quant or Time Scale\n    p.width = {value: 2};\n  }\n\n  // height\n  if (!e.has(Y) || e.isOrdinalScale(Y)) { // no Y or Y is ordinal\n    if (e.has(SIZE)) {\n      p.height = {scale: SIZE, field: e.field(SIZE)};\n    } else {\n      p.height = {\n        value: e.bandSize(Y, layout.y.useSmallBand),\n        offset: -1\n      };\n    }\n  } else { // Y is Quant or Time Scale\n    p.height = {value: 2};\n  }\n\n  // fill\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else {\n    p.fill = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  }\n\n  return p;\n}\n\nfunction point_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    p.x = {value: e.bandSize(X, layout.x.useSmallBand) / 2};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {value: e.bandSize(Y, layout.y.useSmallBand) / 2};\n  }\n\n  // size\n  if (e.has(SIZE)) {\n    p.size = {scale: SIZE, field: e.field(SIZE)};\n  } else if (!e.has(SIZE)) {\n    p.size = {value: e.value(SIZE)};\n  }\n\n  // shape\n  if (e.has(SHAPE)) {\n    p.shape = {scale: SHAPE, field: e.field(SHAPE)};\n  } else if (!e.has(SHAPE)) {\n    p.shape = {value: e.value(SHAPE)};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.stroke = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.stroke = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  } else if (!e.has(COLOR)) {\n    p.opacity = {value: style.opacity};\n  }\n\n  p.strokeWidth = {value: e.config('strokeWidth')};\n\n  return p;\n}\n\nfunction line_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    p.x = {value: 0};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {group: 'height'};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.stroke = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.stroke = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  }\n\n  p.strokeWidth = {value: e.config('strokeWidth')};\n\n  return p;\n}\n\nfunction area_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.isMeasure(X)) {\n    p.x = {scale: X, field: e.field(X)};\n    if (e.isDimension(Y)) {\n      p.x2 = {scale: X, value: 0};\n      p.orient = {value: 'horizontal'};\n    }\n  } else if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else {\n    p.x = {value: 0};\n  }\n\n  // y\n  if (e.isMeasure(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n    p.y2 = {scale: Y, value: 0};\n  } else if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else {\n    p.y = {group: 'height'};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.fill = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  }\n\n  return p;\n}\n\nfunction tick_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n    if (e.isDimension(X)) {\n      p.x.offset = -e.bandSize(X, layout.x.useSmallBand) / 3;\n    }\n  } else if (!e.has(X)) {\n    p.x = {value: 0};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n    if (e.isDimension(Y)) {\n      p.y.offset = -e.bandSize(Y, layout.y.useSmallBand) / 3;\n    }\n  } else if (!e.has(Y)) {\n    p.y = {value: 0};\n  }\n\n  // width\n  if (!e.has(X) || e.isDimension(X)) {\n    p.width = {value: e.bandSize(X, layout.y.useSmallBand) / 1.5};\n  } else {\n    p.width = {value: 1};\n  }\n\n  // height\n  if (!e.has(Y) || e.isDimension(Y)) {\n    p.height = {value: e.bandSize(Y, layout.y.useSmallBand) / 1.5};\n  } else {\n    p.height = {value: 1};\n  }\n\n  // fill\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else {\n    p.fill = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  } else if (!e.has(COLOR)) {\n    p.opacity = {value: style.opacity};\n  }\n\n  return p;\n}\n\nfunction filled_point_props(shape) {\n  return function(e, layout, style) {\n    var p = {};\n\n    // x\n    if (e.has(X)) {\n      p.x = {scale: X, field: e.field(X)};\n    } else if (!e.has(X)) {\n      p.x = {value: e.bandSize(X, layout.x.useSmallBand) / 2};\n    }\n\n    // y\n    if (e.has(Y)) {\n      p.y = {scale: Y, field: e.field(Y)};\n    } else if (!e.has(Y)) {\n      p.y = {value: e.bandSize(Y, layout.y.useSmallBand) / 2};\n    }\n\n    // size\n    if (e.has(SIZE)) {\n      p.size = {scale: SIZE, field: e.field(SIZE)};\n    } else if (!e.has(X)) {\n      p.size = {value: e.value(SIZE)};\n    }\n\n    // shape\n    p.shape = {value: shape};\n\n    // fill\n    if (e.has(COLOR)) {\n      p.fill = {scale: COLOR, field: e.field(COLOR)};\n    } else if (!e.has(COLOR)) {\n      p.fill = {value: e.value(COLOR)};\n    }\n\n    // alpha\n    if (e.has(ALPHA)) {\n      p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n    } else if (e.value(ALPHA) !== undefined) {\n      p.opacity = {value: e.value(ALPHA)};\n    } else if (!e.has(COLOR)) {\n      p.opacity = {value: style.opacity};\n    }\n\n    return p;\n  };\n}\n\nfunction text_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    if (e.has(TEXT) && e.isType(TEXT, Q)) {\n      p.x = {value: layout.cellWidth-5};\n    } else {\n      p.x = {value: e.bandSize(X, layout.x.useSmallBand) / 2};\n    }\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {value: e.bandSize(Y, layout.y.useSmallBand) / 2};\n  }\n\n  // size\n  if (e.has(SIZE)) {\n    p.fontSize = {scale: SIZE, field: e.field(SIZE)};\n  } else if (!e.has(SIZE)) {\n    p.fontSize = {value: e.font('size')};\n  }\n\n  // fill\n  // color should be set to background\n  p.fill = {value: 'black'};\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  } else {\n    p.opacity = {value: style.opacity};\n  }\n\n  // text\n  if (e.has(TEXT)) {\n    if (e.isType(TEXT, Q)) {\n      p.text = {template: \"{{\" + e.field(TEXT) + \" | number:'.3s'}}\"};\n      p.align = {value: 'right'};\n    } else {\n      p.text = {field: e.field(TEXT)};\n    }\n  } else {\n    p.text = {value: 'Abc'};\n  }\n\n  p.font = {value: e.font('family')};\n  p.fontWeight = {value: e.font('weight')};\n  p.fontStyle = {value: e.font('style')};\n  p.baseline = {value: e.text('baseline')};\n\n  return p;\n}\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  time = require('./time');\n\nvar scale = module.exports = {};\n\nscale.names = function(props) {\n  return util.keys(util.keys(props).reduce(function(a, x) {\n    if (props[x] && props[x].scale) a[props[x].scale] = 1;\n    return a;\n  }, {}));\n};\n\nscale.defs = function(names, encoding, layout, style, sorting, opt) {\n  opt = opt || {};\n\n  return names.reduce(function(a, name) {\n    var s = {\n      name: name,\n      type: scale.type(name, encoding),\n      domain: scale_domain(name, encoding, sorting, opt)\n    };\n    if (s.type === 'ordinal' && !encoding.bin(name) && encoding.sort(name).length === 0) {\n      s.sort = true;\n    }\n\n    scale_range(s, encoding, layout, style, opt);\n\n    return (a.push(s), a);\n  }, []);\n};\n\nscale.type = function(name, encoding) {\n\n  switch (encoding.type(name)) {\n    case O: return 'ordinal';\n    case T:\n      var fn = encoding.fn(name);\n      return (fn && time.scale.type(fn, name)) || 'time';\n    case Q:\n      if (encoding.bin(name)) {\n        return name === COLOR ? 'linear' : 'ordinal';\n      }\n      return encoding.scale(name).type;\n  }\n};\n\nfunction scale_domain(name, encoding, sorting, opt) {\n  if (encoding.isType(name, T)) {\n    var range = time.scale.domain(encoding.fn(name), name);\n    if(range) return range;\n  }\n\n  if (encoding.bin(name)) {\n    // TODO: add includeEmptyConfig here\n    if (opt.stats) {\n      var bins = util.getbins(opt.stats[encoding.fieldName(name)], encoding.bin(name).maxbins);\n      var domain = util.range(bins.start, bins.stop, bins.step);\n      return name === Y ? domain.reverse() : domain;\n    }\n  }\n\n  return name == opt.stack ?\n    {\n      data: STACKED,\n      field: 'data.' + (opt.facet ? 'max_' : '') + 'sum_' + encoding.field(name, true)\n    } :\n    {data: sorting.getDataset(name), field: encoding.field(name)};\n}\n\nfunction scale_range(s, encoding, layout, style, opt) {\n  var spec = encoding.scale(s.name);\n  switch (s.name) {\n    case X:\n      if (s.type === 'ordinal') {\n        s.bandWidth = encoding.bandSize(X, layout.x.useSmallBand);\n      } else {\n        s.range = layout.cellWidth ? [0, layout.cellWidth] : 'width';\n\n        if (encoding.isType(s.name,T) && encoding.fn(s.name) === 'year') {\n          s.zero = false;\n        } else {\n          s.zero = spec.zero === undefined ? true : spec.zero;\n        }\n\n        s.reverse = spec.reverse;\n      }\n      s.round = true;\n      if (s.type === 'time') {\n        s.nice = encoding.fn(s.name);\n      }else {\n        s.nice = true;\n      }\n      break;\n    case Y:\n      if (s.type === 'ordinal') {\n        s.bandWidth = encoding.bandSize(Y, layout.y.useSmallBand);\n      } else {\n        s.range = layout.cellHeight ? [layout.cellHeight, 0] : 'height';\n\n        if (encoding.isType(s.name,T) && encoding.fn(s.name) === 'year') {\n          s.zero = false;\n        } else {\n          s.zero = spec.zero === undefined ? true : spec.zero;\n        }\n\n        s.reverse = spec.reverse;\n      }\n\n      s.round = true;\n\n      if (s.type === 'time') {\n        s.nice = encoding.fn(s.name) || encoding.config('timeScaleNice');\n      }else {\n        s.nice = true;\n      }\n      break;\n    case ROW: // support only ordinal\n      s.bandWidth = layout.cellHeight;\n      s.round = true;\n      s.nice = true;\n      break;\n    case COL: // support only ordinal\n      s.bandWidth = layout.cellWidth;\n      s.round = true;\n      s.nice = true;\n      break;\n    case SIZE:\n      if (encoding.is('bar')) {\n        // FIXME this is definitely incorrect\n        // but let's fix it later since bar size is a bad encoding anyway\n        s.range = [3, Math.max(encoding.bandSize(X), encoding.bandSize(Y))];\n      } else if (encoding.is(TEXT)) {\n        s.range = [8, 40];\n      } else { //point\n        var bandSize = Math.min(encoding.bandSize(X), encoding.bandSize(Y)) - 1;\n        s.range = [10, 0.8 * bandSize*bandSize];\n      }\n      s.round = true;\n      s.zero = false;\n      break;\n    case SHAPE:\n      s.range = 'shapes';\n      break;\n    case COLOR:\n      var range = encoding.scale(COLOR).range;\n      if (range === undefined) {\n        if (s.type === 'ordinal') {\n          // FIXME\n          range = style.colorRange;\n        } else {\n          range = ['#A9DB9F', '#0D5C21'];\n          s.zero = false;\n        }\n      }\n      s.range = range;\n      break;\n    case ALPHA:\n      s.range = [0.2, 1.0];\n      break;\n    default:\n      throw new Error('Unknown encoding name: '+ s.name);\n  }\n\n  switch (s.name) {\n    case ROW:\n    case COL:\n      s.padding = encoding.config('cellPadding');\n      s.outerPadding = 0;\n      break;\n    case X:\n    case Y:\n      if (s.type === 'ordinal') { //&& !s.bandWidth\n        s.points = true;\n        s.padding = encoding.band(s.name).padding;\n      }\n  }\n}\n","'use strict';\n\nvar globals = require('../globals');\n\nmodule.exports = addSortTransforms;\n\n// adds new transforms that produce sorted fields\nfunction addSortTransforms(spec, encoding, stats, opt) {\n  var datasetMapping = {};\n  var counter = 0;\n\n  encoding.forEach(function(field, encType) {\n    var sortBy = encoding.sort(encType, stats);\n    if (sortBy.length > 0) {\n      var fields = sortBy.map(function(d) {\n        return {\n          op: d.aggr,\n          field: 'data.' + d.name\n        };\n      });\n\n      var byClause = sortBy.map(function(d) {\n        var reverse = (d.reverse ? '-' : '');\n        return reverse + 'data.' + (d.aggr==='count' ? 'count' : (d.aggr + '_' + d.name));\n      });\n\n      var dataName = 'sorted' + counter++;\n\n      var transforms = [\n        {\n          type: 'aggregate',\n          groupby: ['data.' + field.name],\n          fields: fields\n        },\n        {\n          type: 'sort',\n          by: byClause\n        }\n      ];\n\n      spec.data.push({\n        name: dataName,\n        source: RAW,\n        transform: transforms\n      });\n\n      datasetMapping[encType] = dataName;\n    }\n  });\n\n  return {\n    spec: spec,\n    getDataset: function(encType) {\n      var data = datasetMapping[encType];\n      if (!data) {\n        return TABLE;\n      }\n      return data;\n    }\n  };\n}\n","\"use strict\";\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  marks = require('./marks');\n\nmodule.exports = stacking;\n\nfunction stacking(spec, encoding, mdef, facets) {\n  if (!marks[encoding.marktype()].stack) return false;\n\n  // TODO: add || encoding.has(LOD) here once LOD is implemented\n  if (!encoding.has(COLOR)) return false;\n\n  var dim=null, val=null, idx =null,\n    isXMeasure = encoding.isMeasure(X),\n    isYMeasure = encoding.isMeasure(Y);\n\n  if (isXMeasure && !isYMeasure) {\n    dim = Y;\n    val = X;\n    idx = 0;\n  } else if (isYMeasure && !isXMeasure) {\n    dim = X;\n    val = Y;\n    idx = 1;\n  } else {\n    return null; // no stack encoding\n  }\n\n  // add transform to compute sums for scale\n  var stacked = {\n    name: STACKED,\n    source: TABLE,\n    transform: [{\n      type: 'aggregate',\n      groupby: [encoding.field(dim)].concat(facets), // dim and other facets\n      fields: [{op: 'sum', field: encoding.field(val)}] // TODO check if field with aggr is correct?\n    }]\n  };\n\n  if (facets && facets.length > 0) {\n    stacked.transform.push({ //calculate max for each facet\n      type: 'aggregate',\n      groupby: facets,\n      fields: [{op: 'max', field: 'data.sum_' + encoding.field(val, true)}]\n    });\n  }\n\n  spec.data.push(stacked);\n\n  // add stack transform to mark\n  mdef.from.transform = [{\n    type: 'stack',\n    point: encoding.field(dim),\n    height: encoding.field(val),\n    output: {y1: val, y0: val + '2'}\n  }];\n\n  // TODO: This is super hack-ish -- consolidate into modular mark properties?\n  mdef.properties.update[val] = mdef.properties.enter[val] = {scale: val, field: val};\n  mdef.properties.update[val + '2'] = mdef.properties.enter[val + '2'] = {scale: val, field: val + '2'};\n\n  return val; //return stack encoding\n}\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  vlfield = require('../field'),\n  Encoding = require('../Encoding');\n\nmodule.exports = function(encoding, stats) {\n  return {\n    opacity: estimateOpacity(encoding, stats),\n    colorRange: colorRange(encoding, stats)\n  };\n};\n\nfunction colorRange(encoding, stats){\n  if (encoding.has(COLOR) && encoding.isDimension(COLOR)) {\n    var cardinality = encoding.cardinality(COLOR, stats);\n    if (cardinality <= 10) {\n      return \"category10\";\n    } else {\n      return \"category20\";\n    }\n    // TODO can vega interpolate range for ordinal scale?\n  }\n  return null;\n}\n\nfunction estimateOpacity(encoding,stats) {\n  if (!stats) {\n    return 1;\n  }\n\n  var numPoints = 0;\n\n  if (encoding.isAggregate()) { // aggregate plot\n    numPoints = 1;\n\n    //  get number of points in each \"cell\"\n    //  by calculating product of cardinality\n    //  for each non faceting and non-ordinal X / Y fields\n    //  note that ordinal x,y are not include since we can\n    //  consider that ordinal x are subdividing the cell into subcells anyway\n    encoding.forEach(function(field, encType) {\n\n      if (encType !== ROW && encType !== COL &&\n          !((encType === X || encType === Y) &&\n          vlfield.isOrdinalScale(field, true))\n        ) {\n        numPoints *= encoding.cardinality(encType, stats);\n      }\n    });\n\n  } else { // raw plot\n    numPoints = stats.count;\n\n    // small multiples divide number of points\n    var numMultiples = 1;\n    if (encoding.has(ROW)) {\n      numMultiples *= encoding.cardinality(ROW, stats);\n    }\n    if (encoding.has(COL)) {\n      numMultiples *= encoding.cardinality(COL, stats);\n    }\n    numPoints /= numMultiples;\n  }\n\n  var opacity = 0;\n  if (numPoints < 20) {\n    opacity = 1;\n  } else if (numPoints < 200) {\n    opacity = 0.7;\n  } else if (numPoints < 1000 || encoding.is('tick')) {\n    opacity = 0.6;\n  } else {\n    opacity = 0.3;\n  }\n\n  return opacity;\n}\n\n","'use strict';\n\nvar global = require('../globals');\n\nvar groupdef = require('./group').def;\n\nmodule.exports = subfaceting;\n\nfunction subfaceting(group, mdef, details, stack, encoding) {\n  var m = group.marks,\n    g = groupdef('subfacet', {marks: m});\n\n  group.marks = [g];\n  g.from = mdef.from;\n  delete mdef.from;\n\n  //TODO test LOD -- we should support stack / line without color (LOD) field\n  var trans = (g.from.transform || (g.from.transform = []));\n  trans.unshift({type: 'facet', keys: details});\n\n  if (stack && encoding.has(COLOR)) {\n    trans.unshift({type: 'sort', by: encoding.field(COLOR)});\n  }\n}\n","'use strict';\n\nvar globals = require('../globals');\n\nvar groupdef = require('./group').def,\n  vldata = require('../data');\n\nmodule.exports = template;\n\nfunction template(encoding, layout, stats) { //hack use stats\n\n  var data = {name: RAW, format: {type: encoding.data('formatType')}},\n    table = {name: TABLE, source: RAW},\n    dataUrl = vldata.getUrl(encoding, stats);\n  if (dataUrl) data.url = dataUrl;\n\n  var preaggregatedData = !!encoding.data('vegaServer');\n\n  encoding.forEach(function(field, encType) {\n    var name;\n    if (field.type == T) {\n      data.format.parse = data.format.parse || {};\n      data.format.parse[field.name] = 'date';\n    } else if (field.type == Q) {\n      data.format.parse = data.format.parse || {};\n      if (field.aggr === 'count') {\n        name = 'count';\n      } else if (preaggregatedData && field.bin) {\n        name = 'bin_' + field.name;\n      } else if (preaggregatedData && field.aggr) {\n        name = field.aggr + '_' + field.name;\n      } else {\n        name = field.name;\n      }\n      data.format.parse[name] = 'number';\n    }\n  });\n\n  return {\n    width: layout.width,\n    height: layout.height,\n    padding: 'auto',\n    data: [data, table],\n    marks: [groupdef('cell', {\n      width: layout.cellWidth ? {value: layout.cellWidth} : undefined,\n      height: layout.cellHeight ? {value: layout.cellHeight} : undefined\n    })]\n  };\n}\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util');\n\nmodule.exports = time;\n\nfunction time(spec, encoding, opt) {\n  var timeFields = {}, timeFn = {};\n\n  // find unique formula transformation and bin function\n  encoding.forEach(function(field, encType) {\n    if (field.type === T && field.fn) {\n      timeFields[encoding.field(encType)] = {\n        field: field,\n        encType: encType\n      };\n      timeFn[field.fn] = true;\n    }\n  });\n\n  // add formula transform\n  var data = spec.data[1],\n    transform = data.transform = data.transform || [];\n\n  for (var f in timeFields) {\n    var tf = timeFields[f];\n    time.transform(transform, encoding, tf.encType, tf.field);\n  }\n\n  // add scales\n  var scales = spec.scales = spec.scales || [];\n  for (var fn in timeFn) {\n    time.scale(scales, fn, encoding);\n  }\n  return spec;\n}\n\ntime.cardinality = function(field, stats, filterNull, type) {\n  var fn = field.fn;\n  switch (fn) {\n    case 'seconds': return 60;\n    case 'minutes': return 60;\n    case 'hours': return 24;\n    case 'day': return 7;\n    case 'date': return 31;\n    case 'month': return 12;\n    case 'year':\n      var stat = stats[field.name],\n        yearstat = stats['year_'+field.name];\n\n      if (!yearstat) { return null; }\n\n      return yearstat.cardinality -\n        (stat.numNulls > 0 && filterNull[type] ? 1 : 0);\n  }\n\n  return null;\n};\n\nfunction fieldFn(func, field) {\n  return 'utc' + func + '(d.data.'+ field.name +')';\n}\n\n/**\n * @return {String} date binning formula of the given field\n */\ntime.formula = function(field) {\n  return fieldFn(field.fn, field);\n};\n\n/** add formula transforms to data */\ntime.transform = function(transform, encoding, encType, field) {\n  transform.push({\n    type: 'formula',\n    field: encoding.field(encType),\n    expr: time.formula(field)\n  });\n};\n\n/** append custom time scales for axis label */\ntime.scale = function(scales, fn, encoding) {\n  var labelLength = encoding.config('timeScaleLabelLength');\n  // TODO add option for shorter scale / custom range\n  switch (fn) {\n    case 'day':\n      scales.push({\n        name: 'time-'+fn,\n        type: 'ordinal',\n        domain: util.range(0, 7),\n        range: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'].map(\n          function(s) { return s.substr(0, labelLength);}\n        )\n      });\n      break;\n    case 'month':\n      scales.push({\n        name: 'time-'+fn,\n        type: 'ordinal',\n        domain: util.range(0, 12),\n        range: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'].map(\n            function(s) { return s.substr(0, labelLength);}\n          )\n      });\n      break;\n  }\n};\n\ntime.isOrdinalFn = function(fn) {\n  switch (fn) {\n    case 'seconds':\n    case 'minutes':\n    case 'hours':\n    case 'day':\n    case 'date':\n    case 'month':\n      return true;\n  }\n  return false;\n};\n\ntime.scale.type = function(fn, name) {\n  if (name === COLOR) {\n    return 'linear'; // this has order\n  }\n\n  return time.isOrdinalFn(fn) || name === COL || name === ROW ? 'ordinal' : 'linear';\n};\n\ntime.scale.domain = function(fn, name) {\n  var isColor = name === COLOR;\n  switch (fn) {\n    case 'seconds':\n    case 'minutes': return isColor ? [0,59] : util.range(0, 60);\n    case 'hours': return isColor ? [0,23] : util.range(0, 24);\n    case 'day': return isColor ? [0,6] : util.range(0, 7);\n    case 'date': return isColor ? [1,31] : util.range(1, 32);\n    case 'month': return isColor ? [0,11] : util.range(0, 12);\n  }\n  return null;\n};\n\n/** whether a particular time function has custom scale for labels implemented in time.scale */\ntime.hasScale = function(fn) {\n  switch (fn) {\n    case 'day':\n    case 'month':\n      return true;\n  }\n  return false;\n};\n\n\n","'use strict';\n\nvar globals = require('./globals');\n\nvar consts = module.exports = {};\n\nconsts.encodingTypes = [X, Y, ROW, COL, SIZE, SHAPE, COLOR, ALPHA, TEXT, DETAIL];\n\nconsts.dataTypes = {'O': O, 'Q': Q, 'T': T};\n\nconsts.dataTypeNames = ['O', 'Q', 'T'].reduce(function(r, x) {\n  r[consts.dataTypes[x]] = x;\n  return r;\n},{});\n\nconsts.shorthand = {\n  delim:  '|',\n  assign: '=',\n  type:   ',',\n  func:   '_'\n};\n","'use strict';\n\n// TODO: rename getDataUrl to vl.data.getUrl() ?\n\nvar util = require('./util');\n\nvar vldata = module.exports = {},\n  vlfield = require('./field');\n\nvldata.getUrl = function getDataUrl(encoding, stats) {\n  if (!encoding.data('vegaServer')) {\n    // don't use vega server\n    return encoding.data('url');\n  }\n\n  if (encoding.length() === 0) {\n    // no fields\n    return;\n  }\n\n  var fields = [];\n  encoding.forEach(function(field, encType) {\n    var obj = {\n      name: encoding.field(encType, true),\n      field: field.name\n    };\n    if (field.aggr) {\n      obj.aggr = field.aggr;\n    }\n    if (field.bin) {\n      obj.binSize = util.getbins(stats[field.name], encoding.bin(encType).maxbins).step;\n    }\n    fields.push(obj);\n  });\n\n  var query = {\n    table: encoding.data('vegaServer').table,\n    fields: fields\n  };\n\n  return encoding.data('vegaServer').url + '/query/?q=' + JSON.stringify(query);\n};\n\n/**\n * @param  {Object} data data in JSON/javascript object format\n * @return Array of {name: __name__, type: \"number|text|time|location\"}\n */\nvldata.getSchema = function(data, order) {\n  var schema = [],\n    fields = util.keys(data[0]);\n\n  fields.forEach(function(k) {\n    // find non-null data\n    var i = 0, datum = data[i][k];\n    while (datum === '' || datum === null || datum === undefined) {\n      datum = data[++i][k];\n      if (i >= data.length) {\n        datum = '';\n        break;\n      }\n    }\n\n    datum = util.parse(datum);\n    var type = (typeof datum === 'number') ? 'Q':\n      (datum instanceof Date) ? 'T' : 'O';\n\n    schema.push({name: k, type: type});\n  });\n\n  schema = util.stablesort(schema, order || vlfield.order.typeThenName, vlfield.order.name);\n\n  return schema;\n};\n\nvldata.getStats = function(data) { // hack\n  var stats = {},\n    fields = util.keys(data[0]);\n\n  fields.forEach(function(k) {\n    var column = data.map(function(d) {return d[k];});\n\n    // Hack\n    var val = util.parse(data[0][k]);\n    var type = (typeof val === 'number') ? 'Q':\n      (val instanceof Date) ? 'T' : 'O';\n\n    var stat = {};\n    if (typeof val === 'number') {\n      stat = util.minmax(util.numbers(column));\n    } else if (val instanceof Date) {\n      stat = util.minmax(util.dates(column));\n    } else {\n      stat = util.minmax(column);\n    }\n\n    stat.cardinality = util.uniq(data, k);\n    stat.count = data.length;\n\n    stat.maxlength = data.reduce(function(max,row) {\n      if (row[k] === null) {\n        return max;\n      }\n      var len = row[k].toString().length;\n      return len > max ? len : max;\n    }, 0);\n\n    stat.numNulls = data.reduce(function(count, row) {\n      return row[k] === null ? count + 1 : count;\n    }, 0);\n\n    var numbers = util.numbers(column);\n\n    if (numbers.length > 0) {\n      stat.skew = util.skew(numbers);\n      stat.stdev = util.stdev(numbers);\n      stat.mean = util.mean(numbers);\n      stat.median = util.median(numbers);\n    }\n\n    var sample = {};\n    while(Object.keys(sample).length < Math.min(stat.cardinality, 10)) {\n      var value = data[Math.floor(Math.random() * data.length)][k];\n      sample[value] = true;\n    }\n    stat.sample = Object.keys(sample);\n\n    stats[k] = stat;\n  });\n  stats.count = data.length;\n  return stats;\n};\n","// utility for enc\n\n'use strict';\n\nvar consts = require('./consts'),\n  c = consts.shorthand,\n  time = require('./compile/time'),\n  vlfield = require('./field'),\n  util = require('./util'),\n  schema = require('./schema/schema'),\n  encTypes = schema.encTypes;\n\nvar vlenc = module.exports = {};\n\nvlenc.countRetinal = function(enc) {\n  var count = 0;\n  if (enc.color) count++;\n  if (enc.alpha) count++;\n  if (enc.size) count++;\n  if (enc.shape) count++;\n  return count;\n};\n\nvlenc.has = function(enc, encType) {\n  var fieldDef = enc && enc[encType];\n  return fieldDef && fieldDef.name;\n};\n\nvlenc.isAggregate = function(enc) {\n  for (var k in enc) {\n    if (vlenc.has(enc, k) && enc[k].aggr) {\n      return true;\n    }\n  }\n  return false;\n};\n\nvlenc.forEach = function(enc, f) {\n  var i = 0;\n  encTypes.forEach(function(k) {\n    if (vlenc.has(enc, k)) {\n      f(enc[k], k, i++);\n    }\n  });\n};\n\nvlenc.map = function(enc, f) {\n  var arr = [];\n  encTypes.forEach(function(k) {\n    if (vlenc.has(enc, k)) {\n      arr.push(f(enc[k], k, enc));\n    }\n  });\n  return arr;\n};\n\nvlenc.reduce = function(enc, f, init) {\n  var r = init, i = 0, k;\n  encTypes.forEach(function(k) {\n    if (vlenc.has(enc, k)) {\n      r = f(r, enc[k], k,  enc);\n    }\n  });\n  return r;\n};\n\n/*\n * return key-value pairs of field name and list of fields of that field name\n */\nvlenc.fields = function(enc) {\n  return vlenc.reduce(enc, function (m, field, encType) {\n    var fieldList = m[field.name] = m[field.name] || [],\n      containsType = fieldList.containsType = fieldList.containsType || {};\n\n    if (fieldList.indexOf(field) === -1) {\n      fieldList.push(field);\n      // augment the array with containsType.Q / O / T\n      containsType[field.type] = true;\n    }\n    return m;\n  }, {});\n};\n\nvlenc.shorthand = function(enc) {\n  return vlenc.map(enc, function(field, et) {\n    return et + c.assign + vlfield.shorthand(field);\n  }).join(c.delim);\n};\n\nvlenc.fromShorthand = function(shorthand, convertType) {\n  var enc = util.isArray(shorthand) ? shorthand : shorthand.split(c.delim);\n  return enc.reduce(function(m, e) {\n    var split = e.split(c.assign),\n        enctype = split[0].trim(),\n        field = split[1];\n\n    m[enctype] = vlfield.fromShorthand(field, convertType);\n    return m;\n  }, {});\n};","'use strict';\n\n// utility for field\n\nvar consts = require('./consts'),\n  c = consts.shorthand,\n  time = require('./compile/time'),\n  util = require('./util'),\n  schema = require('./schema/schema');\n\nvar vlfield = module.exports = {};\n\nvlfield.shorthand = function(f) {\n  var c = consts.shorthand;\n  return (f.aggr ? f.aggr + c.func : '') +\n    (f.fn ? f.fn + c.func : '') +\n    (f.bin ? 'bin' + c.func : '') +\n    (f.name || '') + c.type +\n    (consts.dataTypeNames[f.type] || f.type);\n};\n\nvlfield.shorthands = function(fields, delim) {\n  delim = delim || c.delim;\n  return fields.map(vlfield.shorthand).join(delim);\n};\n\nvlfield.fromShorthand = function(shorthand, convertType) {\n  var split = shorthand.split(c.type), i;\n  var o = {\n    name: split[0].trim(),\n    type: convertType ? consts.dataTypes[split[1].trim()] : split[1].trim()\n  };\n\n  // check aggregate type\n  for (i in schema.aggr.enum) {\n    var a = schema.aggr.enum[i];\n    if (o.name.indexOf(a + '_') === 0) {\n      o.name = o.name.substr(a.length + 1);\n      if (a == 'count' && o.name.length === 0) o.name = '*';\n      o.aggr = a;\n      break;\n    }\n  }\n\n  // check time fn\n  for (i in schema.timefns) {\n    var f = schema.timefns[i];\n    if (o.name && o.name.indexOf(f + '_') === 0) {\n      o.name = o.name.substr(o.length + 1);\n      o.fn = f;\n      break;\n    }\n  }\n\n  // check bin\n  if (o.name && o.name.indexOf('bin_') === 0) {\n    o.name = o.name.substr(4);\n    o.bin = true;\n  }\n\n  return o;\n};\n\nvar typeOrder = {\n  O: 0,\n  G: 1,\n  T: 2,\n  Q: 3\n};\n\nvlfield.order = {};\n\nvlfield.order.type = function(field) {\n  if (field.aggr==='count') return 4;\n  return typeOrder[field.type];\n};\n\nvlfield.order.typeThenName = function(field) {\n  return vlfield.order.type(field) + '_' + field.name.toLowerCase();\n};\n\nvlfield.order.original = function() {\n  return 0; // no swap will occur\n};\n\nvlfield.order.name = function(field) {\n  return field.name;\n};\n\nvlfield.order.typeThenCardinality = function(field, stats){\n  return stats[field.name].cardinality;\n};\n\n// FIXME refactor\nvlfield.isType = function (fieldDef, type) {\n  return (fieldDef.type & type) > 0;\n};\n\nvlfield.isType.byCode = vlfield.isType;\n\nvlfield.isType.byName = function (field, type) {\n  return field.type === consts.dataTypeNames[type];\n};\n\n\nfunction getIsType(useTypeCode) {\n  return useTypeCode ? vlfield.isType.byCode : vlfield.isType.byName;\n}\n\nvlfield.isType.get = getIsType; //FIXME\n\n/*\n * Most fields that use ordinal scale are dimensions.\n * However, YEAR(T), YEARMONTH(T) use time scale, not ordinal but are dimensions too.\n */\nvlfield.isOrdinalScale = function(field, useTypeCode /*optional*/) {\n  var isType = getIsType(useTypeCode);\n  return  isType(field, O) || field.bin ||\n    ( isType(field, T) && field.fn && time.isOrdinalFn(field.fn) );\n};\n\nfunction isDimension(field, useTypeCode /*optional*/) {\n  var isType = getIsType(useTypeCode);\n  return  isType(field, O) || !!field.bin ||\n    ( isType(field, T) && !!field.fn );\n}\n\n/**\n * For encoding, use encoding.isDimension() to avoid confusion.\n * Or use Encoding.isType if your field is from Encoding (and thus have numeric data type).\n * otherwise, do not specific isType so we can use the default isTypeName here.\n */\nvlfield.isDimension = function(field, useTypeCode /*optional*/) {\n  return field && isDimension(field, useTypeCode);\n};\n\nvlfield.isMeasure = function(field, useTypeCode) {\n  return field && !isDimension(field, useTypeCode);\n};\n\nvlfield.role = function(field) {\n  return isDimension(field) ? 'dimension' : 'measure';\n};\n\nvlfield.count = function() {\n  return {name:'*', aggr: 'count', type:'Q', displayName: vlfield.count.displayName};\n};\n\nvlfield.count.displayName = 'Number of Records';\n\nvlfield.isCount = function(field) {\n  return field.aggr === 'count';\n};\n\n/**\n * For encoding, use encoding.cardinality() to avoid confusion.  Or use Encoding.isType if your field is from Encoding (and thus have numeric data type).\n * otherwise, do not specific isType so we can use the default isTypeName here.\n */\nvlfield.cardinality = function(field, stats, filterNull, useTypeCode) {\n  // FIXME need to take filter into account\n  var isType = getIsType(useTypeCode),\n    type = useTypeCode ? consts.dataTypeNames[field.type] : field.type;\n\n  filterNull = filterNull || {};\n\n  if (field.bin) {\n    var bins = util.getbins(stats[field.name], field.bin.maxbins || schema.MAXBINS_DEFAULT);\n    return (bins.stop - bins.start) / bins.step;\n  }\n  if (isType(field, T)) {\n    var cardinality = time.cardinality(field, stats, filterNull, type);\n    if(cardinality !== null) return cardinality;\n    //otherwise use calculation below\n  }\n  if (field.aggr) {\n    return 1;\n  }\n\n  // remove null\n  var stat = stats[field.name];\n  return stat.cardinality -\n    (stat.numNulls > 0 && filterNull[type] ? 1 : 0);\n};\n","'use strict';\n\n// declare global constant\nvar g = global || window;\n\ng.TABLE = 'table';\ng.RAW = 'raw';\ng.STACKED = 'stacked';\ng.INDEX = 'index';\n\ng.X = 'x';\ng.Y = 'y';\ng.ROW = 'row';\ng.COL = 'col';\ng.SIZE = 'size';\ng.SHAPE = 'shape';\ng.COLOR = 'color';\ng.ALPHA = 'alpha';\ng.TEXT = 'text';\ng.DETAIL = 'detail';\n\ng.O = 1;\ng.Q = 2;\ng.T = 4;\n","// Package of defining Vegalite Specification's json schema\n\"use strict\";\n\nvar schema = module.exports = {},\n  util = require('../util');\n\nschema.util = require('./schemautil');\n\nschema.marktype = {\n  type: 'string',\n  enum: ['point', 'tick', 'bar', 'line', 'area', 'circle', 'square', 'text']\n};\n\nschema.aggr = {\n  type: 'string',\n  enum: ['avg', 'sum', 'min', 'max', 'count'],\n  supportedEnums: {\n    Q: ['avg', 'sum', 'min', 'max', 'count'],\n    O: [],\n    T: ['avg', 'min', 'max'],\n    '': ['count']\n  },\n  supportedTypes: {'Q': true, 'O': true, 'T': true, '': true}\n};\nschema.band = {\n  type: 'object',\n  properties: {\n    size: {\n      type: 'integer',\n      minimum: 0\n    },\n    padding: {\n      type: 'integer',\n      minimum: 0,\n      default: 1\n    }\n  }\n};\n\nschema.getSupportedRole = function(encType) {\n  return schema.schema.properties.enc.properties[encType].supportedRole;\n};\n\nschema.timefns = ['year', 'month', 'day', 'date', 'hours', 'minutes', 'seconds'];\n\nschema.defaultTimeFn = 'month';\n\nschema.fn = {\n  type: 'string',\n  enum: schema.timefns,\n  supportedTypes: {'T': true}\n};\n\n//TODO(kanitw): add other type of function here\n\nschema.scale_type = {\n  type: 'string',\n  enum: ['linear', 'log', 'pow', 'sqrt', 'quantile'],\n  default: 'linear',\n  supportedTypes: {'Q': true}\n};\n\nschema.field = {\n  type: 'object',\n  properties: {\n    name: {\n      type: 'string'\n    }\n  }\n};\n\nvar clone = util.duplicate;\nvar merge = schema.util.merge;\n\nschema.MAXBINS_DEFAULT = 15;\n\nvar bin = {\n  type: ['boolean', 'object'],\n  default: false,\n  properties: {\n    maxbins: {\n      type: 'integer',\n      default: schema.MAXBINS_DEFAULT,\n      minimum: 2\n    }\n  },\n  supportedTypes: {'Q': true} // TODO: add 'O' after finishing #81\n};\n\nvar typicalField = merge(clone(schema.field), {\n  type: 'object',\n  properties: {\n    type: {\n      type: 'string',\n      enum: ['O', 'Q', 'T']\n    },\n    aggr: schema.aggr,\n    fn: schema.fn,\n    bin: bin,\n    scale: {\n      type: 'object',\n      properties: {\n        type: schema.scale_type,\n        reverse: {\n          type: 'boolean',\n          default: false,\n          supportedTypes: {'Q': true, 'T': true}\n        },\n        zero: {\n          type: 'boolean',\n          description: 'Include zero',\n          default: true,\n          supportedTypes: {'Q': true, 'T': true}\n        },\n        nice: {\n          type: 'string',\n          enum: ['second', 'minute', 'hour', 'day', 'week', 'month', 'year'],\n          supportedTypes: {'T': true}\n        }\n      }\n    }\n  }\n});\n\nvar onlyOrdinalField = merge(clone(schema.field), {\n  type: 'object',\n  supportedRole: {\n    dimension: true\n  },\n  properties: {\n    type: {\n      type: 'string',\n      enum: ['O','Q', 'T'] // ordinal-only field supports Q when bin is applied and T when fn is applied.\n    },\n    fn: schema.fn,\n    bin: bin,\n    aggr: {\n      type: 'string',\n      enum: ['count'],\n      supportedTypes: {'O': true}\n    }\n  }\n});\n\nvar axisMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true},\n  properties: {\n    axis: {\n      type: 'object',\n      properties: {\n        grid: {\n          type: 'boolean',\n          default: true,\n          description: 'A flag indicate if gridlines should be created in addition to ticks.'\n        },\n        title: {\n          type: 'boolean',\n          default: true,\n          description: 'A title for the axis.'\n        },\n        titleOffset: {\n          type: 'integer',\n          default: undefined,  // auto\n          description: 'A title offset value for the axis.'\n        },\n        format: {\n          type: 'string',\n          default: undefined,  // auto\n          description: 'The formatting pattern for axis labels.'\n        },\n        maxLabelLength: {\n          type: 'integer',\n          default: 25,\n          minimum: 0,\n          description: 'Truncate labels that are too long.'\n        }\n      }\n    }\n  }\n};\n\nvar sortMixin = {\n  type: 'object',\n  properties: {\n    sort: {\n      type: 'array',\n      default: [],\n      items: {\n        type: 'object',\n        supportedTypes: {'O': true},\n        required: ['name', 'aggr'],\n        name: {\n          type: 'string'\n        },\n        aggr: {\n          type: 'string',\n          enum: ['avg', 'sum', 'min', 'max', 'count']\n        },\n        reverse: {\n          type: 'boolean',\n          default: false\n        }\n      }\n    }\n  }\n};\n\nvar bandMixin = {\n  type: 'object',\n  properties: {\n    band: schema.band\n  }\n};\n\nvar legendMixin = {\n  type: 'object',\n  properties: {\n    legend: {\n      type: 'boolean',\n      default: true\n    }\n  }\n};\n\nvar textMixin = {\n  type: 'object',\n  supportedMarktypes: {'text': true},\n  properties: {\n    text: {\n      type: 'object',\n      properties: {\n        align: {\n          type: 'string',\n          default: 'left'\n        },\n        baseline: {\n          type: 'string',\n          default: 'middle'\n        },\n        margin: {\n          type: 'integer',\n          default: 4,\n          minimum: 0\n        }\n      }\n    },\n    font: {\n      type: 'object',\n      properties: {\n        weight: {\n          type: 'string',\n          enum: ['normal', 'bold'],\n          default: 'normal'\n        },\n        size: {\n          type: 'integer',\n          default: 10,\n          minimum: 0\n        },\n        family: {\n          type: 'string',\n          default: 'Helvetica Neue'\n        },\n        style: {\n          type: 'string',\n          default: 'normal',\n          enum: ['normal', 'italic']\n        }\n      }\n    }\n  }\n};\n\nvar sizeMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, bar: true, circle: true, square: true, text: true},\n  properties: {\n    value: {\n      type: 'integer',\n      default: 30,\n      minimum: 0\n    }\n  }\n};\n\nvar colorMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true, 'text': true},\n  properties: {\n    value: {\n      type: 'string',\n      role: 'color',\n      default: 'steelblue'\n    },\n    scale: {\n      type: 'object',\n      properties: {\n        range: {\n          type: ['string', 'array']\n        }\n      }\n    }\n  }\n};\n\nvar alphaMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true, 'text': true},\n  properties: {\n    value: {\n      type: 'number',\n      default: undefined,  // auto\n      minimum: 0,\n      maximum: 1\n    }\n  }\n};\n\nvar shapeMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, circle: true, square: true},\n  properties: {\n    value: {\n      type: 'string',\n      enum: ['circle', 'square', 'cross', 'diamond', 'triangle-up', 'triangle-down'],\n      default: 'circle'\n    }\n  }\n};\n\nvar detailMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, line: true, circle: true, square: true}\n};\n\nvar rowMixin = {\n  properties: {\n    height: {\n      type: 'number',\n      minimum: 0,\n      default: 150\n    },\n    grid: {\n      type: 'boolean',\n      default: true,\n      description: 'A flag indicate if gridlines should be created in addition to ticks.'\n    },\n  }\n};\n\nvar colMixin = {\n  properties: {\n    width: {\n      type: 'number',\n      minimum: 0,\n      default: 150\n    },\n    axis: {\n      properties: {\n        maxLabelLength: {\n          type: 'integer',\n          default: 12,\n          minimum: 0,\n          description: 'Truncate labels that are too long.'\n        }\n      }\n    }\n  }\n};\n\nvar facetMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true, text: true},\n  properties: {\n    padding: {\n      type: 'number',\n      minimum: 0,\n      maximum: 1,\n      default: 0.1\n    }\n  }\n};\n\nvar requiredNameType = {\n  required: ['name', 'type']\n};\n\nvar multiRoleField = merge(clone(typicalField), {\n  supportedRole: {\n    measure: true,\n    dimension: true\n  }\n});\n\nvar quantitativeField = merge(clone(typicalField), {\n  supportedRole: {\n    measure: true,\n    dimension: 'ordinal-only' // using alpha / size to encoding category lead to order interpretation\n  }\n});\n\nvar onlyQuantitativeField = merge(clone(typicalField), {\n  supportedRole: {\n    measure: true\n  }\n});\n\nvar x = merge(clone(multiRoleField), axisMixin, bandMixin, requiredNameType, sortMixin);\nvar y = clone(x);\n\nvar facet = merge(clone(onlyOrdinalField), requiredNameType, facetMixin, sortMixin);\nvar row = merge(clone(facet), axisMixin, rowMixin);\nvar col = merge(clone(facet), axisMixin, colMixin);\n\nvar size = merge(clone(quantitativeField), legendMixin, sizeMixin, sortMixin);\nvar color = merge(clone(multiRoleField), legendMixin, colorMixin, sortMixin);\nvar alpha = merge(clone(quantitativeField), alphaMixin, sortMixin);\nvar shape = merge(clone(onlyOrdinalField), legendMixin, shapeMixin, sortMixin);\nvar detail = merge(clone(onlyOrdinalField), detailMixin, sortMixin);\n\n// we only put aggregated measure in pivot table\nvar text = merge(clone(onlyQuantitativeField), textMixin, sortMixin);\n\n// TODO add label\n\nvar filter = {\n  type: 'array',\n  items: {\n    type: 'object',\n    properties: {\n      operands: {\n        type: 'array',\n        items: {\n          type: ['string', 'boolean', 'integer', 'number']\n        }\n      },\n      operator: {\n        type: 'string',\n        enum: ['>', '>=', '=', '!=', '<', '<=', 'notNull']\n      }\n    }\n  }\n};\n\nvar data = {\n  type: 'object',\n  properties: {\n    // data source\n    formatType: {\n      type: 'string',\n      enum: ['json', 'csv'],\n      default: 'json'\n    },\n    url: {\n      type: 'string',\n      default: undefined\n    },\n    vegaServer: {\n      type: 'object',\n      default: null,\n      properties: {\n        table: {\n          type: 'string',\n          default: undefined\n        },\n        url: {\n          type: 'string',\n          default: 'http://localhost:3001'\n        }\n      }\n    }\n  }\n};\n\nconsole.log(schema.util.instantiate(data));\n\nvar config = {\n  type: 'object',\n  properties: {\n    // template\n    width: {\n      type: 'integer',\n      default: undefined\n    },\n    height: {\n      type: 'integer',\n      default: undefined\n    },\n    viewport: {\n      type: 'array',\n      items: {\n        type: 'integer'\n      },\n      default: undefined\n    },\n    gridColor: {\n      type: 'string',\n      role: 'color',\n      default: '#eeeeee'\n    },\n\n    // filter null\n    filterNull: {\n      type: 'object',\n      properties: {\n        O: {type:'boolean', default: false},\n        Q: {type:'boolean', default: true},\n        T: {type:'boolean', default: true}\n      }\n    },\n    toggleSort: {\n      type: 'string',\n      default: 'O'\n    },\n\n    // single plot\n    singleHeight: {\n      // will be overwritten by bandWidth * (cardinality + padding)\n      type: 'integer',\n      default: 200,\n      minimum: 0\n    },\n    singleWidth: {\n      // will be overwritten by bandWidth * (cardinality + padding)\n      type: 'integer',\n      default: 200,\n      minimum: 0\n    },\n    // band size\n    largeBandSize: {\n      type: 'integer',\n      default: 21,\n      minimum: 0\n    },\n    smallBandSize: {\n      //small multiples or single plot with high cardinality\n      type: 'integer',\n      default: 12,\n      minimum: 0\n    },\n    largeBandMaxCardinality: {\n      type: 'integer',\n      default: 10\n    },\n    // small multiples\n    cellPadding: {\n      type: 'number',\n      default: 0.1\n    },\n    cellGridColor: {\n      type: 'string',\n      role: 'color',\n      default: '#aaaaaa'\n    },\n    cellBackgroundColor: {\n      type: 'string',\n      role: 'color',\n      default: 'transparent'\n    },\n    textCellWidth: {\n      type: 'integer',\n      default: 90,\n      minimum: 0\n    },\n\n    // marks\n    strokeWidth: {\n      type: 'integer',\n      default: 2,\n      minimum: 0\n    },\n\n    // scales\n    timeScaleLabelLength: {\n      type: 'integer',\n      default: 3,\n      minimum: 0\n    },\n    // other\n    characterWidth: {\n      type: 'integer',\n      default: 6\n    }\n  }\n};\n\n/** @type Object Schema of a vegalite specification */\nschema.schema = {\n  $schema: 'http://json-schema.org/draft-04/schema#',\n  description: 'Schema for vegalite specification',\n  type: 'object',\n  required: ['marktype', 'enc', 'data', 'config'],\n  properties: {\n    data: data,\n    marktype: schema.marktype,\n    enc: {\n      type: 'object',\n      properties: {\n        x: x,\n        y: y,\n        row: row,\n        col: col,\n        size: size,\n        color: color,\n        alpha: alpha,\n        shape: shape,\n        text: text,\n        detail: detail\n      }\n    },\n    filter: filter,\n    config: config\n  }\n};\n\nschema.encTypes = util.keys(schema.schema.properties.enc.properties);\n\n/** Instantiate a verbose vl spec from the schema */\nschema.instantiate = function() {\n  return schema.util.instantiate(schema.schema);\n};\n","'use strict';\n\nvar schemautil = module.exports = {},\n  util = require('../util');\n\nvar isEmpty = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\nschemautil.extend = function(instance, schema) {\n  return schemautil.merge(schemautil.instantiate(schema), instance);\n};\n\n// instantiate a schema\nschemautil.instantiate = function(schema) {\n  var val;\n  if (schema === undefined) {\n    return undefined;\n  } else if ('default' in schema) {\n    val = schema.default;\n    return util.isObject(val) ? util.duplicate(val) : val;\n  } else if (schema.type === 'object') {\n    var instance = {};\n    for (var name in schema.properties) {\n      val = schemautil.instantiate(schema.properties[name]);\n      if (val !== undefined) {\n        instance[name] = val;\n      }\n    }\n    return instance;\n  } else if (schema.type === 'array') {\n    return [];\n  }\n  return undefined;\n};\n\n// remove all defaults from an instance\nschemautil.subtract = function(instance, defaults) {\n  var changes = {};\n  for (var prop in instance) {\n    var def = defaults[prop];\n    var ins = instance[prop];\n    // Note: does not properly subtract arrays\n    if (!defaults || def !== ins) {\n      if (typeof ins === 'object' && !util.isArray(ins) && def) {\n        var c = schemautil.subtract(ins, def);\n        if (!isEmpty(c))\n          changes[prop] = c;\n      } else if (!util.isArray(ins) || ins.length > 0) {\n        changes[prop] = ins;\n      }\n    }\n  }\n  return changes;\n};\n\nschemautil.merge = function(/*dest*, src0, src1, ...*/){\n  var dest = arguments[0];\n  for (var i=1 ; i<arguments.length; i++) {\n    dest = merge(dest, arguments[i]);\n  }\n  return dest;\n};\n\n// recursively merges src into dest\nfunction merge(dest, src) {\n  if (typeof src !== 'object' || src === null) {\n    return dest;\n  }\n\n  for (var p in src) {\n    if (!src.hasOwnProperty(p)) {\n      continue;\n    }\n    if (src[p] === undefined) {\n      continue;\n    }\n    if (typeof src[p] !== 'object' || src[p] === null) {\n      dest[p] = src[p];\n    } else if (typeof dest[p] !== 'object' || dest[p] === null) {\n      dest[p] = merge(src[p].constructor === Array ? [] : {}, src[p]);\n    } else {\n      merge(dest[p], src[p]);\n    }\n  }\n  return dest;\n}","'use strict';\n\nvar util = module.exports = {};\n\nutil.keys = function(obj) {\n  var k = [], x;\n  for (x in obj) k.push(x);\n  return k;\n};\n\nutil.vals = function(obj) {\n  var v = [], x;\n  for (x in obj) v.push(obj[x]);\n  return v;\n};\n\nutil.range = function(start, stop, step) {\n  if (arguments.length < 3) {\n    step = 1;\n    if (arguments.length < 2) {\n      stop = start;\n      start = 0;\n    }\n  }\n  if ((stop - start) / step == Infinity) throw new Error('infinite range');\n  var range = [], i = -1, j;\n  if (step < 0) while ((j = start + step * ++i) > stop) range.push(j);\n  else while ((j = start + step * ++i) < stop) range.push(j);\n  return range;\n};\n\nutil.find = function(list, pattern) {\n  var l = list.filter(function(x) {\n    return x[pattern.name] === pattern.value;\n  });\n  return l.length && l[0] || null;\n};\n\nutil.isin = function(item, array) {\n  return array.indexOf(item) !== -1;\n};\n\nutil.uniq = function(data, field) {\n  var map = {}, count = 0, i, k;\n  for (i = 0; i < data.length; ++i) {\n    k = data[i][field];\n    if (!map[k]) {\n      map[k] = 1;\n      count += 1;\n    }\n  }\n  return count;\n};\n\nvar isNumber = function(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n};\n\n// try parsing to number\nutil.numbers = function(values) {\n  var nums = [];\n  for (var i = 0; i < values.length; i++) {\n    if (isNumber(values[i])) {\n      nums.push(+values[i]);\n    }\n  }\n  return nums;\n};\n\n// try to parse as date\nutil.dates = function(values) {\n  var dates = [];\n  for (var i = 0; i < values.length; i++) {\n    var date = Date.parse(values[i]);\n    if (!isNaN(date)) {\n      dates.push(new Date(date));\n    }\n  }\n  return dates;\n};\n\nutil.median = function(values) {\n  values.sort(function(a, b) {return a - b;});\n  var half = Math.floor(values.length/2);\n  if (values.length % 2) {\n    return values[half];\n  } else {\n    return (values[half-1] + values[half]) / 2.0;\n  }\n};\n\nutil.mean = function(values) {\n  return values.reduce(function(v, r) {return v + r;}, 0) / values.length;\n};\n\nutil.variance = function(values) {\n  var avg = util.mean(values);\n  var diffs = [];\n  for (var i = 0; i < values.length; i++) {\n    diffs.push(Math.pow((values[i] - avg), 2));\n  }\n  return util.mean(diffs);\n};\n\nutil.stablesort = function(array, sortBy, keyFn) {\n  var indices = {};\n\n  array.forEach(function(v, i) {\n    indices[keyFn(v)] = i;\n  });\n\n  array.sort(function(a, b) {\n    var sa = sortBy(a),\n      sb = sortBy(b);\n\n    return sa<sb ? -1 : sa>sb ? 1 : (indices[keyFn(a)] - indices[keyFn(b)]);\n  });\n  return array;\n};\n\nutil.stdev = function(values) {\n  return Math.sqrt(util.variance(values));\n};\n\nutil.skew = function(values) {\n  var avg = util.mean(values),\n    med = util.median(values),\n    std = util.stdev(values);\n  return 1.0 * (avg - med) / std;\n};\n\n// parses a string to date or number\nutil.parse = function(value) {\n  if (isNumber(value)) {\n    return +value;\n  }\n\n  var date = Date.parse(value);\n  if (!isNaN(date)) {\n    return (new Date(date));\n  }\n  return value;\n};\n\nutil.minmax = function(data) {\n  var stats = {min: +Infinity, max: -Infinity};\n  for (var i = 0; i < data.length; ++i) {\n    var v = data[i];\n    if (v !== null) {\n      if (v > stats.max || stats.max === -Infinity) stats.max = v;\n      if (v < stats.min || stats.min === +Infinity) stats.min = v;\n    }\n  }\n  return stats;\n};\n\nutil.duplicate = function(obj) {\n  return JSON.parse(JSON.stringify(obj));\n};\n\nutil.isObject = function(obj) {\n  return obj === Object(obj);\n};\n\nutil.isArray = Array.isArray || function(obj) {\n  return toString.call(obj) == '[object Array]';\n};\n\nutil.array = function(x) {\n  return x ? (util.isArray(x) ? x : [x]) : [];\n};\n\nutil.forEach = function(obj, f, thisArg) {\n  if (obj.forEach) {\n    obj.forEach.call(thisArg, f);\n  } else {\n    for (var k in obj) {\n      f.call(thisArg, obj[k], k , obj);\n    }\n  }\n};\n\nutil.reduce = function(obj, f, init, thisArg) {\n  if (obj.reduce) {\n    return obj.reduce.call(thisArg, f, init);\n  } else {\n    for (var k in obj) {\n      init = f.call(thisArg, init, obj[k], k, obj);\n    }\n    return init;\n  }\n};\n\nutil.map = function(obj, f, thisArg) {\n  if (obj.map) {\n    return obj.map.call(thisArg, f);\n  } else {\n    var output = [];\n    for (var k in obj) {\n      output.push( f.call(thisArg, obj[k], k, obj));\n    }\n  }\n};\n\nutil.any = function(arr, f) {\n  var i = 0, k;\n  for (k in arr) {\n    if (f(arr[k], k, i++)) return true;\n  }\n  return false;\n};\n\nutil.all = function(arr, f) {\n  var i = 0, k;\n  for (k in arr) {\n    if (!f(arr[k], k, i++)) return false;\n  }\n  return true;\n};\n\n\nutil.cmp = function(a, b) {\n  if (a < b) {\n    return -1;\n  } else if (a > b) {\n    return 1;\n  } else if (a >= b) {\n    return 0;\n  } else if (a === null && b === null) {\n    return 0;\n  } else if (a === null) {\n    return -1;\n  } else if (b === null) {\n    return 1;\n  }\n  return NaN;\n};\n\nvar merge = function(dest, src) {\n  return util.keys(src).reduce(function(c, k) {\n    c[k] = src[k];\n    return c;\n  }, dest);\n};\n\nutil.merge = function(/*dest*, src0, src1, ...*/){\n  var dest = arguments[0];\n  for (var i=1 ; i<arguments.length; i++) {\n    dest = merge(dest, arguments[i]);\n  }\n  return dest;\n};\n\nutil.getbins = function(stats, maxbins) {\n  return util.bins({\n    min: stats.min,\n    max: stats.max,\n    maxbins: maxbins\n  });\n};\n\n\nutil.bins = function(opt) {\n  opt = opt || {};\n\n  // determine range\n  var maxb = opt.maxbins || 1024,\n      base = opt.base || 10,\n      div = opt.div || [5, 2],\n      mins = opt.minstep || 0,\n      logb = Math.log(base),\n      level = Math.ceil(Math.log(maxb) / logb),\n      min = opt.min,\n      max = opt.max,\n      span = max - min,\n      step = Math.max(mins, Math.pow(base, Math.round(Math.log(span) / logb) - level)),\n      nbins = Math.ceil(span / step),\n      precision, v, i, eps;\n\n  if (opt.step) {\n    step = opt.step;\n  } else if (opt.steps) {\n    // if provided, limit choice to acceptable step sizes\n    step = opt.steps[Math.min(\n        opt.steps.length - 1,\n        util_bisectLeft(opt.steps, span / maxb, 0, opt.steps.length)\n    )];\n  } else {\n    // increase step size if too many bins\n    do {\n      step *= base;\n      nbins = Math.ceil(span / step);\n    } while (nbins > maxb);\n\n    // decrease step size if allowed\n    for (i = 0; i < div.length; ++i) {\n      v = step / div[i];\n      if (v >= mins && span / v <= maxb) {\n        step = v;\n        nbins = Math.ceil(span / step);\n      }\n    }\n  }\n\n  // update precision, min and max\n  v = Math.log(step);\n  precision = v >= 0 ? 0 : ~~(-v / logb) + 1;\n  eps = (min<0 ? -1 : 1) * Math.pow(base, -precision - 1);\n  min = Math.min(min, Math.floor(min / step + eps) * step);\n  max = Math.ceil(max / step) * step;\n\n  return {\n    start: min,\n    stop: max,\n    step: step,\n    unit: precision\n  };\n};\n\nfunction util_bisectLeft(a, x, lo, hi) {\n  while (lo < hi) {\n    var mid = lo + hi >>> 1;\n    if (util.cmp(a[mid], x) < 0) { lo = mid + 1; }\n    else { hi = mid; }\n  }\n  return lo;\n}\n\n/**\n * x[p[0]]...[p[n]] = val\n * @param noaugment determine whether new object should be added f\n * or non-existing properties along the path\n */\nutil.setter = function(x, p, val, noaugment) {\n  for (var i=0; i<p.length-1; ++i) {\n    if (!noaugment && !(p[i] in x)){\n      x = x[p[i]] = {};\n    } else {\n      x = x[p[i]];\n    }\n  }\n  x[p[i]] = val;\n};\n\n\n/**\n * returns x[p[0]]...[p[n]]\n * @param augment determine whether new object should be added f\n * or non-existing properties along the path\n */\nutil.getter = function(x, p, noaugment) {\n  for (var i=0; i<p.length; ++i) {\n    if (!noaugment && !(p[i] in x)){\n      x = x[p[i]] = {};\n    } else {\n      x = x[p[i]];\n    }\n  }\n  return x;\n};\n\nutil.truncate = function(s, length, pos, word, ellipsis) {\n  var len = s.length;\n  if (len <= length) return s;\n  ellipsis = ellipsis || \"...\";\n  var l = Math.max(0, length - ellipsis.length);\n\n  switch (pos) {\n    case \"left\":\n      return ellipsis + (word ? vg_truncateOnWord(s,l,1) : s.slice(len-l));\n    case \"middle\":\n    case \"center\":\n      var l1 = Math.ceil(l/2), l2 = Math.floor(l/2);\n      return (word ? vg_truncateOnWord(s,l1) : s.slice(0,l1)) + ellipsis +\n        (word ? vg_truncateOnWord(s,l2,1) : s.slice(len-l2));\n    default:\n      return (word ? vg_truncateOnWord(s,l) : s.slice(0,l)) + ellipsis;\n  }\n};\n\nfunction vg_truncateOnWord(s, len, rev) {\n  var cnt = 0, tok = s.split(vg_truncate_word_re);\n  if (rev) {\n    s = (tok = tok.reverse())\n      .filter(function(w) { cnt += w.length; return cnt <= len; })\n      .reverse();\n  } else {\n    s = tok.filter(function(w) { cnt += w.length; return cnt <= len; });\n  }\n  return s.length ? s.join(\"\").trim() : tok[0].slice(0, len);\n}\n\nvar vg_truncate_word_re = /([\\u0009\\u000A\\u000B\\u000C\\u000D\\u0020\\u00A0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u2028\\u2029\\u3000\\uFEFF])/;\n\n\nutil.error = function(msg) {\n  console.error('[VL Error]', msg);\n};\n\n"],"sourceRoot":"/source/"}