import { assert } from 'chai';
import { autoMaxBins, binToString, isBinParams } from '../src/bin';
import { COLOR, COLUMN, OPACITY, ROW, SHAPE } from '../src/channel';
describe('autoMaxBins', function () {
    it('should assign generate correct defaults for different channels', function () {
        // Not testing case for 10 because it's already tested
        [COLOR, OPACITY, SHAPE, ROW, COLUMN].forEach(function (a) { return assert.deepEqual(autoMaxBins(a), 6); });
    });
});
describe('binToString', function () {
    it('should generate the corrrect key for boolean', function () {
        assert.deepEqual(binToString(true), 'bin');
        assert.deepEqual(binToString(false), 'bin');
    });
});
describe('isBinParams', function () {
    it('should detect whether the input is BinParams or not', function () {
        assert.deepEqual(isBinParams(true), false);
        assert.deepEqual(isBinParams({}), true);
        assert.deepEqual(isBinParams({ extent: [0, 1] }), true);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi90ZXN0L2Jpbi50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDNUIsT0FBTyxFQUFDLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBQ2pFLE9BQU8sRUFBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFFbEUsUUFBUSxDQUFDLGFBQWEsRUFBRTtJQUN0QixFQUFFLENBQUMsZ0VBQWdFLEVBQUU7UUFDbkUsc0RBQXNEO1FBQ3RELENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFDLENBQUMsSUFBSyxPQUFBLE1BQU0sQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFuQyxDQUFtQyxDQUFDLENBQUM7SUFDM0YsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUVILFFBQVEsQ0FBQyxhQUFhLEVBQUU7SUFDdEIsRUFBRSxDQUFDLDhDQUE4QyxFQUFFO1FBQ2xELE1BQU0sQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzNDLE1BQU0sQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzdDLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxRQUFRLENBQUMsYUFBYSxFQUFFO0lBQ3RCLEVBQUUsQ0FBQyxxREFBcUQsRUFBRTtRQUN6RCxNQUFNLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMzQyxNQUFNLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN4QyxNQUFNLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxFQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdEQsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7YXNzZXJ0fSBmcm9tICdjaGFpJztcbmltcG9ydCB7YXV0b01heEJpbnMsIGJpblRvU3RyaW5nLCBpc0JpblBhcmFtc30gZnJvbSAnLi4vc3JjL2Jpbic7XG5pbXBvcnQge0NPTE9SLCBDT0xVTU4sIE9QQUNJVFksIFJPVywgU0hBUEV9IGZyb20gJy4uL3NyYy9jaGFubmVsJztcblxuZGVzY3JpYmUoJ2F1dG9NYXhCaW5zJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIGFzc2lnbiBnZW5lcmF0ZSBjb3JyZWN0IGRlZmF1bHRzIGZvciBkaWZmZXJlbnQgY2hhbm5lbHMnLCAoKSA9PiB7XG4gICAgLy8gTm90IHRlc3RpbmcgY2FzZSBmb3IgMTAgYmVjYXVzZSBpdCdzIGFscmVhZHkgdGVzdGVkXG4gICAgW0NPTE9SLCBPUEFDSVRZLCBTSEFQRSwgUk9XLCBDT0xVTU5dLmZvckVhY2goKGEpID0+IGFzc2VydC5kZWVwRXF1YWwoYXV0b01heEJpbnMoYSksIDYpKTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ2JpblRvU3RyaW5nJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIGdlbmVyYXRlIHRoZSBjb3JycmVjdCBrZXkgZm9yIGJvb2xlYW4nLCAoKSA9PiB7XG4gICBhc3NlcnQuZGVlcEVxdWFsKGJpblRvU3RyaW5nKHRydWUpLCAnYmluJyk7XG4gICBhc3NlcnQuZGVlcEVxdWFsKGJpblRvU3RyaW5nKGZhbHNlKSwgJ2JpbicpO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnaXNCaW5QYXJhbXMnLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgZGV0ZWN0IHdoZXRoZXIgdGhlIGlucHV0IGlzIEJpblBhcmFtcyBvciBub3QnLCAoKSA9PiB7XG4gICBhc3NlcnQuZGVlcEVxdWFsKGlzQmluUGFyYW1zKHRydWUpLCBmYWxzZSk7XG4gICBhc3NlcnQuZGVlcEVxdWFsKGlzQmluUGFyYW1zKHt9KSwgdHJ1ZSk7XG4gICBhc3NlcnQuZGVlcEVxdWFsKGlzQmluUGFyYW1zKHtleHRlbnQ6IFswLDFdfSksIHRydWUpO1xuICB9KTtcbn0pO1xuXG4iXX0=