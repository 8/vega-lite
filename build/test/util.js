import { buildModel } from '../src/compile/buildmodel';
import { ConcatModel } from '../src/compile/concat';
import { FacetModel } from '../src/compile/facet';
import { LayerModel } from '../src/compile/layer';
import { RepeatModel } from '../src/compile/repeat';
import { UnitModel } from '../src/compile/unit';
import { initConfig } from '../src/config';
import { normalize, } from '../src/spec';
import { isLayerSpec, isUnitSpec } from '../src/spec';
import { normalizeAutoSize } from '../src/toplevelprops';
export function parseModel(inputSpec) {
    var config = initConfig(inputSpec.config);
    var spec = normalize(inputSpec, config);
    var autosize = normalizeAutoSize(inputSpec.autosize, config.autosize, isLayerSpec(spec) || isUnitSpec(spec));
    return buildModel(spec, null, '', undefined, undefined, config, autosize.type === 'fit');
}
export function parseModelWithScale(inputSpec) {
    var model = parseModel(inputSpec);
    model.parseScale();
    return model;
}
export function parseUnitModel(spec) {
    return new UnitModel(spec, null, '', undefined, undefined, initConfig(spec.config), normalizeAutoSize(spec.autosize, spec.config ? spec.config.autosize : undefined, true).type === 'fit');
}
export function parseUnitModelWithScale(spec) {
    var model = parseUnitModel(spec);
    model.parseScale();
    return model;
}
export function parseUnitModelWithScaleAndLayoutSize(spec) {
    var model = parseUnitModelWithScale(spec);
    model.parseLayoutSize();
    return model;
}
export function parseLayerModel(spec) {
    return new LayerModel(spec, null, '', undefined, undefined, initConfig(spec.config), normalizeAutoSize(spec.autosize, spec.config ? spec.config.autosize : undefined, true).type === 'fit');
}
export function parseFacetModel(spec) {
    return new FacetModel(spec, null, '', undefined, initConfig(spec.config));
}
export function parseFacetModelWithScale(spec) {
    var model = parseFacetModel(spec);
    model.parseScale();
    return model;
}
export function parseRepeatModel(spec) {
    return new RepeatModel(spec, null, '', undefined, initConfig(spec.config));
}
export function parseConcatModel(spec) {
    return new ConcatModel(spec, null, '', undefined, initConfig(spec.config));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3Rlc3QvdXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDckQsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQ2xELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUNoRCxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFFaEQsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQ2xELE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUM5QyxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFDTCxTQUFTLEdBUVYsTUFBTSxhQUFhLENBQUM7QUFDckIsT0FBTyxFQUFDLFdBQVcsRUFBRSxVQUFVLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFDcEQsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFFdkQsTUFBTSxxQkFBcUIsU0FBdUI7SUFDaEQsSUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1QyxJQUFNLElBQUksR0FBRyxTQUFTLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzFDLElBQU0sUUFBUSxHQUFHLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDL0csT0FBTyxVQUFVLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsUUFBUSxDQUFDLElBQUksS0FBSyxLQUFLLENBQUMsQ0FBQztBQUMzRixDQUFDO0FBRUQsTUFBTSw4QkFBOEIsU0FBdUI7SUFDekQsSUFBTSxLQUFLLEdBQUcsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3BDLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNuQixPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFFRCxNQUFNLHlCQUF5QixJQUFrQztJQUMvRCxPQUFPLElBQUksU0FBUyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDO0FBQzdMLENBQUM7QUFFRCxNQUFNLGtDQUFrQyxJQUFrQztJQUN4RSxJQUFNLEtBQUssR0FBRyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbkMsS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ25CLE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQUVELE1BQU0sK0NBQStDLElBQWtDO0lBQ3JGLElBQU0sS0FBSyxHQUFHLHVCQUF1QixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzVDLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUN4QixPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFHRCxNQUFNLDBCQUEwQixJQUFtQztJQUNqRSxPQUFPLElBQUksVUFBVSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDO0FBQzlMLENBQUM7QUFFRCxNQUFNLDBCQUEwQixJQUFtQztJQUNqRSxPQUFPLElBQUksVUFBVSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLFNBQVMsRUFBRSxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDNUUsQ0FBQztBQUVELE1BQU0sbUNBQW1DLElBQW1DO0lBQzFFLElBQU0sS0FBSyxHQUFHLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNwQyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDbkIsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDO0FBRUQsTUFBTSwyQkFBMkIsSUFBb0M7SUFDbkUsT0FBTyxJQUFJLFdBQVcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxTQUFTLEVBQUUsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQzdFLENBQUM7QUFFRCxNQUFNLDJCQUEyQixJQUFvQztJQUNuRSxPQUFPLElBQUksV0FBVyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLFNBQVMsRUFBRSxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDN0UsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7YnVpbGRNb2RlbH0gZnJvbSAnLi4vc3JjL2NvbXBpbGUvYnVpbGRtb2RlbCc7XG5pbXBvcnQge0NvbmNhdE1vZGVsfSBmcm9tICcuLi9zcmMvY29tcGlsZS9jb25jYXQnO1xuaW1wb3J0IHtGYWNldE1vZGVsfSBmcm9tICcuLi9zcmMvY29tcGlsZS9mYWNldCc7XG5pbXBvcnQge0xheWVyTW9kZWx9IGZyb20gJy4uL3NyYy9jb21waWxlL2xheWVyJztcbmltcG9ydCB7TW9kZWx9IGZyb20gJy4uL3NyYy9jb21waWxlL21vZGVsJztcbmltcG9ydCB7UmVwZWF0TW9kZWx9IGZyb20gJy4uL3NyYy9jb21waWxlL3JlcGVhdCc7XG5pbXBvcnQge1VuaXRNb2RlbH0gZnJvbSAnLi4vc3JjL2NvbXBpbGUvdW5pdCc7XG5pbXBvcnQge2luaXRDb25maWd9IGZyb20gJy4uL3NyYy9jb25maWcnO1xuaW1wb3J0IHtcbiAgbm9ybWFsaXplLFxuICBOb3JtYWxpemVkQ29uY2F0U3BlYyxcbiAgTm9ybWFsaXplZEZhY2V0U3BlYyxcbiAgTm9ybWFsaXplZExheWVyU3BlYyxcbiAgTm9ybWFsaXplZFJlcGVhdFNwZWMsXG4gIE5vcm1hbGl6ZWRVbml0U3BlYyxcbiAgVG9wTGV2ZWwsXG4gIFRvcExldmVsU3BlYyxcbn0gZnJvbSAnLi4vc3JjL3NwZWMnO1xuaW1wb3J0IHtpc0xheWVyU3BlYywgaXNVbml0U3BlY30gZnJvbSAnLi4vc3JjL3NwZWMnO1xuaW1wb3J0IHtub3JtYWxpemVBdXRvU2l6ZX0gZnJvbSAnLi4vc3JjL3RvcGxldmVscHJvcHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VNb2RlbChpbnB1dFNwZWM6IFRvcExldmVsU3BlYyk6IE1vZGVsIHtcbiAgY29uc3QgY29uZmlnID0gaW5pdENvbmZpZyhpbnB1dFNwZWMuY29uZmlnKTtcbiAgY29uc3Qgc3BlYyA9IG5vcm1hbGl6ZShpbnB1dFNwZWMsIGNvbmZpZyk7XG4gIGNvbnN0IGF1dG9zaXplID0gbm9ybWFsaXplQXV0b1NpemUoaW5wdXRTcGVjLmF1dG9zaXplLCBjb25maWcuYXV0b3NpemUsIGlzTGF5ZXJTcGVjKHNwZWMpIHx8IGlzVW5pdFNwZWMoc3BlYykpO1xuICByZXR1cm4gYnVpbGRNb2RlbChzcGVjLCBudWxsLCAnJywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbmZpZywgYXV0b3NpemUudHlwZSA9PT0gJ2ZpdCcpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VNb2RlbFdpdGhTY2FsZShpbnB1dFNwZWM6IFRvcExldmVsU3BlYyk6IE1vZGVsIHtcbiAgY29uc3QgbW9kZWwgPSBwYXJzZU1vZGVsKGlucHV0U3BlYyk7XG4gIG1vZGVsLnBhcnNlU2NhbGUoKTtcbiAgcmV0dXJuIG1vZGVsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VVbml0TW9kZWwoc3BlYzogVG9wTGV2ZWw8Tm9ybWFsaXplZFVuaXRTcGVjPikge1xuICByZXR1cm4gbmV3IFVuaXRNb2RlbChzcGVjLCBudWxsLCAnJywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGluaXRDb25maWcoc3BlYy5jb25maWcpLCBub3JtYWxpemVBdXRvU2l6ZShzcGVjLmF1dG9zaXplLCBzcGVjLmNvbmZpZyA/IHNwZWMuY29uZmlnLmF1dG9zaXplIDogdW5kZWZpbmVkLCB0cnVlKS50eXBlID09PSAnZml0Jyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVVuaXRNb2RlbFdpdGhTY2FsZShzcGVjOiBUb3BMZXZlbDxOb3JtYWxpemVkVW5pdFNwZWM+KSB7XG4gIGNvbnN0IG1vZGVsID0gcGFyc2VVbml0TW9kZWwoc3BlYyk7XG4gIG1vZGVsLnBhcnNlU2NhbGUoKTtcbiAgcmV0dXJuIG1vZGVsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VVbml0TW9kZWxXaXRoU2NhbGVBbmRMYXlvdXRTaXplKHNwZWM6IFRvcExldmVsPE5vcm1hbGl6ZWRVbml0U3BlYz4pIHtcbiAgY29uc3QgbW9kZWwgPSBwYXJzZVVuaXRNb2RlbFdpdGhTY2FsZShzcGVjKTtcbiAgbW9kZWwucGFyc2VMYXlvdXRTaXplKCk7XG4gIHJldHVybiBtb2RlbDtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VMYXllck1vZGVsKHNwZWM6IFRvcExldmVsPE5vcm1hbGl6ZWRMYXllclNwZWM+KSB7XG4gIHJldHVybiBuZXcgTGF5ZXJNb2RlbChzcGVjLCBudWxsLCAnJywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGluaXRDb25maWcoc3BlYy5jb25maWcpLCBub3JtYWxpemVBdXRvU2l6ZShzcGVjLmF1dG9zaXplLCBzcGVjLmNvbmZpZyA/IHNwZWMuY29uZmlnLmF1dG9zaXplIDogdW5kZWZpbmVkLCB0cnVlKS50eXBlID09PSAnZml0Jyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUZhY2V0TW9kZWwoc3BlYzogVG9wTGV2ZWw8Tm9ybWFsaXplZEZhY2V0U3BlYz4pIHtcbiAgcmV0dXJuIG5ldyBGYWNldE1vZGVsKHNwZWMsIG51bGwsICcnLCB1bmRlZmluZWQsIGluaXRDb25maWcoc3BlYy5jb25maWcpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRmFjZXRNb2RlbFdpdGhTY2FsZShzcGVjOiBUb3BMZXZlbDxOb3JtYWxpemVkRmFjZXRTcGVjPikge1xuICBjb25zdCBtb2RlbCA9IHBhcnNlRmFjZXRNb2RlbChzcGVjKTtcbiAgbW9kZWwucGFyc2VTY2FsZSgpO1xuICByZXR1cm4gbW9kZWw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVJlcGVhdE1vZGVsKHNwZWM6IFRvcExldmVsPE5vcm1hbGl6ZWRSZXBlYXRTcGVjPikge1xuICByZXR1cm4gbmV3IFJlcGVhdE1vZGVsKHNwZWMsIG51bGwsICcnLCB1bmRlZmluZWQsIGluaXRDb25maWcoc3BlYy5jb25maWcpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQ29uY2F0TW9kZWwoc3BlYzogVG9wTGV2ZWw8Tm9ybWFsaXplZENvbmNhdFNwZWM+KSB7XG4gIHJldHVybiBuZXcgQ29uY2F0TW9kZWwoc3BlYywgbnVsbCwgJycsIHVuZGVmaW5lZCwgaW5pdENvbmZpZyhzcGVjLmNvbmZpZykpO1xufVxuIl19