"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var buildmodel_1 = require("../src/compile/buildmodel");
var concat_1 = require("../src/compile/concat");
var facet_1 = require("../src/compile/facet");
var layer_1 = require("../src/compile/layer");
var repeat_1 = require("../src/compile/repeat");
var unit_1 = require("../src/compile/unit");
var config_1 = require("../src/config");
var spec_1 = require("../src/spec");
var spec_2 = require("../src/spec");
var toplevelprops_1 = require("../src/toplevelprops");
function parseModel(inputSpec) {
    var config = config_1.initConfig(inputSpec.config);
    var spec = spec_1.normalize(inputSpec, config);
    var autosize = toplevelprops_1.normalizeAutoSize(inputSpec.autosize, config.autosize, spec_2.isLayerSpec(spec) || spec_2.isUnitSpec(spec));
    return buildmodel_1.buildModel(spec, null, '', undefined, undefined, config, autosize.type === 'fit');
}
exports.parseModel = parseModel;
function parseModelWithScale(inputSpec) {
    var model = parseModel(inputSpec);
    model.parseScale();
    return model;
}
exports.parseModelWithScale = parseModelWithScale;
function parseUnitModel(spec) {
    return new unit_1.UnitModel(spec, null, '', undefined, undefined, config_1.initConfig(spec.config), toplevelprops_1.normalizeAutoSize(spec.autosize, spec.config ? spec.config.autosize : undefined, true).type === 'fit');
}
exports.parseUnitModel = parseUnitModel;
function parseUnitModelWithScale(spec) {
    var model = parseUnitModel(spec);
    model.parseScale();
    return model;
}
exports.parseUnitModelWithScale = parseUnitModelWithScale;
function parseUnitModelWithScaleAndLayoutSize(spec) {
    var model = parseUnitModelWithScale(spec);
    model.parseLayoutSize();
    return model;
}
exports.parseUnitModelWithScaleAndLayoutSize = parseUnitModelWithScaleAndLayoutSize;
function parseLayerModel(spec) {
    return new layer_1.LayerModel(spec, null, '', undefined, undefined, config_1.initConfig(spec.config), toplevelprops_1.normalizeAutoSize(spec.autosize, spec.config ? spec.config.autosize : undefined, true).type === 'fit');
}
exports.parseLayerModel = parseLayerModel;
function parseFacetModel(spec) {
    return new facet_1.FacetModel(spec, null, '', undefined, config_1.initConfig(spec.config));
}
exports.parseFacetModel = parseFacetModel;
function parseFacetModelWithScale(spec) {
    var model = parseFacetModel(spec);
    model.parseScale();
    return model;
}
exports.parseFacetModelWithScale = parseFacetModelWithScale;
function parseRepeatModel(spec) {
    return new repeat_1.RepeatModel(spec, null, '', undefined, config_1.initConfig(spec.config));
}
exports.parseRepeatModel = parseRepeatModel;
function parseConcatModel(spec) {
    return new concat_1.ConcatModel(spec, null, '', undefined, config_1.initConfig(spec.config));
}
exports.parseConcatModel = parseConcatModel;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3Rlc3QvdXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHdEQUFxRDtBQUNyRCxnREFBa0Q7QUFDbEQsOENBQWdEO0FBQ2hELDhDQUFnRDtBQUVoRCxnREFBa0Q7QUFDbEQsNENBQThDO0FBQzlDLHdDQUF5QztBQUN6QyxvQ0FTcUI7QUFDckIsb0NBQW9EO0FBQ3BELHNEQUF1RDtBQUV2RCxvQkFBMkIsU0FBdUI7SUFDaEQsSUFBTSxNQUFNLEdBQUcsbUJBQVUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUMsSUFBTSxJQUFJLEdBQUcsZ0JBQVMsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDMUMsSUFBTSxRQUFRLEdBQUcsaUNBQWlCLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsUUFBUSxFQUFFLGtCQUFXLENBQUMsSUFBSSxDQUFDLElBQUksaUJBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQy9HLE9BQU8sdUJBQVUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxRQUFRLENBQUMsSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDO0FBQzNGLENBQUM7QUFMRCxnQ0FLQztBQUVELDZCQUFvQyxTQUF1QjtJQUN6RCxJQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDcEMsS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ25CLE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQUpELGtEQUlDO0FBRUQsd0JBQStCLElBQWtDO0lBQy9ELE9BQU8sSUFBSSxnQkFBUyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsbUJBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsaUNBQWlCLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxLQUFLLENBQUMsQ0FBQztBQUM3TCxDQUFDO0FBRkQsd0NBRUM7QUFFRCxpQ0FBd0MsSUFBa0M7SUFDeEUsSUFBTSxLQUFLLEdBQUcsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ25DLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNuQixPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFKRCwwREFJQztBQUVELDhDQUFxRCxJQUFrQztJQUNyRixJQUFNLEtBQUssR0FBRyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM1QyxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDeEIsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDO0FBSkQsb0ZBSUM7QUFHRCx5QkFBZ0MsSUFBbUM7SUFDakUsT0FBTyxJQUFJLGtCQUFVLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxtQkFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxpQ0FBaUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDO0FBQzlMLENBQUM7QUFGRCwwQ0FFQztBQUVELHlCQUFnQyxJQUFtQztJQUNqRSxPQUFPLElBQUksa0JBQVUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxTQUFTLEVBQUUsbUJBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUM1RSxDQUFDO0FBRkQsMENBRUM7QUFFRCxrQ0FBeUMsSUFBbUM7SUFDMUUsSUFBTSxLQUFLLEdBQUcsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3BDLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNuQixPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFKRCw0REFJQztBQUVELDBCQUFpQyxJQUFvQztJQUNuRSxPQUFPLElBQUksb0JBQVcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxTQUFTLEVBQUUsbUJBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUM3RSxDQUFDO0FBRkQsNENBRUM7QUFFRCwwQkFBaUMsSUFBb0M7SUFDbkUsT0FBTyxJQUFJLG9CQUFXLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsU0FBUyxFQUFFLG1CQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDN0UsQ0FBQztBQUZELDRDQUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtidWlsZE1vZGVsfSBmcm9tICcuLi9zcmMvY29tcGlsZS9idWlsZG1vZGVsJztcbmltcG9ydCB7Q29uY2F0TW9kZWx9IGZyb20gJy4uL3NyYy9jb21waWxlL2NvbmNhdCc7XG5pbXBvcnQge0ZhY2V0TW9kZWx9IGZyb20gJy4uL3NyYy9jb21waWxlL2ZhY2V0JztcbmltcG9ydCB7TGF5ZXJNb2RlbH0gZnJvbSAnLi4vc3JjL2NvbXBpbGUvbGF5ZXInO1xuaW1wb3J0IHtNb2RlbH0gZnJvbSAnLi4vc3JjL2NvbXBpbGUvbW9kZWwnO1xuaW1wb3J0IHtSZXBlYXRNb2RlbH0gZnJvbSAnLi4vc3JjL2NvbXBpbGUvcmVwZWF0JztcbmltcG9ydCB7VW5pdE1vZGVsfSBmcm9tICcuLi9zcmMvY29tcGlsZS91bml0JztcbmltcG9ydCB7aW5pdENvbmZpZ30gZnJvbSAnLi4vc3JjL2NvbmZpZyc7XG5pbXBvcnQge1xuICBub3JtYWxpemUsXG4gIE5vcm1hbGl6ZWRDb25jYXRTcGVjLFxuICBOb3JtYWxpemVkRmFjZXRTcGVjLFxuICBOb3JtYWxpemVkTGF5ZXJTcGVjLFxuICBOb3JtYWxpemVkUmVwZWF0U3BlYyxcbiAgTm9ybWFsaXplZFVuaXRTcGVjLFxuICBUb3BMZXZlbCxcbiAgVG9wTGV2ZWxTcGVjLFxufSBmcm9tICcuLi9zcmMvc3BlYyc7XG5pbXBvcnQge2lzTGF5ZXJTcGVjLCBpc1VuaXRTcGVjfSBmcm9tICcuLi9zcmMvc3BlYyc7XG5pbXBvcnQge25vcm1hbGl6ZUF1dG9TaXplfSBmcm9tICcuLi9zcmMvdG9wbGV2ZWxwcm9wcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU1vZGVsKGlucHV0U3BlYzogVG9wTGV2ZWxTcGVjKTogTW9kZWwge1xuICBjb25zdCBjb25maWcgPSBpbml0Q29uZmlnKGlucHV0U3BlYy5jb25maWcpO1xuICBjb25zdCBzcGVjID0gbm9ybWFsaXplKGlucHV0U3BlYywgY29uZmlnKTtcbiAgY29uc3QgYXV0b3NpemUgPSBub3JtYWxpemVBdXRvU2l6ZShpbnB1dFNwZWMuYXV0b3NpemUsIGNvbmZpZy5hdXRvc2l6ZSwgaXNMYXllclNwZWMoc3BlYykgfHwgaXNVbml0U3BlYyhzcGVjKSk7XG4gIHJldHVybiBidWlsZE1vZGVsKHNwZWMsIG51bGwsICcnLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29uZmlnLCBhdXRvc2l6ZS50eXBlID09PSAnZml0Jyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU1vZGVsV2l0aFNjYWxlKGlucHV0U3BlYzogVG9wTGV2ZWxTcGVjKTogTW9kZWwge1xuICBjb25zdCBtb2RlbCA9IHBhcnNlTW9kZWwoaW5wdXRTcGVjKTtcbiAgbW9kZWwucGFyc2VTY2FsZSgpO1xuICByZXR1cm4gbW9kZWw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVVuaXRNb2RlbChzcGVjOiBUb3BMZXZlbDxOb3JtYWxpemVkVW5pdFNwZWM+KSB7XG4gIHJldHVybiBuZXcgVW5pdE1vZGVsKHNwZWMsIG51bGwsICcnLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaW5pdENvbmZpZyhzcGVjLmNvbmZpZyksIG5vcm1hbGl6ZUF1dG9TaXplKHNwZWMuYXV0b3NpemUsIHNwZWMuY29uZmlnID8gc3BlYy5jb25maWcuYXV0b3NpemUgOiB1bmRlZmluZWQsIHRydWUpLnR5cGUgPT09ICdmaXQnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVW5pdE1vZGVsV2l0aFNjYWxlKHNwZWM6IFRvcExldmVsPE5vcm1hbGl6ZWRVbml0U3BlYz4pIHtcbiAgY29uc3QgbW9kZWwgPSBwYXJzZVVuaXRNb2RlbChzcGVjKTtcbiAgbW9kZWwucGFyc2VTY2FsZSgpO1xuICByZXR1cm4gbW9kZWw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVVuaXRNb2RlbFdpdGhTY2FsZUFuZExheW91dFNpemUoc3BlYzogVG9wTGV2ZWw8Tm9ybWFsaXplZFVuaXRTcGVjPikge1xuICBjb25zdCBtb2RlbCA9IHBhcnNlVW5pdE1vZGVsV2l0aFNjYWxlKHNwZWMpO1xuICBtb2RlbC5wYXJzZUxheW91dFNpemUoKTtcbiAgcmV0dXJuIG1vZGVsO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUxheWVyTW9kZWwoc3BlYzogVG9wTGV2ZWw8Tm9ybWFsaXplZExheWVyU3BlYz4pIHtcbiAgcmV0dXJuIG5ldyBMYXllck1vZGVsKHNwZWMsIG51bGwsICcnLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaW5pdENvbmZpZyhzcGVjLmNvbmZpZyksIG5vcm1hbGl6ZUF1dG9TaXplKHNwZWMuYXV0b3NpemUsIHNwZWMuY29uZmlnID8gc3BlYy5jb25maWcuYXV0b3NpemUgOiB1bmRlZmluZWQsIHRydWUpLnR5cGUgPT09ICdmaXQnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRmFjZXRNb2RlbChzcGVjOiBUb3BMZXZlbDxOb3JtYWxpemVkRmFjZXRTcGVjPikge1xuICByZXR1cm4gbmV3IEZhY2V0TW9kZWwoc3BlYywgbnVsbCwgJycsIHVuZGVmaW5lZCwgaW5pdENvbmZpZyhzcGVjLmNvbmZpZykpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VGYWNldE1vZGVsV2l0aFNjYWxlKHNwZWM6IFRvcExldmVsPE5vcm1hbGl6ZWRGYWNldFNwZWM+KSB7XG4gIGNvbnN0IG1vZGVsID0gcGFyc2VGYWNldE1vZGVsKHNwZWMpO1xuICBtb2RlbC5wYXJzZVNjYWxlKCk7XG4gIHJldHVybiBtb2RlbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlUmVwZWF0TW9kZWwoc3BlYzogVG9wTGV2ZWw8Tm9ybWFsaXplZFJlcGVhdFNwZWM+KSB7XG4gIHJldHVybiBuZXcgUmVwZWF0TW9kZWwoc3BlYywgbnVsbCwgJycsIHVuZGVmaW5lZCwgaW5pdENvbmZpZyhzcGVjLmNvbmZpZykpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VDb25jYXRNb2RlbChzcGVjOiBUb3BMZXZlbDxOb3JtYWxpemVkQ29uY2F0U3BlYz4pIHtcbiAgcmV0dXJuIG5ldyBDb25jYXRNb2RlbChzcGVjLCBudWxsLCAnJywgdW5kZWZpbmVkLCBpbml0Q29uZmlnKHNwZWMuY29uZmlnKSk7XG59XG4iXX0=