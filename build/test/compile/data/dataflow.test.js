"use strict";
/* tslint:disable:quotemark */
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var dataflow_1 = require("../../../src/compile/data/dataflow");
describe('compile/data/dataflow', function () {
    describe('DataFlowNode', function () {
        describe('swap', function () {
            it('should correctly swap two nodes in a simple chain', function () {
                var a = new dataflow_1.DataFlowNode('a');
                var b = new dataflow_1.DataFlowNode('b');
                b.parent = a;
                var c = new dataflow_1.DataFlowNode('c');
                c.parent = b;
                var d = new dataflow_1.DataFlowNode('d');
                d.parent = c;
                c.swapWithParent();
                chai_1.assert.equal(a.numChildren(), 1);
                chai_1.assert.equal(a.children[0].debugName, 'c');
                chai_1.assert.equal(b.numChildren(), 1);
                chai_1.assert.equal(b.children[0].debugName, 'd');
                chai_1.assert.equal(c.numChildren(), 1);
                chai_1.assert.equal(c.children[0].debugName, 'b');
                chai_1.assert.equal(d.numChildren(), 0);
            });
            it('should correctly swap two nodes', function () {
                var root = new dataflow_1.DataFlowNode('root');
                var parent = new dataflow_1.DataFlowNode('parent');
                parent.parent = root;
                var node = new dataflow_1.DataFlowNode('node');
                node.parent = parent;
                var child1 = new dataflow_1.DataFlowNode('child1');
                child1.parent = node;
                var child2 = new dataflow_1.DataFlowNode('child2');
                child2.parent = node;
                var parentChild1 = new dataflow_1.DataFlowNode('parentChild1');
                parentChild1.parent = parent;
                var parentChild2 = new dataflow_1.DataFlowNode('parentChild2');
                parentChild2.parent = parent;
                node.swapWithParent();
                chai_1.assert.equal(root.numChildren(), 1);
                chai_1.assert.equal(root.children[0].debugName, 'node');
                chai_1.assert.equal(node.parent.debugName, 'root');
                chai_1.assert.equal(node.numChildren(), 1);
                chai_1.assert.equal(node.children[0].debugName, 'parent');
                chai_1.assert.equal(parent.parent.debugName, 'node');
                chai_1.assert.equal(parent.numChildren(), 4);
                parent.children.forEach(function (c) {
                    chai_1.assert.equal(c.numChildren(), 0);
                    chai_1.assert.equal(c.parent.debugName, 'parent');
                });
            });
        });
        describe('remove', function () {
            it('should remove node from dataflow', function () {
                var a = new dataflow_1.DataFlowNode('a');
                var b = new dataflow_1.DataFlowNode('b');
                b.parent = a;
                var c = new dataflow_1.DataFlowNode('c');
                c.parent = b;
                chai_1.assert.deepEqual(a.children, [b]);
                chai_1.assert.equal(b.parent, a);
                chai_1.assert.equal(c.parent, b);
                b.remove();
                chai_1.assert.deepEqual(a.children, [c]);
                chai_1.assert.equal(c.parent, a);
            });
        });
        describe('insertAsParentOf', function () {
            it('should insert node into dataflow', function () {
                var a = new dataflow_1.DataFlowNode('a');
                var anotherChild = new dataflow_1.DataFlowNode('a');
                var b = new dataflow_1.DataFlowNode('b');
                var c = new dataflow_1.DataFlowNode('c');
                anotherChild.parent = a;
                c.parent = a;
                b.insertAsParentOf(c);
                chai_1.assert.sameDeepMembers(a.children, [anotherChild, b]);
                chai_1.assert.equal(b.parent, a);
                chai_1.assert.equal(c.parent, b);
                chai_1.assert.equal(anotherChild.parent, a);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,