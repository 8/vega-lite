/* tslint:disable:quotemark */
import { assert } from 'chai';
import { parseUnitModelWithScale } from '../../util';
describe('legend/assemble', function () {
    it('merges legend of the same field with the default type.', function () {
        var model = parseUnitModelWithScale({
            "$schema": "https://vega.github.io/schema/vega-lite/v2.json",
            "description": "A scatterplot showing horsepower and miles per gallons.",
            "data": { "url": "data/cars.json" },
            "mark": "point",
            "encoding": {
                "x": { "field": "Horsepower", "type": "quantitative" },
                "y": { "field": "Miles_per_Gallon", "type": "quantitative" },
                "color": { "field": "Origin", "type": "nominal" },
                "shape": { "field": "Origin", "type": "nominal" }
            }
        });
        model.parseLegend();
        var legends = model.assembleLegends();
        assert.equal(legends.length, 1);
        assert.equal(legends[0].title, 'Origin');
        assert.equal(legends[0].stroke, 'color');
        assert.equal(legends[0].shape, 'shape');
    });
    it('merges legend of the same field and favor symbol legend over gradient', function () {
        var model = parseUnitModelWithScale({
            "data": { "values": [{ "a": "A", "b": 28 }, { "a": "B", "b": 55 }] },
            "mark": "bar",
            "encoding": {
                "x": { "field": "a", "type": "ordinal" },
                "y": { "field": "b", "type": "quantitative" },
                "color": { "field": "b", "type": "quantitative" },
                "size": { "field": "b", "type": "quantitative" }
            }
        });
        model.parseLegend();
        var legends = model.assembleLegends();
        assert.equal(legends.length, 1);
        assert.equal(legends[0].title, 'b');
        assert.equal(legends[0].type, 'symbol');
        assert.equal(legends[0].fill, 'color');
        assert.equal(legends[0].size, 'size');
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZW1ibGUudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Rlc3QvY29tcGlsZS9sZWdlbmQvYXNzZW1ibGUudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw4QkFBOEI7QUFFOUIsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUM1QixPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFHbkQsUUFBUSxDQUFDLGlCQUFpQixFQUFFO0lBQzFCLEVBQUUsQ0FBQyx3REFBd0QsRUFBRTtRQUMzRCxJQUFNLEtBQUssR0FBRyx1QkFBdUIsQ0FBQztZQUNwQyxTQUFTLEVBQUUsaURBQWlEO1lBQzVELGFBQWEsRUFBRSx5REFBeUQ7WUFDeEUsTUFBTSxFQUFFLEVBQUMsS0FBSyxFQUFFLGdCQUFnQixFQUFDO1lBQ2pDLE1BQU0sRUFBRSxPQUFPO1lBQ2YsVUFBVSxFQUFFO2dCQUNWLEdBQUcsRUFBRSxFQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLGNBQWMsRUFBQztnQkFDcEQsR0FBRyxFQUFFLEVBQUMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sRUFBRSxjQUFjLEVBQUM7Z0JBQzFELE9BQU8sRUFBRSxFQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBQztnQkFDL0MsT0FBTyxFQUFFLEVBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFDO2FBQ2hEO1NBQ0YsQ0FBQyxDQUFDO1FBQ0gsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBRXBCLElBQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUN4QyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFaEMsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ3pDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN6QyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDMUMsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsdUVBQXVFLEVBQUU7UUFDMUUsSUFBTSxLQUFLLEdBQUcsdUJBQXVCLENBQUM7WUFDcEMsTUFBTSxFQUFFLEVBQUMsUUFBUSxFQUFFLENBQUMsRUFBQyxHQUFHLEVBQUUsR0FBRyxFQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUMsRUFBQyxFQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUMsR0FBRyxFQUFFLEVBQUUsRUFBQyxDQUFDLEVBQUM7WUFDM0QsTUFBTSxFQUFFLEtBQUs7WUFDYixVQUFVLEVBQUU7Z0JBQ1YsR0FBRyxFQUFFLEVBQUMsT0FBTyxFQUFFLEdBQUcsRUFBQyxNQUFNLEVBQUUsU0FBUyxFQUFDO2dCQUNyQyxHQUFHLEVBQUUsRUFBQyxPQUFPLEVBQUUsR0FBRyxFQUFDLE1BQU0sRUFBRSxjQUFjLEVBQUM7Z0JBQzFDLE9BQU8sRUFBRSxFQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUMsTUFBTSxFQUFFLGNBQWMsRUFBQztnQkFDOUMsTUFBTSxFQUFFLEVBQUMsT0FBTyxFQUFFLEdBQUcsRUFBQyxNQUFNLEVBQUUsY0FBYyxFQUFDO2FBQzlDO1NBQ0YsQ0FBQyxDQUFDO1FBRUgsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBRXBCLElBQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUN4QyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDaEMsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztRQUN4QyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDdkMsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3hDLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiB0c2xpbnQ6ZGlzYWJsZTpxdW90ZW1hcmsgKi9cblxuaW1wb3J0IHthc3NlcnR9IGZyb20gJ2NoYWknO1xuaW1wb3J0IHtwYXJzZVVuaXRNb2RlbFdpdGhTY2FsZX0gZnJvbSAnLi4vLi4vdXRpbCc7XG5cblxuZGVzY3JpYmUoJ2xlZ2VuZC9hc3NlbWJsZScsICgpID0+IHtcbiAgaXQoJ21lcmdlcyBsZWdlbmQgb2YgdGhlIHNhbWUgZmllbGQgd2l0aCB0aGUgZGVmYXVsdCB0eXBlLicsICgpID0+IHtcbiAgICBjb25zdCBtb2RlbCA9IHBhcnNlVW5pdE1vZGVsV2l0aFNjYWxlKHtcbiAgICAgIFwiJHNjaGVtYVwiOiBcImh0dHBzOi8vdmVnYS5naXRodWIuaW8vc2NoZW1hL3ZlZ2EtbGl0ZS92Mi5qc29uXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQSBzY2F0dGVycGxvdCBzaG93aW5nIGhvcnNlcG93ZXIgYW5kIG1pbGVzIHBlciBnYWxsb25zLlwiLFxuICAgICAgXCJkYXRhXCI6IHtcInVybFwiOiBcImRhdGEvY2Fycy5qc29uXCJ9LFxuICAgICAgXCJtYXJrXCI6IFwicG9pbnRcIixcbiAgICAgIFwiZW5jb2RpbmdcIjoge1xuICAgICAgICBcInhcIjoge1wiZmllbGRcIjogXCJIb3JzZXBvd2VyXCIsIFwidHlwZVwiOiBcInF1YW50aXRhdGl2ZVwifSxcbiAgICAgICAgXCJ5XCI6IHtcImZpZWxkXCI6IFwiTWlsZXNfcGVyX0dhbGxvblwiLCBcInR5cGVcIjogXCJxdWFudGl0YXRpdmVcIn0sXG4gICAgICAgIFwiY29sb3JcIjoge1wiZmllbGRcIjogXCJPcmlnaW5cIiwgXCJ0eXBlXCI6IFwibm9taW5hbFwifSxcbiAgICAgICAgXCJzaGFwZVwiOiB7XCJmaWVsZFwiOiBcIk9yaWdpblwiLCBcInR5cGVcIjogXCJub21pbmFsXCJ9XG4gICAgICB9XG4gICAgfSk7XG4gICAgbW9kZWwucGFyc2VMZWdlbmQoKTtcblxuICAgIGNvbnN0IGxlZ2VuZHMgPSBtb2RlbC5hc3NlbWJsZUxlZ2VuZHMoKTtcbiAgICBhc3NlcnQuZXF1YWwobGVnZW5kcy5sZW5ndGgsIDEpO1xuXG4gICAgYXNzZXJ0LmVxdWFsKGxlZ2VuZHNbMF0udGl0bGUsICdPcmlnaW4nKTtcbiAgICBhc3NlcnQuZXF1YWwobGVnZW5kc1swXS5zdHJva2UsICdjb2xvcicpO1xuICAgIGFzc2VydC5lcXVhbChsZWdlbmRzWzBdLnNoYXBlLCAnc2hhcGUnKTtcbiAgfSk7XG5cbiAgaXQoJ21lcmdlcyBsZWdlbmQgb2YgdGhlIHNhbWUgZmllbGQgYW5kIGZhdm9yIHN5bWJvbCBsZWdlbmQgb3ZlciBncmFkaWVudCcsICgpID0+IHtcbiAgICBjb25zdCBtb2RlbCA9IHBhcnNlVW5pdE1vZGVsV2l0aFNjYWxlKHtcbiAgICAgIFwiZGF0YVwiOiB7XCJ2YWx1ZXNcIjogW3tcImFcIjogXCJBXCIsXCJiXCI6IDI4fSx7XCJhXCI6IFwiQlwiLFwiYlwiOiA1NX1dfSxcbiAgICAgIFwibWFya1wiOiBcImJhclwiLFxuICAgICAgXCJlbmNvZGluZ1wiOiB7XG4gICAgICAgIFwieFwiOiB7XCJmaWVsZFwiOiBcImFcIixcInR5cGVcIjogXCJvcmRpbmFsXCJ9LFxuICAgICAgICBcInlcIjoge1wiZmllbGRcIjogXCJiXCIsXCJ0eXBlXCI6IFwicXVhbnRpdGF0aXZlXCJ9LFxuICAgICAgICBcImNvbG9yXCI6IHtcImZpZWxkXCI6IFwiYlwiLFwidHlwZVwiOiBcInF1YW50aXRhdGl2ZVwifSxcbiAgICAgICAgXCJzaXplXCI6IHtcImZpZWxkXCI6IFwiYlwiLFwidHlwZVwiOiBcInF1YW50aXRhdGl2ZVwifVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgbW9kZWwucGFyc2VMZWdlbmQoKTtcblxuICAgIGNvbnN0IGxlZ2VuZHMgPSBtb2RlbC5hc3NlbWJsZUxlZ2VuZHMoKTtcbiAgICBhc3NlcnQuZXF1YWwobGVnZW5kcy5sZW5ndGgsIDEpO1xuICAgIGFzc2VydC5lcXVhbChsZWdlbmRzWzBdLnRpdGxlLCAnYicpO1xuICAgIGFzc2VydC5lcXVhbChsZWdlbmRzWzBdLnR5cGUsICdzeW1ib2wnKTtcbiAgICBhc3NlcnQuZXF1YWwobGVnZW5kc1swXS5maWxsLCAnY29sb3InKTtcbiAgICBhc3NlcnQuZXF1YWwobGVnZW5kc1swXS5zaXplLCAnc2l6ZScpO1xuICB9KTtcbn0pO1xuIl19