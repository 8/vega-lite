import { assert } from 'chai';
import { isScaleChannel, rangeType, SINGLE_DEF_CHANNELS } from '../src/channel';
import { CHANNELS, NONPOSITION_SCALE_CHANNELS, SCALE_CHANNELS, UNIT_CHANNELS } from '../src/channel';
import { without } from '../src/util';
describe('channel', function () {
    describe('UNIT_CHANNELS', function () {
        it('should be CHANNELS without row and column', function () {
            assert.deepEqual(UNIT_CHANNELS, without(CHANNELS, ['row', 'column']));
        });
    });
    describe('SINGLE_DEF_CHANNELS', function () {
        it('should be CHANNELS without detail and order', function () {
            assert.deepEqual(SINGLE_DEF_CHANNELS, without(CHANNELS, ['detail', 'order']));
        });
    });
    describe('SCALE_CHANNELS', function () {
        it('should be UNIT_CHANNELS without X2, Y2, ORDER, DETAIL, TEXT, LABEL, TOOLTIP', function () {
            assert.deepEqual(SCALE_CHANNELS, without(UNIT_CHANNELS, ['x2', 'y2', 'latitude', 'longitude', 'latitude2', 'longitude2', 'order', 'detail', 'key', 'text', 'label', 'tooltip', 'href']));
        });
    });
    describe('NONPOSITION_SCALE_CHANNELS', function () {
        it('should be SCALE_CHANNELS without x, y, x2, y2', function () {
            assert.deepEqual(NONPOSITION_SCALE_CHANNELS, without(SCALE_CHANNELS, ['x', 'y']));
        });
    });
    describe('isScaleChannel', function () {
        it('should return true for all scale channel', function () {
            for (var _i = 0, SCALE_CHANNELS_1 = SCALE_CHANNELS; _i < SCALE_CHANNELS_1.length; _i++) {
                var channel = SCALE_CHANNELS_1[_i];
                assert(isScaleChannel(channel));
            }
        });
    });
    describe('rangeType', function () {
        it('should be defined for all channels (no error).', function () {
            var _loop_1 = function (c) {
                assert.doesNotThrow(function () {
                    rangeType(c);
                });
            };
            for (var _i = 0, CHANNELS_1 = CHANNELS; _i < CHANNELS_1.length; _i++) {
                var c = CHANNELS_1[_i];
                _loop_1(c);
            }
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhbm5lbC50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vdGVzdC9jaGFubmVsLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUM1QixPQUFPLEVBQUMsY0FBYyxFQUFFLFNBQVMsRUFBRSxtQkFBbUIsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQzlFLE9BQU8sRUFBQyxRQUFRLEVBQUUsMEJBQTBCLEVBQUUsY0FBYyxFQUFFLGFBQWEsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ25HLE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFFcEMsUUFBUSxDQUFDLFNBQVMsRUFBRTtJQUNsQixRQUFRLENBQUMsZUFBZSxFQUFFO1FBQ3hCLEVBQUUsQ0FBQywyQ0FBMkMsRUFBRTtZQUM5QyxNQUFNLENBQUMsU0FBUyxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4RSxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLHFCQUFxQixFQUFFO1FBQzlCLEVBQUUsQ0FBQyw2Q0FBNkMsRUFBRTtZQUNoRCxNQUFNLENBQUMsU0FBUyxDQUFDLG1CQUFtQixFQUFFLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hGLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsZ0JBQWdCLEVBQUU7UUFDekIsRUFBRSxDQUFDLDZFQUE2RSxFQUFFO1lBQ2hGLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxFQUFFLE9BQU8sQ0FBQyxhQUFhLEVBQUUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyw0QkFBNEIsRUFBRTtRQUNyQyxFQUFFLENBQUMsK0NBQStDLEVBQUU7WUFDbEQsTUFBTSxDQUFDLFNBQVMsQ0FBQywwQkFBMEIsRUFBRSxPQUFPLENBQUMsY0FBYyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwRixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLGdCQUFnQixFQUFFO1FBQ3pCLEVBQUUsQ0FBQywwQ0FBMEMsRUFBRTtZQUM3QyxLQUFzQixVQUFjLEVBQWQsaUNBQWMsRUFBZCw0QkFBYyxFQUFkLElBQWM7Z0JBQS9CLElBQU0sT0FBTyx1QkFBQTtnQkFDaEIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2FBQ2pDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxXQUFXLEVBQUU7UUFDcEIsRUFBRSxDQUFDLGdEQUFnRCxFQUFFO29DQUN4QyxDQUFDO2dCQUNWLE1BQU0sQ0FBQyxZQUFZLENBQUM7b0JBQ2xCLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDZixDQUFDLENBQUMsQ0FBQztZQUNMLENBQUM7WUFKRCxLQUFnQixVQUFRLEVBQVIscUJBQVEsRUFBUixzQkFBUSxFQUFSLElBQVE7Z0JBQW5CLElBQU0sQ0FBQyxpQkFBQTt3QkFBRCxDQUFDO2FBSVg7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2Fzc2VydH0gZnJvbSAnY2hhaSc7XG5pbXBvcnQge2lzU2NhbGVDaGFubmVsLCByYW5nZVR5cGUsIFNJTkdMRV9ERUZfQ0hBTk5FTFN9IGZyb20gJy4uL3NyYy9jaGFubmVsJztcbmltcG9ydCB7Q0hBTk5FTFMsIE5PTlBPU0lUSU9OX1NDQUxFX0NIQU5ORUxTLCBTQ0FMRV9DSEFOTkVMUywgVU5JVF9DSEFOTkVMU30gZnJvbSAnLi4vc3JjL2NoYW5uZWwnO1xuaW1wb3J0IHt3aXRob3V0fSBmcm9tICcuLi9zcmMvdXRpbCc7XG5cbmRlc2NyaWJlKCdjaGFubmVsJywgKCkgPT4ge1xuICBkZXNjcmliZSgnVU5JVF9DSEFOTkVMUycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGJlIENIQU5ORUxTIHdpdGhvdXQgcm93IGFuZCBjb2x1bW4nLCAoKSA9PiB7XG4gICAgICBhc3NlcnQuZGVlcEVxdWFsKFVOSVRfQ0hBTk5FTFMsIHdpdGhvdXQoQ0hBTk5FTFMsIFsncm93JywgJ2NvbHVtbiddKSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdTSU5HTEVfREVGX0NIQU5ORUxTJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgYmUgQ0hBTk5FTFMgd2l0aG91dCBkZXRhaWwgYW5kIG9yZGVyJywgKCkgPT4ge1xuICAgICAgYXNzZXJ0LmRlZXBFcXVhbChTSU5HTEVfREVGX0NIQU5ORUxTLCB3aXRob3V0KENIQU5ORUxTLCBbJ2RldGFpbCcsICdvcmRlciddKSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdTQ0FMRV9DSEFOTkVMUycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGJlIFVOSVRfQ0hBTk5FTFMgd2l0aG91dCBYMiwgWTIsIE9SREVSLCBERVRBSUwsIFRFWFQsIExBQkVMLCBUT09MVElQJywgKCkgPT4ge1xuICAgICAgYXNzZXJ0LmRlZXBFcXVhbChTQ0FMRV9DSEFOTkVMUywgd2l0aG91dChVTklUX0NIQU5ORUxTLCBbJ3gyJywgJ3kyJywgJ2xhdGl0dWRlJywgJ2xvbmdpdHVkZScsICdsYXRpdHVkZTInLCAnbG9uZ2l0dWRlMicsICdvcmRlcicsICdkZXRhaWwnLCAna2V5JywgJ3RleHQnLCAnbGFiZWwnLCAndG9vbHRpcCcsICdocmVmJ10pKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ05PTlBPU0lUSU9OX1NDQUxFX0NIQU5ORUxTJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgYmUgU0NBTEVfQ0hBTk5FTFMgd2l0aG91dCB4LCB5LCB4MiwgeTInLCAoKSA9PiB7XG4gICAgICBhc3NlcnQuZGVlcEVxdWFsKE5PTlBPU0lUSU9OX1NDQUxFX0NIQU5ORUxTLCB3aXRob3V0KFNDQUxFX0NIQU5ORUxTLCBbJ3gnLCAneSddKSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdpc1NjYWxlQ2hhbm5lbCcsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHJldHVybiB0cnVlIGZvciBhbGwgc2NhbGUgY2hhbm5lbCcsICgpID0+IHtcbiAgICAgIGZvciAoY29uc3QgY2hhbm5lbCBvZiBTQ0FMRV9DSEFOTkVMUykge1xuICAgICAgICBhc3NlcnQoaXNTY2FsZUNoYW5uZWwoY2hhbm5lbCkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgncmFuZ2VUeXBlJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgYmUgZGVmaW5lZCBmb3IgYWxsIGNoYW5uZWxzIChubyBlcnJvcikuJywgKCkgPT4ge1xuICAgICAgZm9yIChjb25zdCBjIG9mIENIQU5ORUxTKSB7XG4gICAgICAgIGFzc2VydC5kb2VzTm90VGhyb3coKCkgPT4ge1xuICAgICAgICAgIHJhbmdlVHlwZShjKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXX0=