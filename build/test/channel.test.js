"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var channel_1 = require("../src/channel");
var channel_2 = require("../src/channel");
var util_1 = require("../src/util");
describe('channel', function () {
    describe('UNIT_CHANNELS', function () {
        it('should be CHANNELS without row and column', function () {
            chai_1.assert.deepEqual(channel_2.UNIT_CHANNELS, util_1.without(channel_2.CHANNELS, ['row', 'column']));
        });
    });
    describe('SINGLE_DEF_CHANNELS', function () {
        it('should be CHANNELS without detail and order', function () {
            chai_1.assert.deepEqual(channel_1.SINGLE_DEF_CHANNELS, util_1.without(channel_2.CHANNELS, ['detail', 'order']));
        });
    });
    describe('SCALE_CHANNELS', function () {
        it('should be UNIT_CHANNELS without X2, Y2, ORDER, DETAIL, TEXT, LABEL, TOOLTIP', function () {
            chai_1.assert.deepEqual(channel_2.SCALE_CHANNELS, util_1.without(channel_2.UNIT_CHANNELS, ['x2', 'y2', 'latitude', 'longitude', 'latitude2', 'longitude2', 'order', 'detail', 'key', 'text', 'label', 'tooltip', 'href']));
        });
    });
    describe('NONPOSITION_SCALE_CHANNELS', function () {
        it('should be SCALE_CHANNELS without x, y, x2, y2', function () {
            chai_1.assert.deepEqual(channel_2.NONPOSITION_SCALE_CHANNELS, util_1.without(channel_2.SCALE_CHANNELS, ['x', 'y']));
        });
    });
    describe('isScaleChannel', function () {
        it('should return true for all scale channel', function () {
            for (var _i = 0, SCALE_CHANNELS_1 = channel_2.SCALE_CHANNELS; _i < SCALE_CHANNELS_1.length; _i++) {
                var channel = SCALE_CHANNELS_1[_i];
                chai_1.assert(channel_1.isScaleChannel(channel));
            }
        });
    });
    describe('rangeType', function () {
        it('should be defined for all channels (no error).', function () {
            var _loop_1 = function (c) {
                chai_1.assert.doesNotThrow(function () {
                    channel_1.rangeType(c);
                });
            };
            for (var _i = 0, CHANNELS_1 = channel_2.CHANNELS; _i < CHANNELS_1.length; _i++) {
                var c = CHANNELS_1[_i];
                _loop_1(c);
            }
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhbm5lbC50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vdGVzdC9jaGFubmVsLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2QkFBNEI7QUFDNUIsMENBQThFO0FBQzlFLDBDQUFtRztBQUNuRyxvQ0FBb0M7QUFFcEMsUUFBUSxDQUFDLFNBQVMsRUFBRTtJQUNsQixRQUFRLENBQUMsZUFBZSxFQUFFO1FBQ3hCLEVBQUUsQ0FBQywyQ0FBMkMsRUFBRTtZQUM5QyxhQUFNLENBQUMsU0FBUyxDQUFDLHVCQUFhLEVBQUUsY0FBTyxDQUFDLGtCQUFRLEVBQUUsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3hFLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMscUJBQXFCLEVBQUU7UUFDOUIsRUFBRSxDQUFDLDZDQUE2QyxFQUFFO1lBQ2hELGFBQU0sQ0FBQyxTQUFTLENBQUMsNkJBQW1CLEVBQUUsY0FBTyxDQUFDLGtCQUFRLEVBQUUsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hGLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsZ0JBQWdCLEVBQUU7UUFDekIsRUFBRSxDQUFDLDZFQUE2RSxFQUFFO1lBQ2hGLGFBQU0sQ0FBQyxTQUFTLENBQUMsd0JBQWMsRUFBRSxjQUFPLENBQUMsdUJBQWEsRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLDRCQUE0QixFQUFFO1FBQ3JDLEVBQUUsQ0FBQywrQ0FBK0MsRUFBRTtZQUNsRCxhQUFNLENBQUMsU0FBUyxDQUFDLG9DQUEwQixFQUFFLGNBQU8sQ0FBQyx3QkFBYyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwRixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLGdCQUFnQixFQUFFO1FBQ3pCLEVBQUUsQ0FBQywwQ0FBMEMsRUFBRTtZQUM3QyxLQUFzQixVQUFjLEVBQWQsbUJBQUEsd0JBQWMsRUFBZCw0QkFBYyxFQUFkLElBQWMsRUFBRTtnQkFBakMsSUFBTSxPQUFPLHVCQUFBO2dCQUNoQixhQUFNLENBQUMsd0JBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2FBQ2pDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxXQUFXLEVBQUU7UUFDcEIsRUFBRSxDQUFDLGdEQUFnRCxFQUFFO29DQUN4QyxDQUFDO2dCQUNWLGFBQU0sQ0FBQyxZQUFZLENBQUM7b0JBQ2xCLG1CQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2YsQ0FBQyxDQUFDLENBQUM7WUFDTCxDQUFDO1lBSkQsS0FBZ0IsVUFBUSxFQUFSLGFBQUEsa0JBQVEsRUFBUixzQkFBUSxFQUFSLElBQVE7Z0JBQW5CLElBQU0sQ0FBQyxpQkFBQTt3QkFBRCxDQUFDO2FBSVg7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2Fzc2VydH0gZnJvbSAnY2hhaSc7XG5pbXBvcnQge2lzU2NhbGVDaGFubmVsLCByYW5nZVR5cGUsIFNJTkdMRV9ERUZfQ0hBTk5FTFN9IGZyb20gJy4uL3NyYy9jaGFubmVsJztcbmltcG9ydCB7Q0hBTk5FTFMsIE5PTlBPU0lUSU9OX1NDQUxFX0NIQU5ORUxTLCBTQ0FMRV9DSEFOTkVMUywgVU5JVF9DSEFOTkVMU30gZnJvbSAnLi4vc3JjL2NoYW5uZWwnO1xuaW1wb3J0IHt3aXRob3V0fSBmcm9tICcuLi9zcmMvdXRpbCc7XG5cbmRlc2NyaWJlKCdjaGFubmVsJywgKCkgPT4ge1xuICBkZXNjcmliZSgnVU5JVF9DSEFOTkVMUycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGJlIENIQU5ORUxTIHdpdGhvdXQgcm93IGFuZCBjb2x1bW4nLCAoKSA9PiB7XG4gICAgICBhc3NlcnQuZGVlcEVxdWFsKFVOSVRfQ0hBTk5FTFMsIHdpdGhvdXQoQ0hBTk5FTFMsIFsncm93JywgJ2NvbHVtbiddKSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdTSU5HTEVfREVGX0NIQU5ORUxTJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgYmUgQ0hBTk5FTFMgd2l0aG91dCBkZXRhaWwgYW5kIG9yZGVyJywgKCkgPT4ge1xuICAgICAgYXNzZXJ0LmRlZXBFcXVhbChTSU5HTEVfREVGX0NIQU5ORUxTLCB3aXRob3V0KENIQU5ORUxTLCBbJ2RldGFpbCcsICdvcmRlciddKSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdTQ0FMRV9DSEFOTkVMUycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGJlIFVOSVRfQ0hBTk5FTFMgd2l0aG91dCBYMiwgWTIsIE9SREVSLCBERVRBSUwsIFRFWFQsIExBQkVMLCBUT09MVElQJywgKCkgPT4ge1xuICAgICAgYXNzZXJ0LmRlZXBFcXVhbChTQ0FMRV9DSEFOTkVMUywgd2l0aG91dChVTklUX0NIQU5ORUxTLCBbJ3gyJywgJ3kyJywgJ2xhdGl0dWRlJywgJ2xvbmdpdHVkZScsICdsYXRpdHVkZTInLCAnbG9uZ2l0dWRlMicsICdvcmRlcicsICdkZXRhaWwnLCAna2V5JywgJ3RleHQnLCAnbGFiZWwnLCAndG9vbHRpcCcsICdocmVmJ10pKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ05PTlBPU0lUSU9OX1NDQUxFX0NIQU5ORUxTJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgYmUgU0NBTEVfQ0hBTk5FTFMgd2l0aG91dCB4LCB5LCB4MiwgeTInLCAoKSA9PiB7XG4gICAgICBhc3NlcnQuZGVlcEVxdWFsKE5PTlBPU0lUSU9OX1NDQUxFX0NIQU5ORUxTLCB3aXRob3V0KFNDQUxFX0NIQU5ORUxTLCBbJ3gnLCAneSddKSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdpc1NjYWxlQ2hhbm5lbCcsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHJldHVybiB0cnVlIGZvciBhbGwgc2NhbGUgY2hhbm5lbCcsICgpID0+IHtcbiAgICAgIGZvciAoY29uc3QgY2hhbm5lbCBvZiBTQ0FMRV9DSEFOTkVMUykge1xuICAgICAgICBhc3NlcnQoaXNTY2FsZUNoYW5uZWwoY2hhbm5lbCkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgncmFuZ2VUeXBlJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgYmUgZGVmaW5lZCBmb3IgYWxsIGNoYW5uZWxzIChubyBlcnJvcikuJywgKCkgPT4ge1xuICAgICAgZm9yIChjb25zdCBjIG9mIENIQU5ORUxTKSB7XG4gICAgICAgIGFzc2VydC5kb2VzTm90VGhyb3coKCkgPT4ge1xuICAgICAgICAgIHJhbmdlVHlwZShjKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXX0=