"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Ajv = require("ajv");
var chai_1 = require("chai");
var compile_1 = require("../src/compile/compile");
var inspect = require('util').inspect;
var fs = require('fs');
var path = require('path');
var vlSchema = require('../../build/vega-lite-schema.json');
var vgSchema = require('vega/build/vega-schema.json');
var ajv = new Ajv({
    validateSchema: true,
    allErrors: true,
    extendRefs: 'fail'
});
ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-04.json'), 'http://json-schema.org/draft-04/schema#');
var validateVl = ajv.compile(vlSchema);
var validateVg = ajv.compile(vgSchema);
function validateVL(spec) {
    var valid = validateVl(spec);
    var errors = validateVl.errors;
    if (!valid) {
        console.log(inspect(errors, { depth: 10, colors: true }));
    }
    chai_1.assert(valid, errors && errors.map(function (err) { return err.message; }).join(', '));
    chai_1.assert.equal(spec.$schema, 'https://vega.github.io/schema/vega-lite/v2.json');
}
function validateVega(spec) {
    var vegaSpec = compile_1.compile(spec).spec;
    var valid = validateVg(vegaSpec);
    var errors = validateVg.errors;
    if (!valid) {
        console.log(inspect(errors, { depth: 10, colors: true }));
    }
    chai_1.assert(valid, errors && errors.map(function (err) { return err.message; }).join(', '));
}
var suffixLength = '_future.vl.json'.length;
describe('Examples', function () {
    var examples = fs.readdirSync('examples/specs');
    examples.forEach(function (example) {
        if (path.extname(example) !== '.json') {
            return;
        }
        var jsonSpec = JSON.parse(fs.readFileSync('examples/specs/' + example));
        describe(example, function () {
            it('should be valid vega-lite with proper $schema', function () {
                if (
                // Do not validate overlay example until we have redesigned it
                example.indexOf('overlay') >= 0 ||
                    // Also ignore box-plot examples until we support selections
                    example.indexOf('box-plot') >= 0 ||
                    // Also ignore all examples with "_future" suffix
                    example.lastIndexOf('_future.vl.json', example.length - suffixLength) >= 0) {
                    return;
                }
                validateVL(jsonSpec);
            });
            it('should produce valid vega', function () {
                validateVega(jsonSpec);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhhbXBsZXMudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2V4YW1wbGVzL2V4YW1wbGVzLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5QkFBMkI7QUFDM0IsNkJBQTRCO0FBQzVCLGtEQUErQztBQUcvQyxJQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDO0FBQ3hDLElBQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN6QixJQUFNLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFFN0IsSUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7QUFDOUQsSUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLDZCQUE2QixDQUFDLENBQUM7QUFFeEQsSUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUM7SUFDbEIsY0FBYyxFQUFFLElBQUk7SUFDcEIsU0FBUyxFQUFFLElBQUk7SUFDZixVQUFVLEVBQUUsTUFBTTtDQUNuQixDQUFDLENBQUM7QUFFSCxHQUFHLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyx3Q0FBd0MsQ0FBQyxFQUFFLHlDQUF5QyxDQUFDLENBQUM7QUFFaEgsSUFBTSxVQUFVLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUN6QyxJQUFNLFVBQVUsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBRXpDLG9CQUFvQixJQUEwQjtJQUM1QyxJQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDL0IsSUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQztJQUNqQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDWCxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsRUFBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUNELGFBQU0sQ0FBQyxLQUFLLEVBQUUsTUFBTSxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBQyxHQUFvQixJQUFLLE9BQUEsR0FBRyxDQUFDLE9BQU8sRUFBWCxDQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUV0RixhQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsaURBQWlELENBQUMsQ0FBQztBQUNoRixDQUFDO0FBRUQsc0JBQXNCLElBQTBCO0lBQzlDLElBQU0sUUFBUSxHQUFHLGlCQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDO0lBRXBDLElBQU0sS0FBSyxHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNuQyxJQUFNLE1BQU0sR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDO0lBQ2pDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNYLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxFQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBQyxDQUFDLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBQ0QsYUFBTSxDQUFDLEtBQUssRUFBRSxNQUFNLElBQUksTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFDLEdBQW9CLElBQUssT0FBQSxHQUFHLENBQUMsT0FBTyxFQUFYLENBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFFRCxJQUFNLFlBQVksR0FBRyxpQkFBaUIsQ0FBQyxNQUFNLENBQUM7QUFDOUMsUUFBUSxDQUFDLFVBQVUsRUFBRTtJQUNuQixJQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFFbEQsUUFBUSxDQUFDLE9BQU8sQ0FBQyxVQUFTLE9BQWU7UUFDdkMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ3RDLE1BQU0sQ0FBQztRQUNULENBQUM7UUFDRCxJQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsaUJBQWlCLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUUxRSxRQUFRLENBQUMsT0FBTyxFQUFFO1lBQ2hCLEVBQUUsQ0FBQywrQ0FBK0MsRUFBRTtnQkFDbEQsRUFBRSxDQUFDLENBQUM7Z0JBQ0YsOERBQThEO2dCQUM5RCxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUM7b0JBQy9CLDREQUE0RDtvQkFDNUQsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDO29CQUNoQyxpREFBaUQ7b0JBQ2pELE9BQU8sQ0FBQyxXQUFXLENBQUMsaUJBQWlCLEVBQUUsT0FBTyxDQUFDLE1BQU0sR0FBRyxZQUFZLENBQUMsSUFBSSxDQUN6RSxDQUFDLENBQUMsQ0FBQztvQkFDSCxNQUFNLENBQUM7Z0JBQ1QsQ0FBQztnQkFDRCxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDdkIsQ0FBQyxDQUFDLENBQUM7WUFFSCxFQUFFLENBQUMsMkJBQTJCLEVBQUU7Z0JBQzlCLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN6QixDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEFqdiBmcm9tICdhanYnO1xuaW1wb3J0IHthc3NlcnR9IGZyb20gJ2NoYWknO1xuaW1wb3J0IHtjb21waWxlfSBmcm9tICcuLi9zcmMvY29tcGlsZS9jb21waWxlJztcbmltcG9ydCB7VG9wTGV2ZWxFeHRlbmRlZFNwZWN9IGZyb20gJy4uL3NyYy9zcGVjJztcblxuY29uc3QgaW5zcGVjdCA9IHJlcXVpcmUoJ3V0aWwnKS5pbnNwZWN0O1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcblxuY29uc3QgdmxTY2hlbWEgPSByZXF1aXJlKCcuLi8uLi9idWlsZC92ZWdhLWxpdGUtc2NoZW1hLmpzb24nKTtcbmNvbnN0IHZnU2NoZW1hID0gcmVxdWlyZSgndmVnYS9idWlsZC92ZWdhLXNjaGVtYS5qc29uJyk7XG5cbmNvbnN0IGFqdiA9IG5ldyBBanYoe1xuICB2YWxpZGF0ZVNjaGVtYTogdHJ1ZSxcbiAgYWxsRXJyb3JzOiB0cnVlLFxuICBleHRlbmRSZWZzOiAnZmFpbCdcbn0pO1xuXG5hanYuYWRkTWV0YVNjaGVtYShyZXF1aXJlKCdhanYvbGliL3JlZnMvanNvbi1zY2hlbWEtZHJhZnQtMDQuanNvbicpLCAnaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNC9zY2hlbWEjJyk7XG5cbmNvbnN0IHZhbGlkYXRlVmwgPSBhanYuY29tcGlsZSh2bFNjaGVtYSk7XG5jb25zdCB2YWxpZGF0ZVZnID0gYWp2LmNvbXBpbGUodmdTY2hlbWEpO1xuXG5mdW5jdGlvbiB2YWxpZGF0ZVZMKHNwZWM6IFRvcExldmVsRXh0ZW5kZWRTcGVjKSB7XG4gIGNvbnN0IHZhbGlkID0gdmFsaWRhdGVWbChzcGVjKTtcbiAgY29uc3QgZXJyb3JzID0gdmFsaWRhdGVWbC5lcnJvcnM7XG4gIGlmICghdmFsaWQpIHtcbiAgICBjb25zb2xlLmxvZyhpbnNwZWN0KGVycm9ycywge2RlcHRoOiAxMCwgY29sb3JzOiB0cnVlfSkpO1xuICB9XG4gIGFzc2VydCh2YWxpZCwgZXJyb3JzICYmIGVycm9ycy5tYXAoKGVycjogQWp2LkVycm9yT2JqZWN0KSA9PiBlcnIubWVzc2FnZSkuam9pbignLCAnKSk7XG5cbiAgYXNzZXJ0LmVxdWFsKHNwZWMuJHNjaGVtYSwgJ2h0dHBzOi8vdmVnYS5naXRodWIuaW8vc2NoZW1hL3ZlZ2EtbGl0ZS92Mi5qc29uJyk7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlVmVnYShzcGVjOiBUb3BMZXZlbEV4dGVuZGVkU3BlYykge1xuICBjb25zdCB2ZWdhU3BlYyA9IGNvbXBpbGUoc3BlYykuc3BlYztcblxuICBjb25zdCB2YWxpZCA9IHZhbGlkYXRlVmcodmVnYVNwZWMpO1xuICBjb25zdCBlcnJvcnMgPSB2YWxpZGF0ZVZnLmVycm9ycztcbiAgaWYgKCF2YWxpZCkge1xuICAgIGNvbnNvbGUubG9nKGluc3BlY3QoZXJyb3JzLCB7ZGVwdGg6IDEwLCBjb2xvcnM6IHRydWV9KSk7XG4gIH1cbiAgYXNzZXJ0KHZhbGlkLCBlcnJvcnMgJiYgZXJyb3JzLm1hcCgoZXJyOiBBanYuRXJyb3JPYmplY3QpID0+IGVyci5tZXNzYWdlKS5qb2luKCcsICcpKTtcbn1cblxuY29uc3Qgc3VmZml4TGVuZ3RoID0gJ19mdXR1cmUudmwuanNvbicubGVuZ3RoO1xuZGVzY3JpYmUoJ0V4YW1wbGVzJywgZnVuY3Rpb24oKSB7XG4gIGNvbnN0IGV4YW1wbGVzID0gZnMucmVhZGRpclN5bmMoJ2V4YW1wbGVzL3NwZWNzJyk7XG5cbiAgZXhhbXBsZXMuZm9yRWFjaChmdW5jdGlvbihleGFtcGxlOiBzdHJpbmcpIHtcbiAgICBpZiAocGF0aC5leHRuYW1lKGV4YW1wbGUpICE9PSAnLmpzb24nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGpzb25TcGVjID0gSlNPTi5wYXJzZShmcy5yZWFkRmlsZVN5bmMoJ2V4YW1wbGVzL3NwZWNzLycgKyBleGFtcGxlKSk7XG5cbiAgICBkZXNjcmliZShleGFtcGxlLCBmdW5jdGlvbigpIHtcbiAgICAgIGl0KCdzaG91bGQgYmUgdmFsaWQgdmVnYS1saXRlIHdpdGggcHJvcGVyICRzY2hlbWEnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIC8vIERvIG5vdCB2YWxpZGF0ZSBvdmVybGF5IGV4YW1wbGUgdW50aWwgd2UgaGF2ZSByZWRlc2lnbmVkIGl0XG4gICAgICAgICAgZXhhbXBsZS5pbmRleE9mKCdvdmVybGF5JykgPj0gMCB8fFxuICAgICAgICAgIC8vIEFsc28gaWdub3JlIGJveC1wbG90IGV4YW1wbGVzIHVudGlsIHdlIHN1cHBvcnQgc2VsZWN0aW9uc1xuICAgICAgICAgIGV4YW1wbGUuaW5kZXhPZignYm94LXBsb3QnKSA+PSAwIHx8XG4gICAgICAgICAgLy8gQWxzbyBpZ25vcmUgYWxsIGV4YW1wbGVzIHdpdGggXCJfZnV0dXJlXCIgc3VmZml4XG4gICAgICAgICAgZXhhbXBsZS5sYXN0SW5kZXhPZignX2Z1dHVyZS52bC5qc29uJywgZXhhbXBsZS5sZW5ndGggLSBzdWZmaXhMZW5ndGgpID49IDBcbiAgICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFsaWRhdGVWTChqc29uU3BlYyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBwcm9kdWNlIHZhbGlkIHZlZ2EnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFsaWRhdGVWZWdhKGpzb25TcGVjKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl19