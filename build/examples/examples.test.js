"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Ajv = require("ajv");
var chai_1 = require("chai");
var compile_1 = require("../src/compile/compile");
var inspect = require('util').inspect;
var fs = require('fs');
var path = require('path');
var vlSchema = require('../../build/vega-lite-schema.json');
var vgSchema = require('vega/build/vega-schema.json');
var ajv = new Ajv({
    validateSchema: true,
    allErrors: true,
    extendRefs: 'fail',
    schemaId: 'id'
});
ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-04.json'), 'http://json-schema.org/draft-04/schema#');
var validateVl = ajv.compile(vlSchema);
var validateVg = ajv.compile(vgSchema);
function validateVL(spec) {
    var valid = validateVl(spec);
    var errors = validateVl.errors;
    if (!valid) {
        console.log(inspect(errors, { depth: 10, colors: true }));
    }
    chai_1.assert(valid, errors && errors.map(function (err) { return err.message; }).join(', '));
    chai_1.assert.equal(spec.$schema.substr(0, 42), 'https://vega.github.io/schema/vega-lite/v2');
}
function validateVega(spec) {
    var vegaSpec = compile_1.compile(spec).spec;
    var valid = validateVg(vegaSpec);
    var errors = validateVg.errors;
    if (!valid) {
        console.log(inspect(errors, { depth: 10, colors: true }));
    }
    chai_1.assert(valid, errors && errors.map(function (err) { return err.message; }).join(', '));
}
var suffixLength = '_future.vl.json'.length;
describe('Examples', function () {
    var examples = fs.readdirSync('examples/specs');
    examples.forEach(function (example) {
        if (path.extname(example) !== '.json') {
            return;
        }
        var jsonSpec = JSON.parse(fs.readFileSync('examples/specs/' + example));
        describe(example, function () {
            it('should be valid vega-lite with proper $schema', function () {
                if (
                // Do not validate overlay example until we have redesigned it
                example.indexOf('overlay') >= 0 ||
                    // Also ignore box-plot examples until we support selections
                    example.indexOf('box-plot') >= 0 ||
                    // Also ignore all examples with "_future" suffix
                    example.lastIndexOf('_future.vl.json', example.length - suffixLength) >= 0) {
                    return;
                }
                validateVL(jsonSpec);
            });
            it('should produce valid vega', function () {
                validateVega(jsonSpec);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhhbXBsZXMudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2V4YW1wbGVzL2V4YW1wbGVzLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5QkFBMkI7QUFDM0IsNkJBQTRCO0FBQzVCLGtEQUErQztBQUcvQyxJQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDO0FBQ3hDLElBQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN6QixJQUFNLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFFN0IsSUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7QUFDOUQsSUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLDZCQUE2QixDQUFDLENBQUM7QUFFeEQsSUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUM7SUFDbEIsY0FBYyxFQUFFLElBQUk7SUFDcEIsU0FBUyxFQUFFLElBQUk7SUFDZixVQUFVLEVBQUUsTUFBTTtJQUNsQixRQUFRLEVBQUUsSUFBSTtDQUNmLENBQUMsQ0FBQztBQUVILEdBQUcsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLHdDQUF3QyxDQUFDLEVBQUUseUNBQXlDLENBQUMsQ0FBQztBQUVoSCxJQUFNLFVBQVUsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3pDLElBQU0sVUFBVSxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFFekMsb0JBQW9CLElBQTBCO0lBQzVDLElBQU0sS0FBSyxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMvQixJQUFNLE1BQU0sR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDO0lBQ2pDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNYLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxFQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBQyxDQUFDLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBQ0QsYUFBTSxDQUFDLEtBQUssRUFBRSxNQUFNLElBQUksTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFDLEdBQW9CLElBQUssT0FBQSxHQUFHLENBQUMsT0FBTyxFQUFYLENBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBRXRGLGFBQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLDRDQUE0QyxDQUFDLENBQUM7QUFDekYsQ0FBQztBQUVELHNCQUFzQixJQUEwQjtJQUM5QyxJQUFNLFFBQVEsR0FBRyxpQkFBTyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQztJQUVwQyxJQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbkMsSUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQztJQUNqQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDWCxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsRUFBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUNELGFBQU0sQ0FBQyxLQUFLLEVBQUUsTUFBTSxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBQyxHQUFvQixJQUFLLE9BQUEsR0FBRyxDQUFDLE9BQU8sRUFBWCxDQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUN4RixDQUFDO0FBRUQsSUFBTSxZQUFZLEdBQUcsaUJBQWlCLENBQUMsTUFBTSxDQUFDO0FBQzlDLFFBQVEsQ0FBQyxVQUFVLEVBQUU7SUFDbkIsSUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBRWxELFFBQVEsQ0FBQyxPQUFPLENBQUMsVUFBUyxPQUFlO1FBQ3ZDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQztZQUN0QyxNQUFNLENBQUM7UUFDVCxDQUFDO1FBQ0QsSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLGlCQUFpQixHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFFMUUsUUFBUSxDQUFDLE9BQU8sRUFBRTtZQUNoQixFQUFFLENBQUMsK0NBQStDLEVBQUU7Z0JBQ2xELEVBQUUsQ0FBQyxDQUFDO2dCQUNGLDhEQUE4RDtnQkFDOUQsT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDO29CQUMvQiw0REFBNEQ7b0JBQzVELE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQztvQkFDaEMsaURBQWlEO29CQUNqRCxPQUFPLENBQUMsV0FBVyxDQUFDLGlCQUFpQixFQUFFLE9BQU8sQ0FBQyxNQUFNLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FDekUsQ0FBQyxDQUFDLENBQUM7b0JBQ0gsTUFBTSxDQUFDO2dCQUNULENBQUM7Z0JBQ0QsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3ZCLENBQUMsQ0FBQyxDQUFDO1lBRUgsRUFBRSxDQUFDLDJCQUEyQixFQUFFO2dCQUM5QixZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDekIsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBBanYgZnJvbSAnYWp2JztcbmltcG9ydCB7YXNzZXJ0fSBmcm9tICdjaGFpJztcbmltcG9ydCB7Y29tcGlsZX0gZnJvbSAnLi4vc3JjL2NvbXBpbGUvY29tcGlsZSc7XG5pbXBvcnQge1RvcExldmVsRXh0ZW5kZWRTcGVjfSBmcm9tICcuLi9zcmMvc3BlYyc7XG5cbmNvbnN0IGluc3BlY3QgPSByZXF1aXJlKCd1dGlsJykuaW5zcGVjdDtcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5cbmNvbnN0IHZsU2NoZW1hID0gcmVxdWlyZSgnLi4vLi4vYnVpbGQvdmVnYS1saXRlLXNjaGVtYS5qc29uJyk7XG5jb25zdCB2Z1NjaGVtYSA9IHJlcXVpcmUoJ3ZlZ2EvYnVpbGQvdmVnYS1zY2hlbWEuanNvbicpO1xuXG5jb25zdCBhanYgPSBuZXcgQWp2KHtcbiAgdmFsaWRhdGVTY2hlbWE6IHRydWUsXG4gIGFsbEVycm9yczogdHJ1ZSxcbiAgZXh0ZW5kUmVmczogJ2ZhaWwnLFxuICBzY2hlbWFJZDogJ2lkJ1xufSk7XG5cbmFqdi5hZGRNZXRhU2NoZW1hKHJlcXVpcmUoJ2Fqdi9saWIvcmVmcy9qc29uLXNjaGVtYS1kcmFmdC0wNC5qc29uJyksICdodHRwOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LTA0L3NjaGVtYSMnKTtcblxuY29uc3QgdmFsaWRhdGVWbCA9IGFqdi5jb21waWxlKHZsU2NoZW1hKTtcbmNvbnN0IHZhbGlkYXRlVmcgPSBhanYuY29tcGlsZSh2Z1NjaGVtYSk7XG5cbmZ1bmN0aW9uIHZhbGlkYXRlVkwoc3BlYzogVG9wTGV2ZWxFeHRlbmRlZFNwZWMpIHtcbiAgY29uc3QgdmFsaWQgPSB2YWxpZGF0ZVZsKHNwZWMpO1xuICBjb25zdCBlcnJvcnMgPSB2YWxpZGF0ZVZsLmVycm9ycztcbiAgaWYgKCF2YWxpZCkge1xuICAgIGNvbnNvbGUubG9nKGluc3BlY3QoZXJyb3JzLCB7ZGVwdGg6IDEwLCBjb2xvcnM6IHRydWV9KSk7XG4gIH1cbiAgYXNzZXJ0KHZhbGlkLCBlcnJvcnMgJiYgZXJyb3JzLm1hcCgoZXJyOiBBanYuRXJyb3JPYmplY3QpID0+IGVyci5tZXNzYWdlKS5qb2luKCcsICcpKTtcblxuICBhc3NlcnQuZXF1YWwoc3BlYy4kc2NoZW1hLnN1YnN0cigwLCA0MiksICdodHRwczovL3ZlZ2EuZ2l0aHViLmlvL3NjaGVtYS92ZWdhLWxpdGUvdjInKTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVWZWdhKHNwZWM6IFRvcExldmVsRXh0ZW5kZWRTcGVjKSB7XG4gIGNvbnN0IHZlZ2FTcGVjID0gY29tcGlsZShzcGVjKS5zcGVjO1xuXG4gIGNvbnN0IHZhbGlkID0gdmFsaWRhdGVWZyh2ZWdhU3BlYyk7XG4gIGNvbnN0IGVycm9ycyA9IHZhbGlkYXRlVmcuZXJyb3JzO1xuICBpZiAoIXZhbGlkKSB7XG4gICAgY29uc29sZS5sb2coaW5zcGVjdChlcnJvcnMsIHtkZXB0aDogMTAsIGNvbG9yczogdHJ1ZX0pKTtcbiAgfVxuICBhc3NlcnQodmFsaWQsIGVycm9ycyAmJiBlcnJvcnMubWFwKChlcnI6IEFqdi5FcnJvck9iamVjdCkgPT4gZXJyLm1lc3NhZ2UpLmpvaW4oJywgJykpO1xufVxuXG5jb25zdCBzdWZmaXhMZW5ndGggPSAnX2Z1dHVyZS52bC5qc29uJy5sZW5ndGg7XG5kZXNjcmliZSgnRXhhbXBsZXMnLCBmdW5jdGlvbigpIHtcbiAgY29uc3QgZXhhbXBsZXMgPSBmcy5yZWFkZGlyU3luYygnZXhhbXBsZXMvc3BlY3MnKTtcblxuICBleGFtcGxlcy5mb3JFYWNoKGZ1bmN0aW9uKGV4YW1wbGU6IHN0cmluZykge1xuICAgIGlmIChwYXRoLmV4dG5hbWUoZXhhbXBsZSkgIT09ICcuanNvbicpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QganNvblNwZWMgPSBKU09OLnBhcnNlKGZzLnJlYWRGaWxlU3luYygnZXhhbXBsZXMvc3BlY3MvJyArIGV4YW1wbGUpKTtcblxuICAgIGRlc2NyaWJlKGV4YW1wbGUsIGZ1bmN0aW9uKCkge1xuICAgICAgaXQoJ3Nob3VsZCBiZSB2YWxpZCB2ZWdhLWxpdGUgd2l0aCBwcm9wZXIgJHNjaGVtYScsIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgLy8gRG8gbm90IHZhbGlkYXRlIG92ZXJsYXkgZXhhbXBsZSB1bnRpbCB3ZSBoYXZlIHJlZGVzaWduZWQgaXRcbiAgICAgICAgICBleGFtcGxlLmluZGV4T2YoJ292ZXJsYXknKSA+PSAwIHx8XG4gICAgICAgICAgLy8gQWxzbyBpZ25vcmUgYm94LXBsb3QgZXhhbXBsZXMgdW50aWwgd2Ugc3VwcG9ydCBzZWxlY3Rpb25zXG4gICAgICAgICAgZXhhbXBsZS5pbmRleE9mKCdib3gtcGxvdCcpID49IDAgfHxcbiAgICAgICAgICAvLyBBbHNvIGlnbm9yZSBhbGwgZXhhbXBsZXMgd2l0aCBcIl9mdXR1cmVcIiBzdWZmaXhcbiAgICAgICAgICBleGFtcGxlLmxhc3RJbmRleE9mKCdfZnV0dXJlLnZsLmpzb24nLCBleGFtcGxlLmxlbmd0aCAtIHN1ZmZpeExlbmd0aCkgPj0gMFxuICAgICAgICAgICkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YWxpZGF0ZVZMKGpzb25TcGVjKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIHByb2R1Y2UgdmFsaWQgdmVnYScsIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YWxpZGF0ZVZlZ2EoanNvblNwZWMpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXX0=