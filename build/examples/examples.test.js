"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Ajv = require("ajv");
var chai_1 = require("chai");
var compile_1 = require("../src/compile/compile");
var inspect = require('util').inspect;
var fs = require('fs');
var path = require('path');
var vlSchema = require('../../build/vega-lite-schema.json');
var vgSchema = require('vega/build/vega-schema.json');
var ajv = new Ajv({
    validateSchema: true,
    allErrors: true,
    extendRefs: 'fail',
    schemaId: 'auto' // for draft 04 and 06 schemas
});
ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));
ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-04.json')); // for Vega
var validateVl = ajv.compile(vlSchema);
var validateVg = ajv.compile(vgSchema);
function validateVL(spec) {
    var valid = validateVl(spec);
    var errors = validateVl.errors;
    if (!valid) {
        console.log(inspect(errors, { depth: 10, colors: true }));
    }
    chai_1.assert(valid, errors && errors.map(function (err) { return err.message; }).join(', '));
    chai_1.assert.equal(spec.$schema.substr(0, 42), 'https://vega.github.io/schema/vega-lite/v2');
}
function validateVega(spec) {
    var vegaSpec = compile_1.compile(spec).spec;
    var valid = validateVg(vegaSpec);
    var errors = validateVg.errors;
    if (!valid) {
        console.log(inspect(errors, { depth: 10, colors: true }));
    }
    chai_1.assert(valid, errors && errors.map(function (err) { return err.message; }).join(', '));
}
var suffixLength = '_future.vl.json'.length;
describe('Examples', function () {
    var examples = fs.readdirSync('examples/specs');
    examples.forEach(function (example) {
        if (path.extname(example) !== '.json') {
            return;
        }
        var jsonSpec = JSON.parse(fs.readFileSync('examples/specs/' + example));
        describe(example, function () {
            it('should be valid vega-lite with proper $schema', function () {
                if (
                // Do not validate overlay example until we have redesigned it
                example.indexOf('overlay') >= 0 ||
                    // Also ignore boxplot examples until we support selections
                    example.indexOf('boxplot') >= 0 ||
                    // Also ignore all examples with "_future" suffix
                    example.lastIndexOf('_future.vl.json', example.length - suffixLength) >= 0) {
                    return;
                }
                validateVL(jsonSpec);
            });
            it('should produce valid vega', function () {
                validateVega(jsonSpec);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhhbXBsZXMudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2V4YW1wbGVzL2V4YW1wbGVzLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5QkFBMkI7QUFDM0IsNkJBQTRCO0FBRTVCLGtEQUErQztBQUcvQyxJQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDO0FBQ3hDLElBQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN6QixJQUFNLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFFN0IsSUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7QUFDOUQsSUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLDZCQUE2QixDQUFDLENBQUM7QUFFeEQsSUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUM7SUFDbEIsY0FBYyxFQUFFLElBQUk7SUFDcEIsU0FBUyxFQUFFLElBQUk7SUFDZixVQUFVLEVBQUUsTUFBTTtJQUNsQixRQUFRLEVBQUUsTUFBTSxDQUFFLDhCQUE4QjtDQUNqRCxDQUFDLENBQUM7QUFFSCxHQUFHLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDLENBQUM7QUFDckUsR0FBRyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsd0NBQXdDLENBQUMsQ0FBQyxDQUFDLENBQUUsV0FBVztBQUVsRixJQUFNLFVBQVUsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3pDLElBQU0sVUFBVSxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFFekMsb0JBQW9CLElBQWtCO0lBQ3BDLElBQU0sS0FBSyxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMvQixJQUFNLE1BQU0sR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDO0lBQ2pDLElBQUksQ0FBQyxLQUFLLEVBQUU7UUFDVixPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsRUFBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDLENBQUM7S0FDekQ7SUFDRCxhQUFNLENBQUMsS0FBSyxFQUFFLE1BQU0sSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLFVBQUMsR0FBb0IsSUFBSyxPQUFBLEdBQUcsQ0FBQyxPQUFPLEVBQVgsQ0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFFdEYsYUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsNENBQTRDLENBQUMsQ0FBQztBQUN6RixDQUFDO0FBRUQsc0JBQXNCLElBQWtCO0lBQ3RDLElBQU0sUUFBUSxHQUFHLGlCQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDO0lBRXBDLElBQU0sS0FBSyxHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNuQyxJQUFNLE1BQU0sR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDO0lBQ2pDLElBQUksQ0FBQyxLQUFLLEVBQUU7UUFDVixPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsRUFBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDLENBQUM7S0FDekQ7SUFDRCxhQUFNLENBQUMsS0FBSyxFQUFFLE1BQU0sSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLFVBQUMsR0FBb0IsSUFBSyxPQUFBLEdBQUcsQ0FBQyxPQUFPLEVBQVgsQ0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDeEYsQ0FBQztBQUVELElBQU0sWUFBWSxHQUFHLGlCQUFpQixDQUFDLE1BQU0sQ0FBQztBQUM5QyxRQUFRLENBQUMsVUFBVSxFQUFFO0lBQ25CLElBQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUVsRCxRQUFRLENBQUMsT0FBTyxDQUFDLFVBQVMsT0FBZTtRQUN2QyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssT0FBTyxFQUFFO1lBQ3JDLE9BQU87U0FDUjtRQUNELElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBRTFFLFFBQVEsQ0FBQyxPQUFPLEVBQUU7WUFDaEIsRUFBRSxDQUFDLCtDQUErQyxFQUFFO2dCQUNsRDtnQkFDRSw4REFBOEQ7Z0JBQzlELE9BQU8sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQztvQkFDL0IsMkRBQTJEO29CQUMzRCxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUM7b0JBQy9CLGlEQUFpRDtvQkFDakQsT0FBTyxDQUFDLFdBQVcsQ0FBQyxpQkFBaUIsRUFBRSxPQUFPLENBQUMsTUFBTSxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFDeEU7b0JBQ0YsT0FBTztpQkFDUjtnQkFDRCxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDdkIsQ0FBQyxDQUFDLENBQUM7WUFFSCxFQUFFLENBQUMsMkJBQTJCLEVBQUU7Z0JBQzlCLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN6QixDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEFqdiBmcm9tICdhanYnO1xuaW1wb3J0IHthc3NlcnR9IGZyb20gJ2NoYWknO1xuXG5pbXBvcnQge2NvbXBpbGV9IGZyb20gJy4uL3NyYy9jb21waWxlL2NvbXBpbGUnO1xuaW1wb3J0IHtUb3BMZXZlbFNwZWN9IGZyb20gJy4uL3NyYy9zcGVjJztcblxuY29uc3QgaW5zcGVjdCA9IHJlcXVpcmUoJ3V0aWwnKS5pbnNwZWN0O1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcblxuY29uc3QgdmxTY2hlbWEgPSByZXF1aXJlKCcuLi8uLi9idWlsZC92ZWdhLWxpdGUtc2NoZW1hLmpzb24nKTtcbmNvbnN0IHZnU2NoZW1hID0gcmVxdWlyZSgndmVnYS9idWlsZC92ZWdhLXNjaGVtYS5qc29uJyk7XG5cbmNvbnN0IGFqdiA9IG5ldyBBanYoe1xuICB2YWxpZGF0ZVNjaGVtYTogdHJ1ZSxcbiAgYWxsRXJyb3JzOiB0cnVlLFxuICBleHRlbmRSZWZzOiAnZmFpbCcsXG4gIHNjaGVtYUlkOiAnYXV0bycgIC8vIGZvciBkcmFmdCAwNCBhbmQgMDYgc2NoZW1hc1xufSk7XG5cbmFqdi5hZGRNZXRhU2NoZW1hKHJlcXVpcmUoJ2Fqdi9saWIvcmVmcy9qc29uLXNjaGVtYS1kcmFmdC0wNi5qc29uJykpO1xuYWp2LmFkZE1ldGFTY2hlbWEocmVxdWlyZSgnYWp2L2xpYi9yZWZzL2pzb24tc2NoZW1hLWRyYWZ0LTA0Lmpzb24nKSk7ICAvLyBmb3IgVmVnYVxuXG5jb25zdCB2YWxpZGF0ZVZsID0gYWp2LmNvbXBpbGUodmxTY2hlbWEpO1xuY29uc3QgdmFsaWRhdGVWZyA9IGFqdi5jb21waWxlKHZnU2NoZW1hKTtcblxuZnVuY3Rpb24gdmFsaWRhdGVWTChzcGVjOiBUb3BMZXZlbFNwZWMpIHtcbiAgY29uc3QgdmFsaWQgPSB2YWxpZGF0ZVZsKHNwZWMpO1xuICBjb25zdCBlcnJvcnMgPSB2YWxpZGF0ZVZsLmVycm9ycztcbiAgaWYgKCF2YWxpZCkge1xuICAgIGNvbnNvbGUubG9nKGluc3BlY3QoZXJyb3JzLCB7ZGVwdGg6IDEwLCBjb2xvcnM6IHRydWV9KSk7XG4gIH1cbiAgYXNzZXJ0KHZhbGlkLCBlcnJvcnMgJiYgZXJyb3JzLm1hcCgoZXJyOiBBanYuRXJyb3JPYmplY3QpID0+IGVyci5tZXNzYWdlKS5qb2luKCcsICcpKTtcblxuICBhc3NlcnQuZXF1YWwoc3BlYy4kc2NoZW1hLnN1YnN0cigwLCA0MiksICdodHRwczovL3ZlZ2EuZ2l0aHViLmlvL3NjaGVtYS92ZWdhLWxpdGUvdjInKTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVWZWdhKHNwZWM6IFRvcExldmVsU3BlYykge1xuICBjb25zdCB2ZWdhU3BlYyA9IGNvbXBpbGUoc3BlYykuc3BlYztcblxuICBjb25zdCB2YWxpZCA9IHZhbGlkYXRlVmcodmVnYVNwZWMpO1xuICBjb25zdCBlcnJvcnMgPSB2YWxpZGF0ZVZnLmVycm9ycztcbiAgaWYgKCF2YWxpZCkge1xuICAgIGNvbnNvbGUubG9nKGluc3BlY3QoZXJyb3JzLCB7ZGVwdGg6IDEwLCBjb2xvcnM6IHRydWV9KSk7XG4gIH1cbiAgYXNzZXJ0KHZhbGlkLCBlcnJvcnMgJiYgZXJyb3JzLm1hcCgoZXJyOiBBanYuRXJyb3JPYmplY3QpID0+IGVyci5tZXNzYWdlKS5qb2luKCcsICcpKTtcbn1cblxuY29uc3Qgc3VmZml4TGVuZ3RoID0gJ19mdXR1cmUudmwuanNvbicubGVuZ3RoO1xuZGVzY3JpYmUoJ0V4YW1wbGVzJywgZnVuY3Rpb24oKSB7XG4gIGNvbnN0IGV4YW1wbGVzID0gZnMucmVhZGRpclN5bmMoJ2V4YW1wbGVzL3NwZWNzJyk7XG5cbiAgZXhhbXBsZXMuZm9yRWFjaChmdW5jdGlvbihleGFtcGxlOiBzdHJpbmcpIHtcbiAgICBpZiAocGF0aC5leHRuYW1lKGV4YW1wbGUpICE9PSAnLmpzb24nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGpzb25TcGVjID0gSlNPTi5wYXJzZShmcy5yZWFkRmlsZVN5bmMoJ2V4YW1wbGVzL3NwZWNzLycgKyBleGFtcGxlKSk7XG5cbiAgICBkZXNjcmliZShleGFtcGxlLCBmdW5jdGlvbigpIHtcbiAgICAgIGl0KCdzaG91bGQgYmUgdmFsaWQgdmVnYS1saXRlIHdpdGggcHJvcGVyICRzY2hlbWEnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIC8vIERvIG5vdCB2YWxpZGF0ZSBvdmVybGF5IGV4YW1wbGUgdW50aWwgd2UgaGF2ZSByZWRlc2lnbmVkIGl0XG4gICAgICAgICAgZXhhbXBsZS5pbmRleE9mKCdvdmVybGF5JykgPj0gMCB8fFxuICAgICAgICAgIC8vIEFsc28gaWdub3JlIGJveHBsb3QgZXhhbXBsZXMgdW50aWwgd2Ugc3VwcG9ydCBzZWxlY3Rpb25zXG4gICAgICAgICAgZXhhbXBsZS5pbmRleE9mKCdib3hwbG90JykgPj0gMCB8fFxuICAgICAgICAgIC8vIEFsc28gaWdub3JlIGFsbCBleGFtcGxlcyB3aXRoIFwiX2Z1dHVyZVwiIHN1ZmZpeFxuICAgICAgICAgIGV4YW1wbGUubGFzdEluZGV4T2YoJ19mdXR1cmUudmwuanNvbicsIGV4YW1wbGUubGVuZ3RoIC0gc3VmZml4TGVuZ3RoKSA+PSAwXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhbGlkYXRlVkwoanNvblNwZWMpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgcHJvZHVjZSB2YWxpZCB2ZWdhJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhbGlkYXRlVmVnYShqc29uU3BlYyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdfQ==