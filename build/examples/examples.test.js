"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Ajv = require("ajv");
var chai_1 = require("chai");
var compile_1 = require("../src/compile/compile");
var inspect = require('util').inspect;
var fs = require('fs');
var path = require('path');
var vlSchema = require('../../build/vega-lite-schema.json');
var vgSchema = require('vega/build/vega-schema.json');
var ajv = new Ajv({
    validateSchema: true,
    allErrors: true,
    extendRefs: 'fail',
    schemaId: 'auto' // for draft 04 and 06 schemas
});
ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));
ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-04.json')); // for Vega
var validateVl = ajv.compile(vlSchema);
var validateVg = ajv.compile(vgSchema);
function validateVL(spec) {
    var valid = validateVl(spec);
    var errors = validateVl.errors;
    if (!valid) {
        console.log(inspect(errors, { depth: 10, colors: true }));
    }
    chai_1.assert(valid, errors && errors.map(function (err) { return err.message; }).join(', '));
    chai_1.assert.equal(spec.$schema.substr(0, 42), 'https://vega.github.io/schema/vega-lite/v2');
}
function validateVega(spec) {
    var vegaSpec = compile_1.compile(spec).spec;
    var valid = validateVg(vegaSpec);
    var errors = validateVg.errors;
    if (!valid) {
        console.log(inspect(errors, { depth: 10, colors: true }));
    }
    chai_1.assert(valid, errors && errors.map(function (err) { return err.message; }).join(', '));
}
var suffixLength = '_future.vl.json'.length;
describe('Examples', function () {
    var examples = fs.readdirSync('examples/specs');
    examples.forEach(function (example) {
        if (path.extname(example) !== '.json') {
            return;
        }
        var jsonSpec = JSON.parse(fs.readFileSync('examples/specs/' + example));
        describe(example, function () {
            it('should be valid vega-lite with proper $schema', function () {
                if (
                // Do not validate overlay example until we have redesigned it
                example.indexOf('overlay') >= 0 ||
                    // Also ignore box-plot examples until we support selections
                    example.indexOf('box-plot') >= 0 ||
                    // Also ignore all examples with "_future" suffix
                    example.lastIndexOf('_future.vl.json', example.length - suffixLength) >= 0) {
                    return;
                }
                validateVL(jsonSpec);
            });
            it('should produce valid vega', function () {
                validateVega(jsonSpec);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhhbXBsZXMudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2V4YW1wbGVzL2V4YW1wbGVzLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5QkFBMkI7QUFDM0IsNkJBQTRCO0FBRTVCLGtEQUErQztBQUcvQyxJQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDO0FBQ3hDLElBQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN6QixJQUFNLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFFN0IsSUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7QUFDOUQsSUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLDZCQUE2QixDQUFDLENBQUM7QUFFeEQsSUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUM7SUFDbEIsY0FBYyxFQUFFLElBQUk7SUFDcEIsU0FBUyxFQUFFLElBQUk7SUFDZixVQUFVLEVBQUUsTUFBTTtJQUNsQixRQUFRLEVBQUUsTUFBTSxDQUFFLDhCQUE4QjtDQUNqRCxDQUFDLENBQUM7QUFFSCxHQUFHLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDLENBQUM7QUFDckUsR0FBRyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsd0NBQXdDLENBQUMsQ0FBQyxDQUFDLENBQUUsV0FBVztBQUVsRixJQUFNLFVBQVUsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3pDLElBQU0sVUFBVSxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFFekMsb0JBQW9CLElBQTBCO0lBQzVDLElBQU0sS0FBSyxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMvQixJQUFNLE1BQU0sR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDO0lBQ2pDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNYLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxFQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBQyxDQUFDLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBQ0QsYUFBTSxDQUFDLEtBQUssRUFBRSxNQUFNLElBQUksTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFDLEdBQW9CLElBQUssT0FBQSxHQUFHLENBQUMsT0FBTyxFQUFYLENBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBRXRGLGFBQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLDRDQUE0QyxDQUFDLENBQUM7QUFDekYsQ0FBQztBQUVELHNCQUFzQixJQUEwQjtJQUM5QyxJQUFNLFFBQVEsR0FBRyxpQkFBTyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQztJQUVwQyxJQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbkMsSUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQztJQUNqQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDWCxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsRUFBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUNELGFBQU0sQ0FBQyxLQUFLLEVBQUUsTUFBTSxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBQyxHQUFvQixJQUFLLE9BQUEsR0FBRyxDQUFDLE9BQU8sRUFBWCxDQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUN4RixDQUFDO0FBRUQsSUFBTSxZQUFZLEdBQUcsaUJBQWlCLENBQUMsTUFBTSxDQUFDO0FBQzlDLFFBQVEsQ0FBQyxVQUFVLEVBQUU7SUFDbkIsSUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBRWxELFFBQVEsQ0FBQyxPQUFPLENBQUMsVUFBUyxPQUFlO1FBQ3ZDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQztZQUN0QyxNQUFNLENBQUM7UUFDVCxDQUFDO1FBQ0QsSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLGlCQUFpQixHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFFMUUsUUFBUSxDQUFDLE9BQU8sRUFBRTtZQUNoQixFQUFFLENBQUMsK0NBQStDLEVBQUU7Z0JBQ2xELEVBQUUsQ0FBQyxDQUFDO2dCQUNGLDhEQUE4RDtnQkFDOUQsT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDO29CQUMvQiw0REFBNEQ7b0JBQzVELE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQztvQkFDaEMsaURBQWlEO29CQUNqRCxPQUFPLENBQUMsV0FBVyxDQUFDLGlCQUFpQixFQUFFLE9BQU8sQ0FBQyxNQUFNLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FDekUsQ0FBQyxDQUFDLENBQUM7b0JBQ0gsTUFBTSxDQUFDO2dCQUNULENBQUM7Z0JBQ0QsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3ZCLENBQUMsQ0FBQyxDQUFDO1lBRUgsRUFBRSxDQUFDLDJCQUEyQixFQUFFO2dCQUM5QixZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDekIsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBBanYgZnJvbSAnYWp2JztcbmltcG9ydCB7YXNzZXJ0fSBmcm9tICdjaGFpJztcblxuaW1wb3J0IHtjb21waWxlfSBmcm9tICcuLi9zcmMvY29tcGlsZS9jb21waWxlJztcbmltcG9ydCB7VG9wTGV2ZWxFeHRlbmRlZFNwZWN9IGZyb20gJy4uL3NyYy9zcGVjJztcblxuY29uc3QgaW5zcGVjdCA9IHJlcXVpcmUoJ3V0aWwnKS5pbnNwZWN0O1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcblxuY29uc3QgdmxTY2hlbWEgPSByZXF1aXJlKCcuLi8uLi9idWlsZC92ZWdhLWxpdGUtc2NoZW1hLmpzb24nKTtcbmNvbnN0IHZnU2NoZW1hID0gcmVxdWlyZSgndmVnYS9idWlsZC92ZWdhLXNjaGVtYS5qc29uJyk7XG5cbmNvbnN0IGFqdiA9IG5ldyBBanYoe1xuICB2YWxpZGF0ZVNjaGVtYTogdHJ1ZSxcbiAgYWxsRXJyb3JzOiB0cnVlLFxuICBleHRlbmRSZWZzOiAnZmFpbCcsXG4gIHNjaGVtYUlkOiAnYXV0bycgIC8vIGZvciBkcmFmdCAwNCBhbmQgMDYgc2NoZW1hc1xufSk7XG5cbmFqdi5hZGRNZXRhU2NoZW1hKHJlcXVpcmUoJ2Fqdi9saWIvcmVmcy9qc29uLXNjaGVtYS1kcmFmdC0wNi5qc29uJykpO1xuYWp2LmFkZE1ldGFTY2hlbWEocmVxdWlyZSgnYWp2L2xpYi9yZWZzL2pzb24tc2NoZW1hLWRyYWZ0LTA0Lmpzb24nKSk7ICAvLyBmb3IgVmVnYVxuXG5jb25zdCB2YWxpZGF0ZVZsID0gYWp2LmNvbXBpbGUodmxTY2hlbWEpO1xuY29uc3QgdmFsaWRhdGVWZyA9IGFqdi5jb21waWxlKHZnU2NoZW1hKTtcblxuZnVuY3Rpb24gdmFsaWRhdGVWTChzcGVjOiBUb3BMZXZlbEV4dGVuZGVkU3BlYykge1xuICBjb25zdCB2YWxpZCA9IHZhbGlkYXRlVmwoc3BlYyk7XG4gIGNvbnN0IGVycm9ycyA9IHZhbGlkYXRlVmwuZXJyb3JzO1xuICBpZiAoIXZhbGlkKSB7XG4gICAgY29uc29sZS5sb2coaW5zcGVjdChlcnJvcnMsIHtkZXB0aDogMTAsIGNvbG9yczogdHJ1ZX0pKTtcbiAgfVxuICBhc3NlcnQodmFsaWQsIGVycm9ycyAmJiBlcnJvcnMubWFwKChlcnI6IEFqdi5FcnJvck9iamVjdCkgPT4gZXJyLm1lc3NhZ2UpLmpvaW4oJywgJykpO1xuXG4gIGFzc2VydC5lcXVhbChzcGVjLiRzY2hlbWEuc3Vic3RyKDAsIDQyKSwgJ2h0dHBzOi8vdmVnYS5naXRodWIuaW8vc2NoZW1hL3ZlZ2EtbGl0ZS92MicpO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZVZlZ2Eoc3BlYzogVG9wTGV2ZWxFeHRlbmRlZFNwZWMpIHtcbiAgY29uc3QgdmVnYVNwZWMgPSBjb21waWxlKHNwZWMpLnNwZWM7XG5cbiAgY29uc3QgdmFsaWQgPSB2YWxpZGF0ZVZnKHZlZ2FTcGVjKTtcbiAgY29uc3QgZXJyb3JzID0gdmFsaWRhdGVWZy5lcnJvcnM7XG4gIGlmICghdmFsaWQpIHtcbiAgICBjb25zb2xlLmxvZyhpbnNwZWN0KGVycm9ycywge2RlcHRoOiAxMCwgY29sb3JzOiB0cnVlfSkpO1xuICB9XG4gIGFzc2VydCh2YWxpZCwgZXJyb3JzICYmIGVycm9ycy5tYXAoKGVycjogQWp2LkVycm9yT2JqZWN0KSA9PiBlcnIubWVzc2FnZSkuam9pbignLCAnKSk7XG59XG5cbmNvbnN0IHN1ZmZpeExlbmd0aCA9ICdfZnV0dXJlLnZsLmpzb24nLmxlbmd0aDtcbmRlc2NyaWJlKCdFeGFtcGxlcycsIGZ1bmN0aW9uKCkge1xuICBjb25zdCBleGFtcGxlcyA9IGZzLnJlYWRkaXJTeW5jKCdleGFtcGxlcy9zcGVjcycpO1xuXG4gIGV4YW1wbGVzLmZvckVhY2goZnVuY3Rpb24oZXhhbXBsZTogc3RyaW5nKSB7XG4gICAgaWYgKHBhdGguZXh0bmFtZShleGFtcGxlKSAhPT0gJy5qc29uJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBqc29uU3BlYyA9IEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKCdleGFtcGxlcy9zcGVjcy8nICsgZXhhbXBsZSkpO1xuXG4gICAgZGVzY3JpYmUoZXhhbXBsZSwgZnVuY3Rpb24oKSB7XG4gICAgICBpdCgnc2hvdWxkIGJlIHZhbGlkIHZlZ2EtbGl0ZSB3aXRoIHByb3BlciAkc2NoZW1hJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAvLyBEbyBub3QgdmFsaWRhdGUgb3ZlcmxheSBleGFtcGxlIHVudGlsIHdlIGhhdmUgcmVkZXNpZ25lZCBpdFxuICAgICAgICAgIGV4YW1wbGUuaW5kZXhPZignb3ZlcmxheScpID49IDAgfHxcbiAgICAgICAgICAvLyBBbHNvIGlnbm9yZSBib3gtcGxvdCBleGFtcGxlcyB1bnRpbCB3ZSBzdXBwb3J0IHNlbGVjdGlvbnNcbiAgICAgICAgICBleGFtcGxlLmluZGV4T2YoJ2JveC1wbG90JykgPj0gMCB8fFxuICAgICAgICAgIC8vIEFsc28gaWdub3JlIGFsbCBleGFtcGxlcyB3aXRoIFwiX2Z1dHVyZVwiIHN1ZmZpeFxuICAgICAgICAgIGV4YW1wbGUubGFzdEluZGV4T2YoJ19mdXR1cmUudmwuanNvbicsIGV4YW1wbGUubGVuZ3RoIC0gc3VmZml4TGVuZ3RoKSA+PSAwXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhbGlkYXRlVkwoanNvblNwZWMpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgcHJvZHVjZSB2YWxpZCB2ZWdhJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhbGlkYXRlVmVnYShqc29uU3BlYyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdfQ==