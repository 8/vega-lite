"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Ajv = require("ajv");
var chai_1 = require("chai");
var compile_1 = require("../src/compile/compile");
var inspect = require('util').inspect;
var fs = require('fs');
var path = require('path');
var vlSchema = require('../../build/vega-lite-schema.json');
var vgSchema = require('vega/build/vega-schema.json');
var ajv = new Ajv({
    validateSchema: true,
    allErrors: true,
    extendRefs: 'fail',
    schemaId: 'id'
});
ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-04.json'), 'http://json-schema.org/draft-04/schema#');
var validateVl = ajv.compile(vlSchema);
var validateVg = ajv.compile(vgSchema);
function validateVL(spec) {
    var valid = validateVl(spec);
    var errors = validateVl.errors;
    if (!valid) {
        console.log(inspect(errors, { depth: 10, colors: true }));
    }
    chai_1.assert(valid, errors && errors.map(function (err) { return err.message; }).join(', '));
    chai_1.assert.equal(spec.$schema, 'https://vega.github.io/schema/vega-lite/v2.json');
}
function validateVega(spec) {
    var vegaSpec = compile_1.compile(spec).spec;
    var valid = validateVg(vegaSpec);
    var errors = validateVg.errors;
    if (!valid) {
        console.log(inspect(errors, { depth: 10, colors: true }));
    }
    chai_1.assert(valid, errors && errors.map(function (err) { return err.message; }).join(', '));
}
var suffixLength = '_future.vl.json'.length;
describe('Examples', function () {
    var examples = fs.readdirSync('examples/specs');
    examples.forEach(function (example) {
        if (path.extname(example) !== '.json') {
            return;
        }
        var jsonSpec = JSON.parse(fs.readFileSync('examples/specs/' + example));
        describe(example, function () {
            it('should be valid vega-lite with proper $schema', function () {
                if (
                // Do not validate overlay example until we have redesigned it
                example.indexOf('overlay') >= 0 ||
                    // Also ignore box-plot examples until we support selections
                    example.indexOf('box-plot') >= 0 ||
                    // Also ignore all examples with "_future" suffix
                    example.lastIndexOf('_future.vl.json', example.length - suffixLength) >= 0) {
                    return;
                }
                validateVL(jsonSpec);
            });
            it('should produce valid vega', function () {
                validateVega(jsonSpec);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhhbXBsZXMudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2V4YW1wbGVzL2V4YW1wbGVzLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5QkFBMkI7QUFDM0IsNkJBQTRCO0FBQzVCLGtEQUErQztBQUcvQyxJQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDO0FBQ3hDLElBQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN6QixJQUFNLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFFN0IsSUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7QUFDOUQsSUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLDZCQUE2QixDQUFDLENBQUM7QUFFeEQsSUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUM7SUFDbEIsY0FBYyxFQUFFLElBQUk7SUFDcEIsU0FBUyxFQUFFLElBQUk7SUFDZixVQUFVLEVBQUUsTUFBTTtJQUNsQixRQUFRLEVBQUUsSUFBSTtDQUNmLENBQUMsQ0FBQztBQUVILEdBQUcsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLHdDQUF3QyxDQUFDLEVBQUUseUNBQXlDLENBQUMsQ0FBQztBQUVoSCxJQUFNLFVBQVUsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3pDLElBQU0sVUFBVSxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFFekMsb0JBQW9CLElBQTBCO0lBQzVDLElBQU0sS0FBSyxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMvQixJQUFNLE1BQU0sR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDO0lBQ2pDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNYLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxFQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBQyxDQUFDLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBQ0QsYUFBTSxDQUFDLEtBQUssRUFBRSxNQUFNLElBQUksTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFDLEdBQW9CLElBQUssT0FBQSxHQUFHLENBQUMsT0FBTyxFQUFYLENBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBRXRGLGFBQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxpREFBaUQsQ0FBQyxDQUFDO0FBQ2hGLENBQUM7QUFFRCxzQkFBc0IsSUFBMEI7SUFDOUMsSUFBTSxRQUFRLEdBQUcsaUJBQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFFcEMsSUFBTSxLQUFLLEdBQUcsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ25DLElBQU0sTUFBTSxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUM7SUFDakMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ1gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEVBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFDRCxhQUFNLENBQUMsS0FBSyxFQUFFLE1BQU0sSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLFVBQUMsR0FBb0IsSUFBSyxPQUFBLEdBQUcsQ0FBQyxPQUFPLEVBQVgsQ0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDeEYsQ0FBQztBQUVELElBQU0sWUFBWSxHQUFHLGlCQUFpQixDQUFDLE1BQU0sQ0FBQztBQUM5QyxRQUFRLENBQUMsVUFBVSxFQUFFO0lBQ25CLElBQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUVsRCxRQUFRLENBQUMsT0FBTyxDQUFDLFVBQVMsT0FBZTtRQUN2QyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDdEMsTUFBTSxDQUFDO1FBQ1QsQ0FBQztRQUNELElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBRTFFLFFBQVEsQ0FBQyxPQUFPLEVBQUU7WUFDaEIsRUFBRSxDQUFDLCtDQUErQyxFQUFFO2dCQUNsRCxFQUFFLENBQUMsQ0FBQztnQkFDRiw4REFBOEQ7Z0JBQzlELE9BQU8sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQztvQkFDL0IsNERBQTREO29CQUM1RCxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7b0JBQ2hDLGlEQUFpRDtvQkFDakQsT0FBTyxDQUFDLFdBQVcsQ0FBQyxpQkFBaUIsRUFBRSxPQUFPLENBQUMsTUFBTSxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQ3pFLENBQUMsQ0FBQyxDQUFDO29CQUNILE1BQU0sQ0FBQztnQkFDVCxDQUFDO2dCQUNELFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN2QixDQUFDLENBQUMsQ0FBQztZQUVILEVBQUUsQ0FBQywyQkFBMkIsRUFBRTtnQkFDOUIsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3pCLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgQWp2IGZyb20gJ2Fqdic7XG5pbXBvcnQge2Fzc2VydH0gZnJvbSAnY2hhaSc7XG5pbXBvcnQge2NvbXBpbGV9IGZyb20gJy4uL3NyYy9jb21waWxlL2NvbXBpbGUnO1xuaW1wb3J0IHtUb3BMZXZlbEV4dGVuZGVkU3BlY30gZnJvbSAnLi4vc3JjL3NwZWMnO1xuXG5jb25zdCBpbnNwZWN0ID0gcmVxdWlyZSgndXRpbCcpLmluc3BlY3Q7XG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuXG5jb25zdCB2bFNjaGVtYSA9IHJlcXVpcmUoJy4uLy4uL2J1aWxkL3ZlZ2EtbGl0ZS1zY2hlbWEuanNvbicpO1xuY29uc3QgdmdTY2hlbWEgPSByZXF1aXJlKCd2ZWdhL2J1aWxkL3ZlZ2Etc2NoZW1hLmpzb24nKTtcblxuY29uc3QgYWp2ID0gbmV3IEFqdih7XG4gIHZhbGlkYXRlU2NoZW1hOiB0cnVlLFxuICBhbGxFcnJvcnM6IHRydWUsXG4gIGV4dGVuZFJlZnM6ICdmYWlsJyxcbiAgc2NoZW1hSWQ6ICdpZCdcbn0pO1xuXG5hanYuYWRkTWV0YVNjaGVtYShyZXF1aXJlKCdhanYvbGliL3JlZnMvanNvbi1zY2hlbWEtZHJhZnQtMDQuanNvbicpLCAnaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNC9zY2hlbWEjJyk7XG5cbmNvbnN0IHZhbGlkYXRlVmwgPSBhanYuY29tcGlsZSh2bFNjaGVtYSk7XG5jb25zdCB2YWxpZGF0ZVZnID0gYWp2LmNvbXBpbGUodmdTY2hlbWEpO1xuXG5mdW5jdGlvbiB2YWxpZGF0ZVZMKHNwZWM6IFRvcExldmVsRXh0ZW5kZWRTcGVjKSB7XG4gIGNvbnN0IHZhbGlkID0gdmFsaWRhdGVWbChzcGVjKTtcbiAgY29uc3QgZXJyb3JzID0gdmFsaWRhdGVWbC5lcnJvcnM7XG4gIGlmICghdmFsaWQpIHtcbiAgICBjb25zb2xlLmxvZyhpbnNwZWN0KGVycm9ycywge2RlcHRoOiAxMCwgY29sb3JzOiB0cnVlfSkpO1xuICB9XG4gIGFzc2VydCh2YWxpZCwgZXJyb3JzICYmIGVycm9ycy5tYXAoKGVycjogQWp2LkVycm9yT2JqZWN0KSA9PiBlcnIubWVzc2FnZSkuam9pbignLCAnKSk7XG5cbiAgYXNzZXJ0LmVxdWFsKHNwZWMuJHNjaGVtYSwgJ2h0dHBzOi8vdmVnYS5naXRodWIuaW8vc2NoZW1hL3ZlZ2EtbGl0ZS92Mi5qc29uJyk7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlVmVnYShzcGVjOiBUb3BMZXZlbEV4dGVuZGVkU3BlYykge1xuICBjb25zdCB2ZWdhU3BlYyA9IGNvbXBpbGUoc3BlYykuc3BlYztcblxuICBjb25zdCB2YWxpZCA9IHZhbGlkYXRlVmcodmVnYVNwZWMpO1xuICBjb25zdCBlcnJvcnMgPSB2YWxpZGF0ZVZnLmVycm9ycztcbiAgaWYgKCF2YWxpZCkge1xuICAgIGNvbnNvbGUubG9nKGluc3BlY3QoZXJyb3JzLCB7ZGVwdGg6IDEwLCBjb2xvcnM6IHRydWV9KSk7XG4gIH1cbiAgYXNzZXJ0KHZhbGlkLCBlcnJvcnMgJiYgZXJyb3JzLm1hcCgoZXJyOiBBanYuRXJyb3JPYmplY3QpID0+IGVyci5tZXNzYWdlKS5qb2luKCcsICcpKTtcbn1cblxuY29uc3Qgc3VmZml4TGVuZ3RoID0gJ19mdXR1cmUudmwuanNvbicubGVuZ3RoO1xuZGVzY3JpYmUoJ0V4YW1wbGVzJywgZnVuY3Rpb24oKSB7XG4gIGNvbnN0IGV4YW1wbGVzID0gZnMucmVhZGRpclN5bmMoJ2V4YW1wbGVzL3NwZWNzJyk7XG5cbiAgZXhhbXBsZXMuZm9yRWFjaChmdW5jdGlvbihleGFtcGxlOiBzdHJpbmcpIHtcbiAgICBpZiAocGF0aC5leHRuYW1lKGV4YW1wbGUpICE9PSAnLmpzb24nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGpzb25TcGVjID0gSlNPTi5wYXJzZShmcy5yZWFkRmlsZVN5bmMoJ2V4YW1wbGVzL3NwZWNzLycgKyBleGFtcGxlKSk7XG5cbiAgICBkZXNjcmliZShleGFtcGxlLCBmdW5jdGlvbigpIHtcbiAgICAgIGl0KCdzaG91bGQgYmUgdmFsaWQgdmVnYS1saXRlIHdpdGggcHJvcGVyICRzY2hlbWEnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIC8vIERvIG5vdCB2YWxpZGF0ZSBvdmVybGF5IGV4YW1wbGUgdW50aWwgd2UgaGF2ZSByZWRlc2lnbmVkIGl0XG4gICAgICAgICAgZXhhbXBsZS5pbmRleE9mKCdvdmVybGF5JykgPj0gMCB8fFxuICAgICAgICAgIC8vIEFsc28gaWdub3JlIGJveC1wbG90IGV4YW1wbGVzIHVudGlsIHdlIHN1cHBvcnQgc2VsZWN0aW9uc1xuICAgICAgICAgIGV4YW1wbGUuaW5kZXhPZignYm94LXBsb3QnKSA+PSAwIHx8XG4gICAgICAgICAgLy8gQWxzbyBpZ25vcmUgYWxsIGV4YW1wbGVzIHdpdGggXCJfZnV0dXJlXCIgc3VmZml4XG4gICAgICAgICAgZXhhbXBsZS5sYXN0SW5kZXhPZignX2Z1dHVyZS52bC5qc29uJywgZXhhbXBsZS5sZW5ndGggLSBzdWZmaXhMZW5ndGgpID49IDBcbiAgICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFsaWRhdGVWTChqc29uU3BlYyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBwcm9kdWNlIHZhbGlkIHZlZ2EnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFsaWRhdGVWZWdhKGpzb25TcGVjKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl19