import * as tslib_1 from "tslib";
import * as log from '../log';
import { isMarkDef } from '../mark';
import { keys } from '../util';
import { partLayerMixins } from './common';
export var CALLOUT = 'callout';
var CALLOUT_PART_INDEX = {
    line: 1,
    label: 1
};
export var CALLOUT_PARTS = keys(CALLOUT_PART_INDEX);
export var DEFAULT_CALLOUT_CONFIG = {
    angle: -45,
    lineOffset: 0,
    lineLength: 30,
    labelOffset: 2,
    label: {
        align: 'left',
        baseline: 'middle'
    },
    line: {}
};
export function normalizeCallout(spec, config) {
    // TODO:  determine what's the general rule for applying selection for composite marks
    var mark = spec.mark, _sel = spec.selection, _p = spec.projection, encoding = spec.encoding, outerSpec = tslib_1.__rest(spec, ["mark", "selection", "projection", "encoding"]);
    var markDef = tslib_1.__assign({}, config.callout, isMarkDef(mark) ? mark : { type: mark });
    var angle = markDef.angle, lineOffset = markDef.lineOffset, lineLength = markDef.lineLength, labelOffset = markDef.labelOffset;
    var calloutOffsetCoor1 = getCoordinateFromAngleAndLength(angle, lineOffset);
    var calloutOffsetCoor2 = getCoordinateFromAngleAndLength(angle, lineOffset + lineLength);
    var labelTotalOffsetCoor = getCoordinateFromAngleAndLength(angle, lineOffset + lineLength + labelOffset);
    var text = encoding.text, size = encoding.size, encodingWithoutTextAndSize = tslib_1.__rest(encoding, ["text", "size"]);
    if (!text) {
        log.warn('callout mark should have text encoding');
    }
    return tslib_1.__assign({}, outerSpec, { layer: partLayerMixins(markDef, 'line', config.callout, {
            mark: {
                type: 'rule',
                xOffset: calloutOffsetCoor1.x,
                yOffset: calloutOffsetCoor1.y,
                x2Offset: calloutOffsetCoor2.x,
                y2Offset: calloutOffsetCoor2.y
            },
            encoding: tslib_1.__assign({ x2: encoding.x, y2: encoding.y }, encodingWithoutTextAndSize)
        }).concat(partLayerMixins(markDef, 'label', config.callout, {
            mark: {
                type: 'text',
                xOffset: labelTotalOffsetCoor.x,
                yOffset: labelTotalOffsetCoor.y,
            },
            encoding: encoding
        })) });
}
function getCoordinateFromAngleAndLength(angle, length) {
    var radian = angle * Math.PI / 180;
    return { x: length * Math.cos(radian), y: length * Math.sin(radian) };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsbG91dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb3NpdGVtYXJrL2NhbGxvdXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUVBLE9BQU8sS0FBSyxHQUFHLE1BQU0sUUFBUSxDQUFDO0FBQzlCLE9BQU8sRUFBaUIsU0FBUyxFQUFhLE1BQU0sU0FBUyxDQUFDO0FBRTlELE9BQU8sRUFBTyxJQUFJLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFDbkMsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUV6QyxNQUFNLENBQUMsSUFBTSxPQUFPLEdBQWMsU0FBUyxDQUFDO0FBSzVDLElBQU0sa0JBQWtCLEdBQXNCO0lBQzVDLElBQUksRUFBRSxDQUFDO0lBQ1AsS0FBSyxFQUFFLENBQUM7Q0FDVCxDQUFDO0FBRUYsTUFBTSxDQUFDLElBQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBa0N0RCxNQUFNLENBQUMsSUFBTSxzQkFBc0IsR0FBa0I7SUFDbkQsS0FBSyxFQUFFLENBQUMsRUFBRTtJQUNWLFVBQVUsRUFBRSxDQUFDO0lBQ2IsVUFBVSxFQUFFLEVBQUU7SUFDZCxXQUFXLEVBQUUsQ0FBQztJQUNkLEtBQUssRUFBRTtRQUNMLEtBQUssRUFBRSxNQUFNO1FBQ2IsUUFBUSxFQUFFLFFBQVE7S0FDbkI7SUFDRCxJQUFJLEVBQUUsRUFBRTtDQUNULENBQUM7QUFXRixNQUFNLDJCQUEyQixJQUE2RCxFQUFFLE1BQWM7SUFDNUcsc0ZBQXNGO0lBQy9FLElBQUEsZ0JBQUksRUFBRSxxQkFBZSxFQUFFLG9CQUFjLEVBQUUsd0JBQVEsRUFBRSxpRkFBWSxDQUFTO0lBQzdFLElBQU0sT0FBTyx3QkFDUixNQUFNLENBQUMsT0FBTyxFQUNkLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksRUFBRSxJQUFJLEVBQUMsQ0FDekMsQ0FBQztJQUVLLElBQUEscUJBQUssRUFBRSwrQkFBVSxFQUFFLCtCQUFVLEVBQUUsaUNBQVcsQ0FBWTtJQUU3RCxJQUFNLGtCQUFrQixHQUFHLCtCQUErQixDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztJQUM5RSxJQUFNLGtCQUFrQixHQUFHLCtCQUErQixDQUFDLEtBQUssRUFBRSxVQUFVLEdBQUcsVUFBVSxDQUFDLENBQUM7SUFDM0YsSUFBTSxvQkFBb0IsR0FBRywrQkFBK0IsQ0FBQyxLQUFLLEVBQUUsVUFBVSxHQUFHLFVBQVUsR0FBRyxXQUFXLENBQUMsQ0FBQztJQUVwRyxJQUFBLG9CQUFJLEVBQUUsb0JBQUksRUFBRSx1RUFBNkIsQ0FBYTtJQUM3RCxJQUFJLENBQUMsSUFBSSxFQUFFO1FBQ1QsR0FBRyxDQUFDLElBQUksQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO0tBQ3BEO0lBRUQsNEJBQ0ssU0FBUyxJQUNaLEtBQUssRUFDQSxlQUFlLENBQ2hCLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLE9BQU8sRUFDL0I7WUFDRSxJQUFJLEVBQUU7Z0JBQ0osSUFBSSxFQUFFLE1BQU07Z0JBQ1osT0FBTyxFQUFFLGtCQUFrQixDQUFDLENBQUM7Z0JBQzdCLE9BQU8sRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO2dCQUM3QixRQUFRLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztnQkFDOUIsUUFBUSxFQUFFLGtCQUFrQixDQUFDLENBQUM7YUFDL0I7WUFDRCxRQUFRLHFCQUNOLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQyxFQUNkLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQyxJQUNYLDBCQUEwQixDQUM5QjtTQUNGLENBQ0YsUUFDRSxlQUFlLENBQ2hCLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLE9BQU8sRUFDaEM7WUFDRSxJQUFJLEVBQUU7Z0JBQ0osSUFBSSxFQUFFLE1BQU07Z0JBQ1osT0FBTyxFQUFFLG9CQUFvQixDQUFDLENBQUM7Z0JBQy9CLE9BQU8sRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO2FBQ2hDO1lBQ0QsUUFBUSxVQUFBO1NBQ1QsQ0FDRixLQUVIO0FBQ0osQ0FBQztBQUVELHlDQUF5QyxLQUFhLEVBQUUsTUFBYztJQUNwRSxJQUFNLE1BQU0sR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUM7SUFDckMsT0FBTyxFQUFDLENBQUMsRUFBRSxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUMsQ0FBQztBQUN0RSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb25maWd9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQge0VuY29kaW5nfSBmcm9tICcuLi9lbmNvZGluZyc7XG5pbXBvcnQgKiBhcyBsb2cgZnJvbSAnLi4vbG9nJztcbmltcG9ydCB7R2VuZXJpY01hcmtEZWYsIGlzTWFya0RlZiwgTWFya0NvbmZpZ30gZnJvbSAnLi4vbWFyayc7XG5pbXBvcnQge0dlbmVyaWNVbml0U3BlYywgTm9ybWFsaXplZExheWVyU3BlY30gZnJvbSAnLi4vc3BlYyc7XG5pbXBvcnQge0ZsYWcsIGtleXN9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IHtwYXJ0TGF5ZXJNaXhpbnN9IGZyb20gJy4vY29tbW9uJztcblxuZXhwb3J0IGNvbnN0IENBTExPVVQ6ICdjYWxsb3V0JyA9ICdjYWxsb3V0JztcbmV4cG9ydCB0eXBlIENhbGxvdXQgPSB0eXBlb2YgQ0FMTE9VVDtcblxuZXhwb3J0IHR5cGUgQ2FsbG91dFBhcnQgPSAnbGluZScgfCAnbGFiZWwnO1xuXG5jb25zdCBDQUxMT1VUX1BBUlRfSU5ERVg6IEZsYWc8Q2FsbG91dFBhcnQ+ID0ge1xuICBsaW5lOiAxLFxuICBsYWJlbDogMVxufTtcblxuZXhwb3J0IGNvbnN0IENBTExPVVRfUEFSVFMgPSBrZXlzKENBTExPVVRfUEFSVF9JTkRFWCk7XG5cbi8vIFRPRE86IEN1cnJlbnRseSBjYW4ndCB1c2UgYFBhcnRzTWl4aW5zPENhbGxvdXRQYXJ0PmBcbi8vIGFzIHRoZSBzY2hlbWEgZ2VuZXJhdG9yIHdpbGwgZmFpbFxuZXhwb3J0IHR5cGUgQ2FsbG91dFBhcnRzTWlueGlucyA9IHtcbiAgW3BhcnQgaW4gQ2FsbG91dFBhcnRdPzogTWFya0NvbmZpZ1xufTtcblxuZXhwb3J0IGludGVyZmFjZSBDYWxsb3V0Q29uZmlnIGV4dGVuZHMgQ2FsbG91dFBhcnRzTWlueGlucyB7XG4gIC8qKlxuICAgKiBBbmdsZSBvZiBjYWxsb3V0IGxpbmUuXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBgNDVgXG4gICAqL1xuICBhbmdsZT86IG51bWJlcjtcblxuICAvKipcbiAgICogT2Zmc2V0IGRpc3RhbmNlIGJldHdlZW4gdGhlIGRhdGEgcG9pbnQgYW5kIHRoZSBjYWxsb3V0IGxpbmUuXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBgMGBcbiAgICovXG4gIGxpbmVPZmZzZXQ/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIExlbmd0aCBvZiBjYWxsb3V0IGxpbmUuXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBgMzBgXG4gICAqL1xuICBsaW5lTGVuZ3RoPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBPZmZzZXQgZGlzdGFuY2UgYmV0d2VlbiBjYWxsb3V0IGxpbmUgYW5kIGxhYmVsXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBgMmBcbiAgICovXG4gIGxhYmVsT2Zmc2V0PzogbnVtYmVyO1xufVxuXG5leHBvcnQgY29uc3QgREVGQVVMVF9DQUxMT1VUX0NPTkZJRzogQ2FsbG91dENvbmZpZyA9IHtcbiAgYW5nbGU6IC00NSxcbiAgbGluZU9mZnNldDogMCxcbiAgbGluZUxlbmd0aDogMzAsXG4gIGxhYmVsT2Zmc2V0OiAyLFxuICBsYWJlbDoge1xuICAgIGFsaWduOiAnbGVmdCcsXG4gICAgYmFzZWxpbmU6ICdtaWRkbGUnXG4gIH0sXG4gIGxpbmU6IHt9XG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIENhbGxvdXREZWYgZXh0ZW5kcyBHZW5lcmljTWFya0RlZjxDYWxsb3V0PiwgQ2FsbG91dENvbmZpZyB7fVxuXG5leHBvcnQgaW50ZXJmYWNlIENhbGxvdXRDb25maWdNaXhpbnMge1xuICAvKipcbiAgICogQ2FsbG91dCBSdWxlIENvbmZpZ1xuICAgKi9cbiAgY2FsbG91dD86IENhbGxvdXRDb25maWc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVDYWxsb3V0KHNwZWM6IEdlbmVyaWNVbml0U3BlYzxFbmNvZGluZzxzdHJpbmc+LCBDYWxsb3V0IHwgQ2FsbG91dERlZj4sIGNvbmZpZzogQ29uZmlnKTogTm9ybWFsaXplZExheWVyU3BlYyB7XG4gIC8vIFRPRE86ICBkZXRlcm1pbmUgd2hhdCdzIHRoZSBnZW5lcmFsIHJ1bGUgZm9yIGFwcGx5aW5nIHNlbGVjdGlvbiBmb3IgY29tcG9zaXRlIG1hcmtzXG4gIGNvbnN0IHttYXJrLCBzZWxlY3Rpb246IF9zZWwsIHByb2plY3Rpb246IF9wLCBlbmNvZGluZywgLi4ub3V0ZXJTcGVjfSA9IHNwZWM7XG4gIGNvbnN0IG1hcmtEZWYgPSB7XG4gICAgLi4uY29uZmlnLmNhbGxvdXQsXG4gICAgLi4uaXNNYXJrRGVmKG1hcmspID8gbWFyayA6IHt0eXBlOiBtYXJrfVxuICB9O1xuXG4gIGNvbnN0IHthbmdsZSwgbGluZU9mZnNldCwgbGluZUxlbmd0aCwgbGFiZWxPZmZzZXR9ID0gbWFya0RlZjtcblxuICBjb25zdCBjYWxsb3V0T2Zmc2V0Q29vcjEgPSBnZXRDb29yZGluYXRlRnJvbUFuZ2xlQW5kTGVuZ3RoKGFuZ2xlLCBsaW5lT2Zmc2V0KTtcbiAgY29uc3QgY2FsbG91dE9mZnNldENvb3IyID0gZ2V0Q29vcmRpbmF0ZUZyb21BbmdsZUFuZExlbmd0aChhbmdsZSwgbGluZU9mZnNldCArIGxpbmVMZW5ndGgpO1xuICBjb25zdCBsYWJlbFRvdGFsT2Zmc2V0Q29vciA9IGdldENvb3JkaW5hdGVGcm9tQW5nbGVBbmRMZW5ndGgoYW5nbGUsIGxpbmVPZmZzZXQgKyBsaW5lTGVuZ3RoICsgbGFiZWxPZmZzZXQpO1xuXG4gIGNvbnN0IHt0ZXh0LCBzaXplLCAuLi5lbmNvZGluZ1dpdGhvdXRUZXh0QW5kU2l6ZX0gPSBlbmNvZGluZztcbiAgaWYgKCF0ZXh0KSB7XG4gICAgbG9nLndhcm4oJ2NhbGxvdXQgbWFyayBzaG91bGQgaGF2ZSB0ZXh0IGVuY29kaW5nJyk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIC4uLm91dGVyU3BlYyxcbiAgICBsYXllcjogW1xuICAgICAgLi4ucGFydExheWVyTWl4aW5zPENhbGxvdXRQYXJ0c01pbnhpbnM+KFxuICAgICAgICBtYXJrRGVmLCAnbGluZScsIGNvbmZpZy5jYWxsb3V0LFxuICAgICAgICB7IC8vIGNhbGxvdXRcbiAgICAgICAgICBtYXJrOiB7XG4gICAgICAgICAgICB0eXBlOiAncnVsZScsXG4gICAgICAgICAgICB4T2Zmc2V0OiBjYWxsb3V0T2Zmc2V0Q29vcjEueCxcbiAgICAgICAgICAgIHlPZmZzZXQ6IGNhbGxvdXRPZmZzZXRDb29yMS55LFxuICAgICAgICAgICAgeDJPZmZzZXQ6IGNhbGxvdXRPZmZzZXRDb29yMi54LFxuICAgICAgICAgICAgeTJPZmZzZXQ6IGNhbGxvdXRPZmZzZXRDb29yMi55XG4gICAgICAgICAgfSxcbiAgICAgICAgICBlbmNvZGluZzoge1xuICAgICAgICAgICAgeDI6IGVuY29kaW5nLngsXG4gICAgICAgICAgICB5MjogZW5jb2RpbmcueSxcbiAgICAgICAgICAgIC4uLmVuY29kaW5nV2l0aG91dFRleHRBbmRTaXplXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApLFxuICAgICAgLi4ucGFydExheWVyTWl4aW5zPENhbGxvdXRQYXJ0c01pbnhpbnM+KFxuICAgICAgICBtYXJrRGVmLCAnbGFiZWwnLCBjb25maWcuY2FsbG91dCxcbiAgICAgICAgeyAvLyBsYWJlbFxuICAgICAgICAgIG1hcms6IHtcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIHhPZmZzZXQ6IGxhYmVsVG90YWxPZmZzZXRDb29yLngsXG4gICAgICAgICAgICB5T2Zmc2V0OiBsYWJlbFRvdGFsT2Zmc2V0Q29vci55LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgZW5jb2RpbmdcbiAgICAgICAgfVxuICAgICAgKVxuICAgIF1cbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0Q29vcmRpbmF0ZUZyb21BbmdsZUFuZExlbmd0aChhbmdsZTogbnVtYmVyLCBsZW5ndGg6IG51bWJlcik6IHt4OiBudW1iZXIsIHk6IG51bWJlcn0ge1xuICBjb25zdCByYWRpYW4gPSBhbmdsZSAqIE1hdGguUEkgLyAxODA7XG4gIHJldHVybiB7eDogbGVuZ3RoICogTWF0aC5jb3MocmFkaWFuKSwgeTogbGVuZ3RoICogTWF0aC5zaW4ocmFkaWFuKX07XG59XG4iXX0=