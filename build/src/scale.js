import * as tslib_1 from "tslib";
import { toSet } from 'vega-util';
import { Channel, CHANNELS, isColorChannel } from './channel';
import * as log from './log';
import { Type, TYPE_INDEX } from './type';
import { contains, flagKeys, keys } from './util';
export var ScaleType;
(function (ScaleType) {
    // Continuous - Quantitative
    ScaleType.LINEAR = 'linear';
    ScaleType.BIN_LINEAR = 'bin-linear';
    ScaleType.LOG = 'log';
    ScaleType.POW = 'pow';
    ScaleType.SQRT = 'sqrt';
    // Continuous - Time
    ScaleType.TIME = 'time';
    ScaleType.UTC = 'utc';
    // sequential
    ScaleType.SEQUENTIAL = 'sequential';
    // Quantile, Quantize, threshold
    ScaleType.QUANTILE = 'quantile';
    ScaleType.QUANTIZE = 'quantize';
    ScaleType.THRESHOLD = 'threshold';
    ScaleType.ORDINAL = 'ordinal';
    ScaleType.BIN_ORDINAL = 'bin-ordinal';
    ScaleType.POINT = 'point';
    ScaleType.BAND = 'band';
})(ScaleType || (ScaleType = {}));
/**
 * Index for scale categories -- only scale of the same categories can be merged together.
 * Current implementation is trying to be conservative and avoid merging scale type that might not work together
 */
var SCALE_CATEGORY_INDEX = {
    linear: 'numeric',
    log: 'numeric',
    pow: 'numeric',
    sqrt: 'numeric',
    'bin-linear': 'bin-linear',
    time: 'time',
    utc: 'time',
    sequential: 'sequential',
    ordinal: 'ordinal',
    'bin-ordinal': 'bin-ordinal',
    point: 'ordinal-position',
    band: 'ordinal-position'
};
export var SCALE_TYPES = keys(SCALE_CATEGORY_INDEX);
/**
 * Whether the two given scale types can be merged together.
 */
export function scaleCompatible(scaleType1, scaleType2) {
    var scaleCategory1 = SCALE_CATEGORY_INDEX[scaleType1];
    var scaleCategory2 = SCALE_CATEGORY_INDEX[scaleType2];
    return scaleCategory1 === scaleCategory2 ||
        (scaleCategory1 === 'ordinal-position' && scaleCategory2 === 'time') ||
        (scaleCategory2 === 'ordinal-position' && scaleCategory1 === 'time');
}
/**
 * Index for scale precedence -- high score = higher priority for merging.
 */
var SCALE_PRECEDENCE_INDEX = {
    // numeric
    linear: 0,
    log: 1,
    pow: 1,
    sqrt: 1,
    // time
    time: 0,
    utc: 0,
    // ordinal-position -- these have higher precedence than continuous scales as they support more types of data
    point: 10,
    band: 11,
    // non grouped types
    'bin-linear': 0,
    sequential: 0,
    ordinal: 0,
    'bin-ordinal': 0,
};
/**
 * Return scale categories -- only scale of the same categories can be merged together.
 */
export function scaleTypePrecedence(scaleType) {
    return SCALE_PRECEDENCE_INDEX[scaleType];
}
export var CONTINUOUS_TO_CONTINUOUS_SCALES = ['linear', 'bin-linear', 'log', 'pow', 'sqrt', 'time', 'utc'];
var CONTINUOUS_TO_CONTINUOUS_INDEX = toSet(CONTINUOUS_TO_CONTINUOUS_SCALES);
export var CONTINUOUS_DOMAIN_SCALES = CONTINUOUS_TO_CONTINUOUS_SCALES.concat(['sequential' /* TODO add 'quantile', 'quantize', 'threshold'*/]);
var CONTINUOUS_DOMAIN_INDEX = toSet(CONTINUOUS_DOMAIN_SCALES);
export var DISCRETE_DOMAIN_SCALES = ['ordinal', 'bin-ordinal', 'point', 'band'];
var DISCRETE_DOMAIN_INDEX = toSet(DISCRETE_DOMAIN_SCALES);
var BIN_SCALES_INDEX = toSet(['bin-linear', 'bin-ordinal']);
export var TIME_SCALE_TYPES = ['time', 'utc'];
export function hasDiscreteDomain(type) {
    return type in DISCRETE_DOMAIN_INDEX;
}
export function isBinScale(type) {
    return type in BIN_SCALES_INDEX;
}
export function hasContinuousDomain(type) {
    return type in CONTINUOUS_DOMAIN_INDEX;
}
export function isContinuousToContinuous(type) {
    return type in CONTINUOUS_TO_CONTINUOUS_INDEX;
}
export var defaultScaleConfig = {
    textXRangeStep: 90,
    rangeStep: 21,
    pointPadding: 0.5,
    bandPaddingInner: 0.1,
    facetSpacing: 16,
    minBandSize: 2,
    minFontSize: 8,
    maxFontSize: 40,
    minOpacity: 0.3,
    maxOpacity: 0.8,
    // FIXME: revise if these *can* become ratios of rangeStep
    minSize: 9,
    minStrokeWidth: 1,
    maxStrokeWidth: 4
};
export function isExtendedScheme(scheme) {
    return scheme && !!scheme['name'];
}
export function isSelectionDomain(domain) {
    return domain && domain['selection'];
}
var SCALE_PROPERTY_INDEX = {
    type: 1,
    domain: 1,
    range: 1,
    rangeStep: 1,
    scheme: 1,
    // Other properties
    reverse: 1,
    round: 1,
    // quantitative / time
    clamp: 1,
    nice: 1,
    // quantitative
    base: 1,
    exponent: 1,
    interpolate: 1,
    zero: 1,
    // band/point
    padding: 1,
    paddingInner: 1,
    paddingOuter: 1
};
export var SCALE_PROPERTIES = flagKeys(SCALE_PROPERTY_INDEX);
var type = SCALE_PROPERTY_INDEX.type, domain = SCALE_PROPERTY_INDEX.domain, range = SCALE_PROPERTY_INDEX.range, rangeStep = SCALE_PROPERTY_INDEX.rangeStep, scheme = SCALE_PROPERTY_INDEX.scheme, NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTY_INDEX = tslib_1.__rest(SCALE_PROPERTY_INDEX, ["type", "domain", "range", "rangeStep", "scheme"]);
export var NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES = flagKeys(NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTY_INDEX);
export var SCALE_TYPE_INDEX = generateScaleTypeIndex();
export function scaleTypeSupportProperty(scaleType, propName) {
    switch (propName) {
        case 'type':
        case 'domain':
        case 'reverse':
        case 'range':
            return true;
        case 'scheme':
            return contains(['sequential', 'ordinal', 'bin-ordinal', 'quantile', 'quantize'], scaleType);
        case 'interpolate':
            // FIXME(https://github.com/vega/vega-lite/issues/2902) how about ordinal?
            return contains(['linear', 'bin-linear', 'pow', 'log', 'sqrt', 'utc', 'time'], scaleType);
        case 'round':
            return isContinuousToContinuous(scaleType) || scaleType === 'band' || scaleType === 'point';
        case 'padding':
            return isContinuousToContinuous(scaleType) || contains(['point', 'band'], scaleType);
        case 'paddingOuter':
        case 'rangeStep':
            return contains(['point', 'band'], scaleType);
        case 'paddingInner':
            return scaleType === 'band';
        case 'clamp':
            return isContinuousToContinuous(scaleType) || scaleType === 'sequential';
        case 'nice':
            return isContinuousToContinuous(scaleType) || scaleType === 'sequential' || scaleType === 'quantize';
        case 'exponent':
            return scaleType === 'pow';
        case 'base':
            return scaleType === 'log';
        case 'zero':
            return hasContinuousDomain(scaleType) && !contains([
                'log',
                'time', 'utc',
                'bin-linear',
                'threshold',
                'quantile' // quantile depends on distribution so zero does not matter
            ], scaleType);
    }
    /* istanbul ignore next: should never reach here*/
    throw new Error("Invalid scale property " + propName + ".");
}
/**
 * Returns undefined if the input channel supports the input scale property name
 */
export function channelScalePropertyIncompatability(channel, propName) {
    switch (propName) {
        case 'interpolate':
        case 'scheme':
            if (!isColorChannel(channel)) {
                return log.message.cannotUseScalePropertyWithNonColor(channel);
            }
            return undefined;
        case 'type':
        case 'domain':
        case 'range':
        case 'base':
        case 'exponent':
        case 'nice':
        case 'padding':
        case 'paddingInner':
        case 'paddingOuter':
        case 'rangeStep':
        case 'reverse':
        case 'round':
        case 'clamp':
        case 'zero':
            return undefined; // GOOD!
    }
    /* istanbul ignore next: it should never reach here */
    throw new Error("Invalid scale property \"" + propName + "\".");
}
export function scaleTypeSupportDataType(specifiedType, fieldDefType, bin) {
    if (contains([Type.ORDINAL, Type.NOMINAL], fieldDefType)) {
        return specifiedType === undefined || hasDiscreteDomain(specifiedType);
    }
    else if (fieldDefType === Type.TEMPORAL) {
        return contains([ScaleType.TIME, ScaleType.UTC, ScaleType.SEQUENTIAL, undefined], specifiedType);
    }
    else if (fieldDefType === Type.QUANTITATIVE) {
        if (bin) {
            return contains([ScaleType.BIN_LINEAR, ScaleType.BIN_ORDINAL, ScaleType.LINEAR], specifiedType);
        }
        return contains([ScaleType.LOG, ScaleType.POW, ScaleType.SQRT, ScaleType.QUANTILE, ScaleType.QUANTIZE, ScaleType.LINEAR, ScaleType.SEQUENTIAL, undefined], specifiedType);
    }
    return true;
}
export function channelSupportScaleType(channel, scaleType) {
    switch (channel) {
        case Channel.X:
        case Channel.Y:
        case Channel.SIZE: // TODO: size and opacity can support ordinal with more modification
        case Channel.OPACITY:
            // Although it generally doesn't make sense to use band with size and opacity,
            // it can also work since we use band: 0.5 to get midpoint.
            return isContinuousToContinuous(scaleType) || contains(['band', 'point'], scaleType);
        case Channel.COLOR:
        case Channel.FILL:
        case Channel.STROKE:
            return scaleType !== 'band'; // band does not make sense with color
        case Channel.SHAPE:
            return scaleType === 'ordinal'; // shape = lookup only
    }
    /* istanbul ignore next: it should never reach here */
    return false;
}
export function getSupportedScaleType(channel, fieldDefType, bin) {
    return SCALE_TYPE_INDEX[generateScaleTypeIndexKey(channel, fieldDefType, bin)];
}
// generates ScaleTypeIndex where keys are encoding channels and values are list of valid ScaleTypes
function generateScaleTypeIndex() {
    var index = {};
    for (var _i = 0, CHANNELS_1 = CHANNELS; _i < CHANNELS_1.length; _i++) {
        var channel = CHANNELS_1[_i];
        for (var _a = 0, _b = keys(TYPE_INDEX); _a < _b.length; _a++) {
            var fieldDefType = _b[_a];
            for (var _c = 0, SCALE_TYPES_1 = SCALE_TYPES; _c < SCALE_TYPES_1.length; _c++) {
                var scaleType = SCALE_TYPES_1[_c];
                for (var _d = 0, _e = [false, true]; _d < _e.length; _d++) {
                    var bin = _e[_d];
                    var key = generateScaleTypeIndexKey(channel, fieldDefType, bin);
                    if (channelSupportScaleType(channel, scaleType) && scaleTypeSupportDataType(scaleType, fieldDefType, bin)) {
                        index[key] = index[key] || [];
                        index[key].push(scaleType);
                    }
                }
            }
        }
    }
    return index;
}
function generateScaleTypeIndexKey(channel, fieldDefType, bin) {
    var key = channel + '_' + fieldDefType;
    return bin ? key + '_bin' : key;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NhbGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NhbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxLQUFLLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFFaEMsT0FBTyxFQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsY0FBYyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBRTVELE9BQU8sS0FBSyxHQUFHLE1BQU0sT0FBTyxDQUFDO0FBQzdCLE9BQU8sRUFBQyxJQUFJLEVBQUUsVUFBVSxFQUFDLE1BQU0sUUFBUSxDQUFDO0FBQ3hDLE9BQU8sRUFBQyxRQUFRLEVBQVEsUUFBUSxFQUFFLElBQUksRUFBQyxNQUFNLFFBQVEsQ0FBQztBQUd0RCxNQUFNLEtBQVcsU0FBUyxDQXNCekI7QUF0QkQsV0FBaUIsU0FBUztJQUN4Qiw0QkFBNEI7SUFDZixnQkFBTSxHQUFhLFFBQVEsQ0FBQztJQUM1QixvQkFBVSxHQUFpQixZQUFZLENBQUM7SUFDeEMsYUFBRyxHQUFVLEtBQUssQ0FBQztJQUNuQixhQUFHLEdBQVUsS0FBSyxDQUFDO0lBQ25CLGNBQUksR0FBVyxNQUFNLENBQUM7SUFDbkMsb0JBQW9CO0lBQ1AsY0FBSSxHQUFXLE1BQU0sQ0FBQztJQUN0QixhQUFHLEdBQVUsS0FBSyxDQUFDO0lBQ2hDLGFBQWE7SUFDQSxvQkFBVSxHQUFpQixZQUFZLENBQUM7SUFFckQsZ0NBQWdDO0lBQ25CLGtCQUFRLEdBQWUsVUFBVSxDQUFDO0lBQ2xDLGtCQUFRLEdBQWUsVUFBVSxDQUFDO0lBQ2xDLG1CQUFTLEdBQWdCLFdBQVcsQ0FBQztJQUVyQyxpQkFBTyxHQUFjLFNBQVMsQ0FBQztJQUMvQixxQkFBVyxHQUFrQixhQUFhLENBQUM7SUFDM0MsZUFBSyxHQUFZLE9BQU8sQ0FBQztJQUN6QixjQUFJLEdBQVcsTUFBTSxDQUFDO0FBQ3JDLENBQUMsRUF0QmdCLFNBQVMsS0FBVCxTQUFTLFFBc0J6QjtBQVVEOzs7R0FHRztB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LEdBQUcsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztBQUNsQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHt0b1NldH0gZnJvbSAndmVnYS11dGlsJztcbmltcG9ydCB7QmluUGFyYW1zfSBmcm9tICcuL2Jpbic7XG5pbXBvcnQge0NoYW5uZWwsIENIQU5ORUxTLCBpc0NvbG9yQ2hhbm5lbH0gZnJvbSAnLi9jaGFubmVsJztcbmltcG9ydCB7RGF0ZVRpbWV9IGZyb20gJy4vZGF0ZXRpbWUnO1xuaW1wb3J0ICogYXMgbG9nIGZyb20gJy4vbG9nJztcbmltcG9ydCB7VHlwZSwgVFlQRV9JTkRFWH0gZnJvbSAnLi90eXBlJztcbmltcG9ydCB7Y29udGFpbnMsIEZsYWcsIGZsYWdLZXlzLCBrZXlzfSBmcm9tICcuL3V0aWwnO1xuaW1wb3J0IHtTY2FsZUludGVycG9sYXRlLCBTY2FsZUludGVycG9sYXRlUGFyYW1zfSBmcm9tICcuL3ZlZ2Euc2NoZW1hJztcblxuZXhwb3J0IG5hbWVzcGFjZSBTY2FsZVR5cGUge1xuICAvLyBDb250aW51b3VzIC0gUXVhbnRpdGF0aXZlXG4gIGV4cG9ydCBjb25zdCBMSU5FQVI6ICdsaW5lYXInID0gJ2xpbmVhcic7XG4gIGV4cG9ydCBjb25zdCBCSU5fTElORUFSOiAnYmluLWxpbmVhcicgPSAnYmluLWxpbmVhcic7XG4gIGV4cG9ydCBjb25zdCBMT0c6ICdsb2cnID0gJ2xvZyc7XG4gIGV4cG9ydCBjb25zdCBQT1c6ICdwb3cnID0gJ3Bvdyc7XG4gIGV4cG9ydCBjb25zdCBTUVJUOiAnc3FydCcgPSAnc3FydCc7XG4gIC8vIENvbnRpbnVvdXMgLSBUaW1lXG4gIGV4cG9ydCBjb25zdCBUSU1FOiAndGltZScgPSAndGltZSc7XG4gIGV4cG9ydCBjb25zdCBVVEM6ICd1dGMnID0gJ3V0Yyc7XG4gIC8vIHNlcXVlbnRpYWxcbiAgZXhwb3J0IGNvbnN0IFNFUVVFTlRJQUw6ICdzZXF1ZW50aWFsJyA9ICdzZXF1ZW50aWFsJztcblxuICAvLyBRdWFudGlsZSwgUXVhbnRpemUsIHRocmVzaG9sZFxuICBleHBvcnQgY29uc3QgUVVBTlRJTEU6ICdxdWFudGlsZScgPSAncXVhbnRpbGUnO1xuICBleHBvcnQgY29uc3QgUVVBTlRJWkU6ICdxdWFudGl6ZScgPSAncXVhbnRpemUnO1xuICBleHBvcnQgY29uc3QgVEhSRVNIT0xEOiAndGhyZXNob2xkJyA9ICd0aHJlc2hvbGQnO1xuXG4gIGV4cG9ydCBjb25zdCBPUkRJTkFMOiAnb3JkaW5hbCcgPSAnb3JkaW5hbCc7XG4gIGV4cG9ydCBjb25zdCBCSU5fT1JESU5BTDogJ2Jpbi1vcmRpbmFsJyA9ICdiaW4tb3JkaW5hbCc7XG4gIGV4cG9ydCBjb25zdCBQT0lOVDogJ3BvaW50JyA9ICdwb2ludCc7XG4gIGV4cG9ydCBjb25zdCBCQU5EOiAnYmFuZCcgPSAnYmFuZCc7XG59XG5cbmV4cG9ydCB0eXBlIFNjYWxlVHlwZSA9IHR5cGVvZiBTY2FsZVR5cGUuTElORUFSIHwgdHlwZW9mIFNjYWxlVHlwZS5CSU5fTElORUFSIHxcbiAgdHlwZW9mIFNjYWxlVHlwZS5MT0cgfCB0eXBlb2YgU2NhbGVUeXBlLlBPVyB8IHR5cGVvZiBTY2FsZVR5cGUuU1FSVCB8XG4gIHR5cGVvZiBTY2FsZVR5cGUuVElNRSB8IHR5cGVvZiBTY2FsZVR5cGUuVVRDIHxcbiAgLy8gVE9ETzogYWRkICdxdWFudGl6ZScsICdxdWFudGlsZScsICd0aHJlc2hvbGQnIGJhY2sgd2hlbiB3ZSByZWFsbHkgc3VwcG9ydCB0aGVtXG4gIHR5cGVvZiBTY2FsZVR5cGUuU0VRVUVOVElBTCB8IC8vIHR5cGVvZiBTY2FsZVR5cGUuUVVBTlRJTEUgfCB0eXBlb2YgU2NhbGVUeXBlLlFVQU5USVpFIHwgdHlwZW9mIFNjYWxlVHlwZS5USFJFU0hPTEQgfFxuICB0eXBlb2YgU2NhbGVUeXBlLk9SRElOQUwgfCB0eXBlb2YgU2NhbGVUeXBlLkJJTl9PUkRJTkFMIHwgdHlwZW9mIFNjYWxlVHlwZS5QT0lOVCB8IHR5cGVvZiBTY2FsZVR5cGUuQkFORDtcblxuXG4vKipcbiAqIEluZGV4IGZvciBzY2FsZSBjYXRlZ29yaWVzIC0tIG9ubHkgc2NhbGUgb2YgdGhlIHNhbWUgY2F0ZWdvcmllcyBjYW4gYmUgbWVyZ2VkIHRvZ2V0aGVyLlxuICogQ3VycmVudCBpbXBsZW1lbnRhdGlvbiBpcyB0cnlpbmcgdG8gYmUgY29uc2VydmF0aXZlIGFuZCBhdm9pZCBtZXJnaW5nIHNjYWxlIHR5cGUgdGhhdCBtaWdodCBub3Qgd29yayB0b2dldGhlclxuICovXG5jb25zdCBTQ0FMRV9DQVRFR09SWV9JTkRFWDoge1xuICAvLyBVc2luZyBNYXBwZWQgVHlwZSB0byBkZWNsYXJlIHR5cGUgKGh0dHBzOi8vd3d3LnR5cGVzY3JpcHRsYW5nLm9yZy9kb2NzL2hhbmRib29rL2FkdmFuY2VkLXR5cGVzLmh0bWwjbWFwcGVkLXR5cGVzKVxuICBbayBpbiBTY2FsZVR5cGVdOiBTY2FsZVR5cGUgfCAnbnVtZXJpYycgfCAnb3JkaW5hbC1wb3NpdGlvbidcbn0gPSB7XG4gIGxpbmVhcjogJ251bWVyaWMnLFxuICBsb2c6ICdudW1lcmljJyxcbiAgcG93OiAnbnVtZXJpYycsXG4gIHNxcnQ6ICdudW1lcmljJyxcbiAgJ2Jpbi1saW5lYXInOiAnYmluLWxpbmVhcicsIC8vIFRPRE86IHNob3VsZCBiaW4tbGluZWFyIHN1cHBvcnQgbWVyZ2luZyB3aXRoIG90aGVyXG4gIHRpbWU6ICd0aW1lJyxcbiAgdXRjOiAndGltZScsXG4gIHNlcXVlbnRpYWw6ICdzZXF1ZW50aWFsJyxcbiAgb3JkaW5hbDogJ29yZGluYWwnLFxuICAnYmluLW9yZGluYWwnOiAnYmluLW9yZGluYWwnLCAvLyBUT0RPOiBzaG91bGQgYmluLW9yZGluYWwgc3VwcG9ydCBtZXJnaW5nIHdpdGggb3RoZXJcbiAgcG9pbnQ6ICdvcmRpbmFsLXBvc2l0aW9uJyxcbiAgYmFuZDogJ29yZGluYWwtcG9zaXRpb24nXG59O1xuXG5leHBvcnQgY29uc3QgU0NBTEVfVFlQRVMgPSBrZXlzKFNDQUxFX0NBVEVHT1JZX0lOREVYKSBhcyBTY2FsZVR5cGVbXTtcblxuLyoqXG4gKiBXaGV0aGVyIHRoZSB0d28gZ2l2ZW4gc2NhbGUgdHlwZXMgY2FuIGJlIG1lcmdlZCB0b2dldGhlci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlQ29tcGF0aWJsZShzY2FsZVR5cGUxOiBTY2FsZVR5cGUsIHNjYWxlVHlwZTI6IFNjYWxlVHlwZSkge1xuICBjb25zdCBzY2FsZUNhdGVnb3J5MSA9IFNDQUxFX0NBVEVHT1JZX0lOREVYW3NjYWxlVHlwZTFdO1xuICBjb25zdCBzY2FsZUNhdGVnb3J5MiA9IFNDQUxFX0NBVEVHT1JZX0lOREVYW3NjYWxlVHlwZTJdO1xuICByZXR1cm4gc2NhbGVDYXRlZ29yeTEgPT09IHNjYWxlQ2F0ZWdvcnkyIHx8XG4gICAgKHNjYWxlQ2F0ZWdvcnkxID09PSAnb3JkaW5hbC1wb3NpdGlvbicgJiYgc2NhbGVDYXRlZ29yeTIgPT09ICd0aW1lJykgfHxcbiAgICAoc2NhbGVDYXRlZ29yeTIgPT09ICdvcmRpbmFsLXBvc2l0aW9uJyAmJiBzY2FsZUNhdGVnb3J5MSA9PT0gJ3RpbWUnKTtcbn1cblxuLyoqXG4gKiBJbmRleCBmb3Igc2NhbGUgcHJlY2VkZW5jZSAtLSBoaWdoIHNjb3JlID0gaGlnaGVyIHByaW9yaXR5IGZvciBtZXJnaW5nLlxuICovXG5jb25zdCBTQ0FMRV9QUkVDRURFTkNFX0lOREVYOiB7XG4gIC8vIFVzaW5nIE1hcHBlZCBUeXBlIHRvIGRlY2xhcmUgdHlwZSAoaHR0cHM6Ly93d3cudHlwZXNjcmlwdGxhbmcub3JnL2RvY3MvaGFuZGJvb2svYWR2YW5jZWQtdHlwZXMuaHRtbCNtYXBwZWQtdHlwZXMpXG4gIFtrIGluIFNjYWxlVHlwZV06IG51bWJlclxufSA9IHtcbiAgLy8gbnVtZXJpY1xuICBsaW5lYXI6IDAsXG4gIGxvZzogMSxcbiAgcG93OiAxLFxuICBzcXJ0OiAxLFxuICAvLyB0aW1lXG4gIHRpbWU6IDAsXG4gIHV0YzogMCxcbiAgLy8gb3JkaW5hbC1wb3NpdGlvbiAtLSB0aGVzZSBoYXZlIGhpZ2hlciBwcmVjZWRlbmNlIHRoYW4gY29udGludW91cyBzY2FsZXMgYXMgdGhleSBzdXBwb3J0IG1vcmUgdHlwZXMgb2YgZGF0YVxuICBwb2ludDogMTAsXG4gIGJhbmQ6IDExLCAvLyBiYW5kIGhhcyBoaWdoZXIgcHJlY2VkZW5jZSBhcyBpdCBpcyBiZXR0ZXIgZm9yIGludGVyYWN0aW9uXG4gIC8vIG5vbiBncm91cGVkIHR5cGVzXG4gICdiaW4tbGluZWFyJzogMCxcbiAgc2VxdWVudGlhbDogMCxcbiAgb3JkaW5hbDogMCxcbiAgJ2Jpbi1vcmRpbmFsJzogMCxcbn07XG5cbi8qKlxuICogUmV0dXJuIHNjYWxlIGNhdGVnb3JpZXMgLS0gb25seSBzY2FsZSBvZiB0aGUgc2FtZSBjYXRlZ29yaWVzIGNhbiBiZSBtZXJnZWQgdG9nZXRoZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZVR5cGVQcmVjZWRlbmNlKHNjYWxlVHlwZTogU2NhbGVUeXBlKTogbnVtYmVyIHtcbiAgcmV0dXJuIFNDQUxFX1BSRUNFREVOQ0VfSU5ERVhbc2NhbGVUeXBlXTtcbn1cblxuZXhwb3J0IGNvbnN0IENPTlRJTlVPVVNfVE9fQ09OVElOVU9VU19TQ0FMRVM6IFNjYWxlVHlwZVtdID0gWydsaW5lYXInLCAnYmluLWxpbmVhcicsICdsb2cnLCAncG93JywgJ3NxcnQnLCAndGltZScsICd1dGMnXTtcbmNvbnN0IENPTlRJTlVPVVNfVE9fQ09OVElOVU9VU19JTkRFWCA9IHRvU2V0KENPTlRJTlVPVVNfVE9fQ09OVElOVU9VU19TQ0FMRVMpO1xuXG5leHBvcnQgY29uc3QgQ09OVElOVU9VU19ET01BSU5fU0NBTEVTOiBTY2FsZVR5cGVbXSA9IENPTlRJTlVPVVNfVE9fQ09OVElOVU9VU19TQ0FMRVMuY29uY2F0KFsnc2VxdWVudGlhbCcgLyogVE9ETyBhZGQgJ3F1YW50aWxlJywgJ3F1YW50aXplJywgJ3RocmVzaG9sZCcqL10pO1xuY29uc3QgQ09OVElOVU9VU19ET01BSU5fSU5ERVggPSB0b1NldChDT05USU5VT1VTX0RPTUFJTl9TQ0FMRVMpO1xuXG5leHBvcnQgY29uc3QgRElTQ1JFVEVfRE9NQUlOX1NDQUxFUzogU2NhbGVUeXBlW10gPSBbJ29yZGluYWwnLCAnYmluLW9yZGluYWwnLCAncG9pbnQnLCAnYmFuZCddO1xuY29uc3QgRElTQ1JFVEVfRE9NQUlOX0lOREVYID0gdG9TZXQoRElTQ1JFVEVfRE9NQUlOX1NDQUxFUyk7XG5cbmNvbnN0IEJJTl9TQ0FMRVNfSU5ERVggPSB0b1NldChbJ2Jpbi1saW5lYXInLCAnYmluLW9yZGluYWwnXSk7XG5cbmV4cG9ydCBjb25zdCBUSU1FX1NDQUxFX1RZUEVTOiBTY2FsZVR5cGVbXSA9IFsndGltZScsICd1dGMnXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGhhc0Rpc2NyZXRlRG9tYWluKHR5cGU6IFNjYWxlVHlwZSk6IHR5cGUgaXMgJ29yZGluYWwnIHwgJ2Jpbi1vcmRpbmFsJyB8ICdwb2ludCcgfCAnYmFuZCcge1xuICByZXR1cm4gdHlwZSBpbiBESVNDUkVURV9ET01BSU5fSU5ERVg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0JpblNjYWxlKHR5cGU6IFNjYWxlVHlwZSk6IHR5cGUgaXMgJ2Jpbi1saW5lYXInIHwgJ2Jpbi1vcmRpbmFsJyB7XG4gIHJldHVybiB0eXBlIGluIEJJTl9TQ0FMRVNfSU5ERVg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNDb250aW51b3VzRG9tYWluKHR5cGU6IFNjYWxlVHlwZSk6XG4gIHR5cGUgaXMgJ2xpbmVhcicgfCAnbG9nJyB8ICdwb3cnIHwgJ3NxcnQnIHwgJ3RpbWUnIHwgJ3V0Yyd8XG4gICAgICAgICAgJ3NlcXVlbnRpYWwnIC8qIFRPRE8gYWRkIHwgJ3F1YW50aWxlJyB8ICdxdWFudGl6ZScgfCAndGhyZXNob2xkJyAqLyB7XG4gIHJldHVybiB0eXBlIGluIENPTlRJTlVPVVNfRE9NQUlOX0lOREVYO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNDb250aW51b3VzVG9Db250aW51b3VzKHR5cGU6IFNjYWxlVHlwZSk6IHR5cGUgaXMgJ2xpbmVhcicgfCAnYmluLWxpbmVhcicgfCAnbG9nJyB8ICdwb3cnIHwgJ3NxcnQnIHwgJ3RpbWUnIHwgJ3V0Yycge1xuICByZXR1cm4gdHlwZSBpbiBDT05USU5VT1VTX1RPX0NPTlRJTlVPVVNfSU5ERVg7XG59XG5cbmV4cG9ydCB0eXBlIE5pY2VUaW1lID0gJ3NlY29uZCcgfCAnbWludXRlJyB8ICdob3VyJyB8ICdkYXknIHwgJ3dlZWsnIHwgJ21vbnRoJyB8ICd5ZWFyJztcblxuZXhwb3J0IGludGVyZmFjZSBTY2FsZUNvbmZpZyB7XG4gIC8qKlxuICAgKiBJZiB0cnVlLCByb3VuZHMgbnVtZXJpYyBvdXRwdXQgdmFsdWVzIHRvIGludGVnZXJzLlxuICAgKiBUaGlzIGNhbiBiZSBoZWxwZnVsIGZvciBzbmFwcGluZyB0byB0aGUgcGl4ZWwgZ3JpZC5cbiAgICogKE9ubHkgYXZhaWxhYmxlIGZvciBgeGAsIGB5YCwgYW5kIGBzaXplYCBzY2FsZXMuKVxuICAgKi9cbiAgcm91bmQ/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBJZiB0cnVlLCB2YWx1ZXMgdGhhdCBleGNlZWQgdGhlIGRhdGEgZG9tYWluIGFyZSBjbGFtcGVkIHRvIGVpdGhlciB0aGUgbWluaW11bSBvciBtYXhpbXVtIHJhbmdlIHZhbHVlXG4gICAqL1xuICBjbGFtcD86IGJvb2xlYW47XG4gIC8qKlxuICAgKiAgRGVmYXVsdCByYW5nZSBzdGVwIGZvciBgeGAgYmFuZCBhbmQgcG9pbnQgc2NhbGVzIG9mIHRleHQgbWFya3MuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBgOTBgXG4gICAqXG4gICAqICBAbWluaW11bSAwXG4gICAqL1xuICB0ZXh0WFJhbmdlU3RlcD86IG51bWJlcjsgLy8gRklYTUU6IGNvbnNpZGVyIGlmIHdlIHdpbGwgcmVuYW1lIHRoaXMgXCJ0YWJsZUNvbHVtbldpZHRoXCJcblxuICAvKipcbiAgICogRGVmYXVsdCByYW5nZSBzdGVwIGZvciBiYW5kIGFuZCBwb2ludCBzY2FsZXMgb2YgKDEpIHRoZSBgeWAgY2hhbm5lbFxuICAgKiBhbmQgKDIpIHRoZSBgeGAgY2hhbm5lbCB3aGVuIHRoZSBtYXJrIGlzIG5vdCBgdGV4dGAuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBgMjFgXG4gICAqXG4gICAqIEBtaW5pbXVtIDBcbiAgICovXG4gIHJhbmdlU3RlcD86IG51bWJlciB8IG51bGw7XG5cbiAgLyoqXG4gICAqIERlZmF1bHQgaW5uZXIgcGFkZGluZyBmb3IgYHhgIGFuZCBgeWAgYmFuZC1vcmRpbmFsIHNjYWxlcy5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fIGAwLjFgXG4gICAqXG4gICAqIEBtaW5pbXVtIDBcbiAgICogQG1heGltdW0gMVxuICAgKi9cbiAgYmFuZFBhZGRpbmdJbm5lcj86IG51bWJlcjtcblxuICAvKipcbiAgICogRGVmYXVsdCBvdXRlciBwYWRkaW5nIGZvciBgeGAgYW5kIGB5YCBiYW5kLW9yZGluYWwgc2NhbGVzLlxuICAgKiBJZiBub3Qgc3BlY2lmaWVkLCBieSBkZWZhdWx0LCBiYW5kIHNjYWxlJ3MgcGFkZGluZ091dGVyIGlzIHBhZGRpbmdJbm5lci8yLlxuICAgKiBAbWluaW11bSAwXG4gICAqIEBtYXhpbXVtIDFcbiAgICovXG4gIGJhbmRQYWRkaW5nT3V0ZXI/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIERlZmF1bHQgcGFkZGluZyBmb3IgY29udGludW91cyBzY2FsZXMuXG4gICAqXG4gICAqIF9fRGVmYXVsdDpfXyBgNWAgZm9yIGNvbnRpbnVvdXMgeC1zY2FsZSBvZiBhIHZlcnRpY2FsIGJhciBhbmQgY29udGludW91cyB5LXNjYWxlIG9mIGEgaG9yaXpvbnRhbCBiYXIuOyBgMGAgb3RoZXJ3aXNlLlxuICAgKlxuICAgKiBAbWluaW11bSAwXG4gICAqL1xuICBjb250aW51b3VzUGFkZGluZz86IG51bWJlcjtcblxuICAvKipcbiAgICogRGVmYXVsdCBvdXRlciBwYWRkaW5nIGZvciBgeGAgYW5kIGB5YCBwb2ludC1vcmRpbmFsIHNjYWxlcy5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fIGAwLjVgXG4gICAqXG4gICAqIEBtaW5pbXVtIDBcbiAgICogQG1heGltdW0gMVxuICAgKi9cbiAgcG9pbnRQYWRkaW5nPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBVc2UgdGhlIHNvdXJjZSBkYXRhIHJhbmdlIGJlZm9yZSBhZ2dyZWdhdGlvbiBhcyBzY2FsZSBkb21haW4gaW5zdGVhZCBvZiBhZ2dyZWdhdGVkIGRhdGEgZm9yIGFnZ3JlZ2F0ZSBheGlzLlxuICAgKlxuICAgKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gc2V0dGluZyBgZG9tYWluYCB0byBgXCJ1bmFnZ3JlZ2F0ZVwiYCBmb3IgYWdncmVnYXRlZCBfcXVhbnRpdGF0aXZlXyBmaWVsZHMgYnkgZGVmYXVsdC5cbiAgICpcbiAgICogVGhpcyBwcm9wZXJ0eSBvbmx5IHdvcmtzIHdpdGggYWdncmVnYXRlIGZ1bmN0aW9ucyB0aGF0IHByb2R1Y2UgdmFsdWVzIHdpdGhpbiB0aGUgcmF3IGRhdGEgZG9tYWluIChgXCJtZWFuXCJgLCBgXCJhdmVyYWdlXCJgLCBgXCJtZWRpYW5cImAsIGBcInExXCJgLCBgXCJxM1wiYCwgYFwibWluXCJgLCBgXCJtYXhcImApLiBGb3Igb3RoZXIgYWdncmVnYXRpb25zIHRoYXQgcHJvZHVjZSB2YWx1ZXMgb3V0c2lkZSBvZiB0aGUgcmF3IGRhdGEgZG9tYWluIChlLmcuIGBcImNvdW50XCJgLCBgXCJzdW1cImApLCB0aGlzIHByb3BlcnR5IGlzIGlnbm9yZWQuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBgZmFsc2VgXG4gICAqL1xuICB1c2VVbmFnZ3JlZ2F0ZWREb21haW4/OiBib29sZWFuO1xuXG4gIC8vIG5pY2Ugc2hvdWxkIGRlcGVuZHMgb24gdHlwZSAocXVhbnRpdGF0aXZlIG9yIHRlbXBvcmFsKSwgc29cbiAgLy8gbGV0J3Mgbm90IG1ha2UgYSBjb25maWcuXG5cbiAgLy8gQ29uZmlncyBmb3IgUmFuZ2VcblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgbWF4IHZhbHVlIGZvciBtYXBwaW5nIHF1YW50aXRhdGl2ZSBmaWVsZHMgdG8gYmFyJ3Mgc2l6ZS9iYW5kU2l6ZS5cbiAgICpcbiAgICogSWYgdW5kZWZpbmVkIChkZWZhdWx0KSwgd2Ugd2lsbCB1c2UgdGhlIHNjYWxlJ3MgYHJhbmdlU3RlcGAgLSAxLlxuICAgKiBAbWluaW11bSAwXG4gICAqL1xuICBtYXhCYW5kU2l6ZT86IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgbWluIHZhbHVlIGZvciBtYXBwaW5nIHF1YW50aXRhdGl2ZSBmaWVsZHMgdG8gYmFyIGFuZCB0aWNrJ3Mgc2l6ZS9iYW5kU2l6ZSBzY2FsZSB3aXRoIHplcm89ZmFsc2UuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBgMmBcbiAgICpcbiAgICogQG1pbmltdW0gMFxuICAgKi9cbiAgbWluQmFuZFNpemU/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IG1heCB2YWx1ZSBmb3IgbWFwcGluZyBxdWFudGl0YXRpdmUgZmllbGRzIHRvIHRleHQncyBzaXplL2ZvbnRTaXplLlxuICAgKlxuICAgKiBfX0RlZmF1bHQgdmFsdWU6X18gYDQwYFxuICAgKlxuICAgKiBAbWluaW11bSAwXG4gICAqL1xuICBtYXhGb250U2l6ZT86IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgbWluIHZhbHVlIGZvciBtYXBwaW5nIHF1YW50aXRhdGl2ZSBmaWVsZHMgdG8gdGljaydzIHNpemUvZm9udFNpemUgc2NhbGUgd2l0aCB6ZXJvPWZhbHNlXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBgOGBcbiAgICpcbiAgICogQG1pbmltdW0gMFxuICAgKi9cbiAgbWluRm9udFNpemU/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIERlZmF1bHQgbWluaW11bSBvcGFjaXR5IGZvciBtYXBwaW5nIGEgZmllbGQgdG8gb3BhY2l0eS5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fIGAwLjNgXG4gICAqXG4gICAqIEBtaW5pbXVtIDBcbiAgICogQG1heGltdW0gMVxuICAgKi9cbiAgbWluT3BhY2l0eT86IG51bWJlcjtcblxuICAvKipcbiAgICogRGVmYXVsdCBtYXggb3BhY2l0eSBmb3IgbWFwcGluZyBhIGZpZWxkIHRvIG9wYWNpdHkuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBgMC44YFxuICAgKlxuICAgKiBAbWluaW11bSAwXG4gICAqIEBtYXhpbXVtIDFcbiAgICovXG4gIG1heE9wYWNpdHk/OiBudW1iZXI7XG5cblxuICAvKipcbiAgICogRGVmYXVsdCBtaW5pbXVtIHZhbHVlIGZvciBwb2ludCBzaXplIHNjYWxlIHdpdGggemVybz1mYWxzZS5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fIGA5YFxuICAgKlxuICAgKiBAbWluaW11bSAwXG4gICAqL1xuICBtaW5TaXplPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBEZWZhdWx0IG1heCB2YWx1ZSBmb3IgcG9pbnQgc2l6ZSBzY2FsZS5cbiAgICogQG1pbmltdW0gMFxuICAgKi9cbiAgbWF4U2l6ZT86IG51bWJlcjtcblxuICAvKipcbiAgICogRGVmYXVsdCBtaW5pbXVtIHN0cm9rZVdpZHRoIGZvciB0aGUgc2NhbGUgb2Ygc3Ryb2tlV2lkdGggZm9yIHJ1bGUgYW5kIGxpbmUgbWFya3MgYW5kIG9mIHNpemUgZm9yIHRyYWlsIG1hcmtzIHdpdGggemVybz1mYWxzZS5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fIGAxYFxuICAgKlxuICAgKiBAbWluaW11bSAwXG4gICAqL1xuICBtaW5TdHJva2VXaWR0aD86IG51bWJlcjtcblxuICAvKipcbiAgICogRGVmYXVsdCBtYXggc3Ryb2tlV2lkdGggZm9yIHRoZSBzY2FsZSBvZiBzdHJva2VXaWR0aCBmb3IgcnVsZSBhbmQgbGluZSBtYXJrcyBhbmQgb2Ygc2l6ZSBmb3IgdHJhaWwgbWFya3MuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBgNGBcbiAgICpcbiAgICogQG1pbmltdW0gMFxuICAgKi9cbiAgbWF4U3Ryb2tlV2lkdGg/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0U2NhbGVDb25maWcgPSB7XG4gIHRleHRYUmFuZ2VTdGVwOiA5MCxcbiAgcmFuZ2VTdGVwOiAyMSxcbiAgcG9pbnRQYWRkaW5nOiAwLjUsXG4gIGJhbmRQYWRkaW5nSW5uZXI6IDAuMSxcbiAgZmFjZXRTcGFjaW5nOiAxNixcblxuICBtaW5CYW5kU2l6ZTogMixcblxuICBtaW5Gb250U2l6ZTogOCxcbiAgbWF4Rm9udFNpemU6IDQwLFxuXG4gIG1pbk9wYWNpdHk6IDAuMyxcbiAgbWF4T3BhY2l0eTogMC44LFxuXG4gIC8vIEZJWE1FOiByZXZpc2UgaWYgdGhlc2UgKmNhbiogYmVjb21lIHJhdGlvcyBvZiByYW5nZVN0ZXBcbiAgbWluU2l6ZTogOSwgLy8gUG9pbnQgc2l6ZSBpcyBhcmVhLiBGb3Igc3F1YXJlIHBvaW50LCA5ID0gMyBwaXhlbCBeIDIsIG5vdCB0b28gc21hbGwhXG5cbiAgbWluU3Ryb2tlV2lkdGg6IDEsXG4gIG1heFN0cm9rZVdpZHRoOiA0XG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIFNjaGVtZVBhcmFtcyB7XG4gIC8qKlxuICAgKiBBIGNvbG9yIHNjaGVtZSBuYW1lIGZvciBzZXF1ZW50aWFsL29yZGluYWwgc2NhbGVzIChlLmcuLCBgXCJjYXRlZ29yeTEwXCJgIG9yIGBcInZpcmlkaXNcImApLlxuICAgKlxuICAgKiBGb3IgdGhlIGZ1bGwgbGlzdCBvZiBzdXBwb3J0ZWQgc2NoZW1lcywgcGxlYXNlIHJlZmVyIHRvIHRoZSBbVmVnYSBTY2hlbWVdKGh0dHBzOi8vdmVnYS5naXRodWIuaW8vdmVnYS9kb2NzL3NjaGVtZXMvI3JlZmVyZW5jZSkgcmVmZXJlbmNlLlxuICAgKi9cbiAgbmFtZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBGb3Igc2VxdWVudGlhbCBhbmQgZGl2ZXJnaW5nIHNjaGVtZXMgb25seSwgZGV0ZXJtaW5lcyB0aGUgZXh0ZW50IG9mIHRoZSBjb2xvciByYW5nZSB0byB1c2UuIEZvciBleGFtcGxlIGBbMC4yLCAxXWAgd2lsbCByZXNjYWxlIHRoZSBjb2xvciBzY2hlbWUgc3VjaCB0aGF0IGNvbG9yIHZhbHVlcyBpbiB0aGUgcmFuZ2UgX1swLCAwLjIpXyBhcmUgZXhjbHVkZWQgZnJvbSB0aGUgc2NoZW1lLlxuICAgKi9cbiAgZXh0ZW50PzogbnVtYmVyW107XG5cbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2YgY29sb3JzIHRvIHVzZSBpbiB0aGUgc2NoZW1lLiBUaGlzIGNhbiBiZSB1c2VmdWwgZm9yIHNjYWxlIHR5cGVzIHN1Y2ggYXMgYFwicXVhbnRpemVcImAsIHdoaWNoIHVzZSB0aGUgbGVuZ3RoIG9mIHRoZSBzY2FsZSByYW5nZSB0byBkZXRlcm1pbmUgdGhlIG51bWJlciBvZiBkaXNjcmV0ZSBiaW5zIGZvciB0aGUgc2NhbGUgZG9tYWluLlxuICAgKlxuICAgKiBAaGlkZVxuICAgKi9cbiAgY291bnQ/OiBudW1iZXI7XG59XG5cbmV4cG9ydCB0eXBlIFNlbGVjdGlvbkRvbWFpbiA9IHtcbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIGEgc2VsZWN0aW9uLlxuICAgKi9cbiAgc2VsZWN0aW9uOiBzdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgZmllbGQgbmFtZSB0byBleHRyYWN0IHNlbGVjdGVkIHZhbHVlcyBmb3IsIHdoZW4gYSBzZWxlY3Rpb24gaXMgW3Byb2plY3RlZF0ocHJvamVjdC5odG1sKVxuICAgKiBvdmVyIG11bHRpcGxlIGZpZWxkcyBvciBlbmNvZGluZ3MuXG4gICAqL1xuICBmaWVsZD86IHN0cmluZ1xufSB8IHtcbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIGEgc2VsZWN0aW9uLlxuICAgKi9cbiAgc2VsZWN0aW9uOiBzdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgZW5jb2RpbmcgY2hhbm5lbCB0byBleHRyYWN0IHNlbGVjdGVkIHZhbHVlcyBmb3IsIHdoZW4gYSBzZWxlY3Rpb24gaXMgW3Byb2plY3RlZF0ocHJvamVjdC5odG1sKVxuICAgKiBvdmVyIG11bHRpcGxlIGZpZWxkcyBvciBlbmNvZGluZ3MuXG4gICAqL1xuICBlbmNvZGluZz86IHN0cmluZ1xufTtcblxuZXhwb3J0IHR5cGUgRG9tYWluID0gbnVtYmVyW10gfCBzdHJpbmdbXSB8IGJvb2xlYW5bXSB8IERhdGVUaW1lW10gfCAndW5hZ2dyZWdhdGVkJyB8IFNlbGVjdGlvbkRvbWFpbjtcbmV4cG9ydCB0eXBlIFNjaGVtZSA9IHN0cmluZyB8IFNjaGVtZVBhcmFtcztcblxuZXhwb3J0IHR5cGUgUmFuZ2UgPSBudW1iZXJbXSB8IHN0cmluZ1tdIHwgc3RyaW5nO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNFeHRlbmRlZFNjaGVtZShzY2hlbWU6IHN0cmluZyB8IFNjaGVtZVBhcmFtcyk6IHNjaGVtZSBpcyBTY2hlbWVQYXJhbXMge1xuICByZXR1cm4gc2NoZW1lICYmICEhc2NoZW1lWyduYW1lJ107XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1NlbGVjdGlvbkRvbWFpbihkb21haW46IERvbWFpbik6IGRvbWFpbiBpcyBTZWxlY3Rpb25Eb21haW4ge1xuICByZXR1cm4gZG9tYWluICYmIGRvbWFpblsnc2VsZWN0aW9uJ107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2NhbGUge1xuICAvKipcbiAgICogVGhlIHR5cGUgb2Ygc2NhbGUuICBWZWdhLUxpdGUgc3VwcG9ydHMgdGhlIGZvbGxvd2luZyBjYXRlZ29yaWVzIG9mIHNjYWxlIHR5cGVzOlxuICAgKlxuICAgKiAxKSBbKipDb250aW51b3VzIFNjYWxlcyoqXShzY2FsZS5odG1sI2NvbnRpbnVvdXMpIC0tIG1hcHBpbmcgY29udGludW91cyBkb21haW5zIHRvIGNvbnRpbnVvdXMgb3V0cHV0IHJhbmdlcyAoW2BcImxpbmVhclwiYF0oc2NhbGUuaHRtbCNsaW5lYXIpLCBbYFwicG93XCJgXShzY2FsZS5odG1sI3BvdyksIFtgXCJzcXJ0XCJgXShzY2FsZS5odG1sI3NxcnQpLCBbYFwibG9nXCJgXShzY2FsZS5odG1sI2xvZyksIFtgXCJ0aW1lXCJgXShzY2FsZS5odG1sI3RpbWUpLCBbYFwidXRjXCJgXShzY2FsZS5odG1sI3V0YyksIFtgXCJzZXF1ZW50aWFsXCJgXShzY2FsZS5odG1sI3NlcXVlbnRpYWwpKS5cbiAgICpcbiAgICogMikgWyoqRGlzY3JldGUgU2NhbGVzKipdKHNjYWxlLmh0bWwjZGlzY3JldGUpIC0tIG1hcHBpbmcgZGlzY3JldGUgZG9tYWlucyB0byBkaXNjcmV0ZSAoW2BcIm9yZGluYWxcImBdKHNjYWxlLmh0bWwjb3JkaW5hbCkpIG9yIGNvbnRpbnVvdXMgKFtgXCJiYW5kXCJgXShzY2FsZS5odG1sI2JhbmQpIGFuZCBbYFwicG9pbnRcImBdKHNjYWxlLmh0bWwjcG9pbnQpKSBvdXRwdXQgcmFuZ2VzLlxuICAgKlxuICAgKiAzKSBbKipEaXNjcmV0aXppbmcgU2NhbGVzKipdKHNjYWxlLmh0bWwjZGlzY3JldGl6aW5nKSAtLSBtYXBwaW5nIGNvbnRpbnVvdXMgZG9tYWlucyB0byBkaXNjcmV0ZSBvdXRwdXQgcmFuZ2VzIChbYFwiYmluLWxpbmVhclwiYF0oc2NhbGUuaHRtbCNiaW4tbGluZWFyKSBhbmQgW2BcImJpbi1vcmRpbmFsXCJgXShzY2FsZS5odG1sI2Jpbi1vcmRpbmFsKSkuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBwbGVhc2Ugc2VlIHRoZSBbc2NhbGUgdHlwZSB0YWJsZV0oc2NhbGUuaHRtbCN0eXBlKS5cbiAgICovXG4gIHR5cGU/OiBTY2FsZVR5cGU7XG5cbiAgLyoqXG4gICAqIEN1c3RvbWl6ZWQgZG9tYWluIHZhbHVlcy5cbiAgICpcbiAgICogRm9yIF9xdWFudGl0YXRpdmVfIGZpZWxkcywgYGRvbWFpbmAgY2FuIHRha2UgdGhlIGZvcm0gb2YgYSB0d28tZWxlbWVudCBhcnJheSB3aXRoIG1pbmltdW0gYW5kIG1heGltdW0gdmFsdWVzLiAgW1BpZWNld2lzZSBzY2FsZXNdKHNjYWxlLmh0bWwjcGllY2V3aXNlKSBjYW4gYmUgY3JlYXRlZCBieSBwcm92aWRpbmcgYSBgZG9tYWluYCB3aXRoIG1vcmUgdGhhbiB0d28gZW50cmllcy5cbiAgICogSWYgdGhlIGlucHV0IGZpZWxkIGlzIGFnZ3JlZ2F0ZWQsIGBkb21haW5gIGNhbiBhbHNvIGJlIGEgc3RyaW5nIHZhbHVlIGBcInVuYWdncmVnYXRlZFwiYCwgaW5kaWNhdGluZyB0aGF0IHRoZSBkb21haW4gc2hvdWxkIGluY2x1ZGUgdGhlIHJhdyBkYXRhIHZhbHVlcyBwcmlvciB0byB0aGUgYWdncmVnYXRpb24uXG4gICAqXG4gICAqIEZvciBfdGVtcG9yYWxfIGZpZWxkcywgYGRvbWFpbmAgY2FuIGJlIGEgdHdvLWVsZW1lbnQgYXJyYXkgbWluaW11bSBhbmQgbWF4aW11bSB2YWx1ZXMsIGluIHRoZSBmb3JtIG9mIGVpdGhlciB0aW1lc3RhbXBzIG9yIHRoZSBbRGF0ZVRpbWUgZGVmaW5pdGlvbiBvYmplY3RzXSh0eXBlcy5odG1sI2RhdGV0aW1lKS5cbiAgICpcbiAgICogRm9yIF9vcmRpbmFsXyBhbmQgX25vbWluYWxfIGZpZWxkcywgYGRvbWFpbmAgY2FuIGJlIGFuIGFycmF5IHRoYXQgbGlzdHMgdmFsaWQgaW5wdXQgdmFsdWVzLlxuICAgKlxuICAgKiBUaGUgYHNlbGVjdGlvbmAgcHJvcGVydHkgY2FuIGJlIHVzZWQgdG8gW2ludGVyYWN0aXZlbHkgZGV0ZXJtaW5lXShzZWxlY3Rpb24uaHRtbCNzY2FsZS1kb21haW5zKSB0aGUgc2NhbGUgZG9tYWluLlxuICAgKi9cbiAgZG9tYWluPzogbnVtYmVyW10gfCBzdHJpbmdbXSB8IGJvb2xlYW5bXSB8IERhdGVUaW1lW10gfCAndW5hZ2dyZWdhdGVkJyB8IFNlbGVjdGlvbkRvbWFpbjtcblxuXG4gIC8vIEhpZGUgYmVjYXVzZSB3ZSBtaWdodCBub3QgcmVhbGx5IG5lZWQgdGhpcy5cbiAgLyoqXG4gICAqIElmIHRydWUsIHJldmVyc2VzIHRoZSBvcmRlciBvZiB0aGUgc2NhbGUgcmFuZ2UuXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBgZmFsc2VgLlxuICAgKlxuICAgKiBAaGlkZVxuICAgKi9cbiAgcmV2ZXJzZT86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFRoZSByYW5nZSBvZiB0aGUgc2NhbGUuIE9uZSBvZjpcbiAgICpcbiAgICogLSBBIHN0cmluZyBpbmRpY2F0aW5nIGEgW3ByZS1kZWZpbmVkIG5hbWVkIHNjYWxlIHJhbmdlXShzY2FsZS5odG1sI3JhbmdlLWNvbmZpZykgKGUuZy4sIGV4YW1wbGUsIGBcInN5bWJvbFwiYCwgb3IgYFwiZGl2ZXJnaW5nXCJgKS5cbiAgICpcbiAgICogLSBGb3IgW2NvbnRpbnVvdXMgc2NhbGVzXShzY2FsZS5odG1sI2NvbnRpbnVvdXMpLCB0d28tZWxlbWVudCBhcnJheSBpbmRpY2F0aW5nICBtaW5pbXVtIGFuZCBtYXhpbXVtIHZhbHVlcywgb3IgYW4gYXJyYXkgd2l0aCBtb3JlIHRoYW4gdHdvIGVudHJpZXMgZm9yIHNwZWNpZnlpbmcgYSBbcGllY2V3aXNlIHNjYWxlXShzY2FsZS5odG1sI3BpZWNld2lzZSkuXG4gICAqXG4gICAqIC0gRm9yIFtkaXNjcmV0ZV0oc2NhbGUuaHRtbCNkaXNjcmV0ZSkgYW5kIFtkaXNjcmV0aXppbmddKHNjYWxlLmh0bWwjZGlzY3JldGl6aW5nKSBzY2FsZXMsIGFuIGFycmF5IG9mIGRlc2lyZWQgb3V0cHV0IHZhbHVlcy5cbiAgICpcbiAgICogX19Ob3RlczpfX1xuICAgKlxuICAgKiAxKSBGb3IgW3NlcXVlbnRpYWxdKHNjYWxlLmh0bWwjc2VxdWVudGlhbCksIFtvcmRpbmFsXShzY2FsZS5odG1sI29yZGluYWwpLCBhbmQgZGlzY3JldGl6aW5nIGNvbG9yIHNjYWxlcywgeW91IGNhbiBhbHNvIHNwZWNpZnkgYSBjb2xvciBbYHNjaGVtZWBdKHNjYWxlLmh0bWwjc2NoZW1lKSBpbnN0ZWFkIG9mIGByYW5nZWAuXG4gICAqXG4gICAqIDIpIEFueSBkaXJlY3RseSBzcGVjaWZpZWQgYHJhbmdlYCBmb3IgYHhgIGFuZCBgeWAgY2hhbm5lbHMgd2lsbCBiZSBpZ25vcmVkLiBSYW5nZSBjYW4gYmUgY3VzdG9taXplZCB2aWEgdGhlIHZpZXcncyBjb3JyZXNwb25kaW5nIFtzaXplXShzaXplLmh0bWwpIChgd2lkdGhgIGFuZCBgaGVpZ2h0YCkgb3IgdmlhIFtyYW5nZSBzdGVwcyBhbmQgcGFkZGluZ3MgcHJvcGVydGllc10oI3JhbmdlLXN0ZXApIGZvciBbYmFuZF0oI2JhbmQpIGFuZCBbcG9pbnRdKCNwb2ludCkgc2NhbGVzLlxuICAgKi9cbiAgcmFuZ2U/OiBudW1iZXJbXSB8IHN0cmluZ1tdIHwgc3RyaW5nO1xuXG4gIC8vIG9yZGluYWxcbiAgLyoqXG4gICAqIFRoZSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSBzdGFydHMgb2YgYWRqYWNlbnQgYmFuZHMgb3IgcG9pbnRzIGluIFtiYW5kXShzY2FsZS5odG1sI2JhbmQpIGFuZCBbcG9pbnRdKHNjYWxlLmh0bWwjcG9pbnQpIHNjYWxlcy5cbiAgICpcbiAgICogSWYgYHJhbmdlU3RlcGAgaXMgYG51bGxgIG9yIGlmIHRoZSB2aWV3IGNvbnRhaW5zIHRoZSBzY2FsZSdzIGNvcnJlc3BvbmRpbmcgW3NpemVdKHNpemUuaHRtbCkgKGB3aWR0aGAgZm9yIGB4YCBzY2FsZXMgYW5kIGBoZWlnaHRgIGZvciBgeWAgc2NhbGVzKSwgYHJhbmdlU3RlcGAgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IGRldGVybWluZWQgdG8gZml0IHRoZSBzaXplIG9mIHRoZSB2aWV3LlxuICAgKlxuICAgKiBfX0RlZmF1bHQgdmFsdWU6X18gIGRlcml2ZWQgdGhlIFtzY2FsZSBjb25maWddKGNvbmZpZy5odG1sI3NjYWxlLWNvbmZpZykncyBgdGV4dFhSYW5nZVN0ZXBgIChgOTBgIGJ5IGRlZmF1bHQpIGZvciB4LXNjYWxlcyBvZiBgdGV4dGAgbWFya3MgYW5kIGByYW5nZVN0ZXBgIChgMjFgIGJ5IGRlZmF1bHQpIGZvciB4LXNjYWxlcyBvZiBvdGhlciBtYXJrcyBhbmQgeS1zY2FsZXMuXG4gICAqXG4gICAqIF9fV2FybmluZ19fOiBJZiBgcmFuZ2VTdGVwYCBpcyBgbnVsbGAgYW5kIHRoZSBjYXJkaW5hbGl0eSBvZiB0aGUgc2NhbGUncyBkb21haW4gaXMgaGlnaGVyIHRoYW4gYHdpZHRoYCBvciBgaGVpZ2h0YCwgdGhlIHJhbmdlU3RlcCBtaWdodCBiZWNvbWUgbGVzcyB0aGFuIG9uZSBwaXhlbCBhbmQgdGhlIG1hcmsgbWlnaHQgbm90IGFwcGVhciBjb3JyZWN0bHkuXG4gICAqXG4gICAqIEBtaW5pbXVtIDBcbiAgICovXG4gIHJhbmdlU3RlcD86IG51bWJlciB8IG51bGw7XG5cbiAgLyoqXG4gICAqIEEgc3RyaW5nIGluZGljYXRpbmcgYSBjb2xvciBbc2NoZW1lXShzY2FsZS5odG1sI3NjaGVtZSkgbmFtZSAoZS5nLiwgYFwiY2F0ZWdvcnkxMFwiYCBvciBgXCJ2aXJpZGlzXCJgKSBvciBhIFtzY2hlbWUgcGFyYW1ldGVyIG9iamVjdF0oc2NhbGUuaHRtbCNzY2hlbWUtcGFyYW1zKS5cbiAgICpcbiAgICogRGlzY3JldGUgY29sb3Igc2NoZW1lcyBtYXkgYmUgdXNlZCB3aXRoIFtkaXNjcmV0ZV0oc2NhbGUuaHRtbCNkaXNjcmV0ZSkgb3IgW2Rpc2NyZXRpemluZ10oc2NhbGUuaHRtbCNkaXNjcmV0aXppbmcpIHNjYWxlcy4gQ29udGludW91cyBjb2xvciBzY2hlbWVzIGFyZSBpbnRlbmRlZCBmb3IgdXNlIHdpdGggW3NlcXVlbnRpYWxdKHNjYWxlcy5odG1sI3NlcXVlbnRpYWwpIHNjYWxlcy5cbiAgICpcbiAgICogRm9yIHRoZSBmdWxsIGxpc3Qgb2Ygc3VwcG9ydGVkIHNjaGVtZXMsIHBsZWFzZSByZWZlciB0byB0aGUgW1ZlZ2EgU2NoZW1lXShodHRwczovL3ZlZ2EuZ2l0aHViLmlvL3ZlZ2EvZG9jcy9zY2hlbWVzLyNyZWZlcmVuY2UpIHJlZmVyZW5jZS5cbiAgICovXG4gIHNjaGVtZT86IHN0cmluZyB8IFNjaGVtZVBhcmFtcztcblxuICAvKipcbiAgICogSWYgYHRydWVgLCByb3VuZHMgbnVtZXJpYyBvdXRwdXQgdmFsdWVzIHRvIGludGVnZXJzLiBUaGlzIGNhbiBiZSBoZWxwZnVsIGZvciBzbmFwcGluZyB0byB0aGUgcGl4ZWwgZ3JpZC5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fIGBmYWxzZWAuXG4gICAqL1xuICByb3VuZD86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEZvciBfW2NvbnRpbnVvdXNdKHNjYWxlLmh0bWwjY29udGludW91cylfIHNjYWxlcywgZXhwYW5kcyB0aGUgc2NhbGUgZG9tYWluIHRvIGFjY29tbW9kYXRlIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIHBpeGVscyBvbiBlYWNoIG9mIHRoZSBzY2FsZSByYW5nZS4gVGhlIHNjYWxlIHJhbmdlIG11c3QgcmVwcmVzZW50IHBpeGVscyBmb3IgdGhpcyBwYXJhbWV0ZXIgdG8gZnVuY3Rpb24gYXMgaW50ZW5kZWQuIFBhZGRpbmcgYWRqdXN0bWVudCBpcyBwZXJmb3JtZWTCoHByaW9ywqB0byBhbGwgb3RoZXIgYWRqdXN0bWVudHMsIGluY2x1ZGluZyB0aGUgZWZmZWN0cyBvZiB0aGXCoHplcm8swqBuaWNlLMKgZG9tYWluTWluLCBhbmTCoGRvbWFpbk1heMKgcHJvcGVydGllcy5cbiAgICpcbiAgICogRm9yIF9bYmFuZF0oc2NhbGUuaHRtbCNiYW5kKV8gc2NhbGVzLCBzaG9ydGN1dCBmb3Igc2V0dGluZyBgcGFkZGluZ0lubmVyYCBhbmQgYHBhZGRpbmdPdXRlcmAgdG8gdGhlIHNhbWUgdmFsdWUuXG4gICAqXG4gICAqIEZvciBfW3BvaW50XShzY2FsZS5odG1sI3BvaW50KV8gc2NhbGVzLCBhbGlhcyBmb3IgYHBhZGRpbmdPdXRlcmAuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBGb3IgX2NvbnRpbnVvdXNfIHNjYWxlcywgZGVyaXZlZCBmcm9tIHRoZSBbc2NhbGUgY29uZmlnXShzY2FsZS5odG1sI2NvbmZpZykncyBgY29udGludW91c1BhZGRpbmdgLlxuICAgKiBGb3IgX2JhbmQgYW5kIHBvaW50XyBzY2FsZXMsIHNlZSBgcGFkZGluZ0lubmVyYCBhbmQgYHBhZGRpbmdPdXRlcmAuXG4gICAqXG4gICAqIEBtaW5pbXVtIDBcbiAgICovXG4gIHBhZGRpbmc/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBpbm5lciBwYWRkaW5nIChzcGFjaW5nKSB3aXRoaW4gZWFjaCBiYW5kIHN0ZXAgb2YgYmFuZCBzY2FsZXMsIGFzIGEgZnJhY3Rpb24gb2YgdGhlIHN0ZXAgc2l6ZS4gVGhpcyB2YWx1ZSBtdXN0IGxpZSBpbiB0aGUgcmFuZ2UgWzAsMV0uXG4gICAqXG4gICAqIEZvciBwb2ludCBzY2FsZSwgdGhpcyBwcm9wZXJ0eSBpcyBpbnZhbGlkIGFzIHBvaW50IHNjYWxlcyBkbyBub3QgaGF2ZSBpbnRlcm5hbCBiYW5kIHdpZHRocyAob25seSBzdGVwIHNpemVzIGJldHdlZW4gYmFuZHMpLlxuICAgKlxuICAgKiBfX0RlZmF1bHQgdmFsdWU6X18gZGVyaXZlZCBmcm9tIHRoZSBbc2NhbGUgY29uZmlnXShzY2FsZS5odG1sI2NvbmZpZykncyBgYmFuZFBhZGRpbmdJbm5lcmAuXG4gICAqXG4gICAqIEBtaW5pbXVtIDBcbiAgICogQG1heGltdW0gMVxuICAgKi9cbiAgcGFkZGluZ0lubmVyPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgb3V0ZXIgcGFkZGluZyAoc3BhY2luZykgYXQgdGhlIGVuZHMgb2YgdGhlIHJhbmdlIG9mIGJhbmQgYW5kIHBvaW50IHNjYWxlcyxcbiAgICogYXMgYSBmcmFjdGlvbiBvZiB0aGUgc3RlcCBzaXplLiBUaGlzIHZhbHVlIG11c3QgbGllIGluIHRoZSByYW5nZSBbMCwxXS5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fIGRlcml2ZWQgZnJvbSB0aGUgW3NjYWxlIGNvbmZpZ10oc2NhbGUuaHRtbCNjb25maWcpJ3MgYGJhbmRQYWRkaW5nT3V0ZXJgIGZvciBiYW5kIHNjYWxlcyBhbmQgYHBvaW50UGFkZGluZ2AgZm9yIHBvaW50IHNjYWxlcy5cbiAgICpcbiAgICogQG1pbmltdW0gMFxuICAgKiBAbWF4aW11bSAxXG4gICAqL1xuICBwYWRkaW5nT3V0ZXI/OiBudW1iZXI7XG5cbiAgLy8gdHlwaWNhbFxuICAvKipcbiAgICogSWYgYHRydWVgLCB2YWx1ZXMgdGhhdCBleGNlZWQgdGhlIGRhdGEgZG9tYWluIGFyZSBjbGFtcGVkIHRvIGVpdGhlciB0aGUgbWluaW11bSBvciBtYXhpbXVtIHJhbmdlIHZhbHVlXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBkZXJpdmVkIGZyb20gdGhlIFtzY2FsZSBjb25maWddKGNvbmZpZy5odG1sI3NjYWxlLWNvbmZpZykncyBgY2xhbXBgIChgdHJ1ZWAgYnkgZGVmYXVsdCkuXG4gICAqL1xuICBjbGFtcD86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEV4dGVuZGluZyB0aGUgZG9tYWluIHNvIHRoYXQgaXQgc3RhcnRzIGFuZCBlbmRzIG9uIG5pY2Ugcm91bmQgdmFsdWVzLiBUaGlzIG1ldGhvZCB0eXBpY2FsbHkgbW9kaWZpZXMgdGhlIHNjYWxl4oCZcyBkb21haW4sIGFuZCBtYXkgb25seSBleHRlbmQgdGhlIGJvdW5kcyB0byB0aGUgbmVhcmVzdCByb3VuZCB2YWx1ZS4gTmljaW5nIGlzIHVzZWZ1bCBpZiB0aGUgZG9tYWluIGlzIGNvbXB1dGVkIGZyb20gZGF0YSBhbmQgbWF5IGJlIGlycmVndWxhci4gRm9yIGV4YW1wbGUsIGZvciBhIGRvbWFpbiBvZiBfWzAuMjAxNDc54oCmLCAwLjk5NjY3OeKApl1fLCBhIG5pY2UgZG9tYWluIG1pZ2h0IGJlIF9bMC4yLCAxLjBdXy5cbiAgICpcbiAgICogRm9yIHF1YW50aXRhdGl2ZSBzY2FsZXMgc3VjaCBhcyBsaW5lYXIsIGBuaWNlYCBjYW4gYmUgZWl0aGVyIGEgYm9vbGVhbiBmbGFnIG9yIGEgbnVtYmVyLiBJZiBgbmljZWAgaXMgYSBudW1iZXIsIGl0IHdpbGwgcmVwcmVzZW50IGEgZGVzaXJlZCB0aWNrIGNvdW50LiBUaGlzIGFsbG93cyBncmVhdGVyIGNvbnRyb2wgb3ZlciB0aGUgc3RlcCBzaXplIHVzZWQgdG8gZXh0ZW5kIHRoZSBib3VuZHMsIGd1YXJhbnRlZWluZyB0aGF0IHRoZSByZXR1cm5lZCB0aWNrcyB3aWxsIGV4YWN0bHkgY292ZXIgdGhlIGRvbWFpbi5cbiAgICpcbiAgICogRm9yIHRlbXBvcmFsIGZpZWxkcyB3aXRoIHRpbWUgYW5kIHV0YyBzY2FsZXMsIHRoZSBgbmljZWAgdmFsdWUgY2FuIGJlIGEgc3RyaW5nIGluZGljYXRpbmcgdGhlIGRlc2lyZWQgdGltZSBpbnRlcnZhbC4gTGVnYWwgdmFsdWVzIGFyZSBgXCJtaWxsaXNlY29uZFwiYCwgYFwic2Vjb25kXCJgLCBgXCJtaW51dGVcImAsIGBcImhvdXJcImAsIGBcImRheVwiYCwgYFwid2Vla1wiYCwgYFwibW9udGhcImAsIGFuZCBgXCJ5ZWFyXCJgLiBBbHRlcm5hdGl2ZWx5LCBgdGltZWAgYW5kIGB1dGNgIHNjYWxlcyBjYW4gYWNjZXB0IGFuIG9iamVjdC12YWx1ZWQgaW50ZXJ2YWwgc3BlY2lmaWVyIG9mIHRoZSBmb3JtIGB7XCJpbnRlcnZhbFwiOiBcIm1vbnRoXCIsIFwic3RlcFwiOiAzfWAsIHdoaWNoIGluY2x1ZGVzIGEgZGVzaXJlZCBudW1iZXIgb2YgaW50ZXJ2YWwgc3RlcHMuIEhlcmUsIHRoZSBkb21haW4gd291bGQgc25hcCB0byBxdWFydGVyIChKYW4sIEFwciwgSnVsLCBPY3QpIGJvdW5kYXJpZXMuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBgdHJ1ZWAgZm9yIHVuYmlubmVkIF9xdWFudGl0YXRpdmVfIGZpZWxkczsgYGZhbHNlYCBvdGhlcndpc2UuXG4gICAqXG4gICAqL1xuICBuaWNlPzogYm9vbGVhbiB8IG51bWJlciB8IE5pY2VUaW1lIHwge2ludGVydmFsOiBzdHJpbmcsIHN0ZXA6IG51bWJlcn07XG5cbiAgLyoqXG4gICAqIFRoZSBsb2dhcml0aG0gYmFzZSBvZiB0aGUgYGxvZ2Agc2NhbGUgKGRlZmF1bHQgYDEwYCkuXG4gICAqL1xuICBiYXNlPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgZXhwb25lbnQgb2YgdGhlIGBwb3dgIHNjYWxlLlxuICAgKi9cbiAgZXhwb25lbnQ/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgZW5zdXJlcyB0aGF0IGEgemVybyBiYXNlbGluZSB2YWx1ZSBpcyBpbmNsdWRlZCBpbiB0aGUgc2NhbGUgZG9tYWluLlxuICAgKlxuICAgKiBfX0RlZmF1bHQgdmFsdWU6X18gYHRydWVgIGZvciB4IGFuZCB5IGNoYW5uZWxzIGlmIHRoZSBxdWFudGl0YXRpdmUgZmllbGQgaXMgbm90IGJpbm5lZCBhbmQgbm8gY3VzdG9tIGBkb21haW5gIGlzIHByb3ZpZGVkOyBgZmFsc2VgIG90aGVyd2lzZS5cbiAgICpcbiAgICogX19Ob3RlOl9fIExvZywgdGltZSwgYW5kIHV0YyBzY2FsZXMgZG8gbm90IHN1cHBvcnQgYHplcm9gLlxuICAgKi9cbiAgemVybz86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFRoZSBpbnRlcnBvbGF0aW9uIG1ldGhvZCBmb3IgcmFuZ2UgdmFsdWVzLiBCeSBkZWZhdWx0LCBhIGdlbmVyYWwgaW50ZXJwb2xhdG9yIGZvciBudW1iZXJzLCBkYXRlcywgc3RyaW5ncyBhbmQgY29sb3JzIChpbiBSR0Igc3BhY2UpIGlzIHVzZWQuIEZvciBjb2xvciByYW5nZXMsIHRoaXMgcHJvcGVydHkgYWxsb3dzIGludGVycG9sYXRpb24gaW4gYWx0ZXJuYXRpdmUgY29sb3Igc3BhY2VzLiBMZWdhbCB2YWx1ZXMgaW5jbHVkZSBgcmdiYCwgYGhzbGAsIGBoc2wtbG9uZ2AsIGBsYWJgLCBgaGNsYCwgYGhjbC1sb25nYCwgYGN1YmVoZWxpeGAgYW5kIGBjdWJlaGVsaXgtbG9uZ2AgKCctbG9uZycgdmFyaWFudHMgdXNlIGxvbmdlciBwYXRocyBpbiBwb2xhciBjb29yZGluYXRlIHNwYWNlcykuIElmIG9iamVjdC12YWx1ZWQsIHRoaXMgcHJvcGVydHkgYWNjZXB0cyBhbiBvYmplY3Qgd2l0aCBhIHN0cmluZy12YWx1ZWQgX3R5cGVfIHByb3BlcnR5IGFuZCBhbiBvcHRpb25hbCBudW1lcmljIF9nYW1tYV8gcHJvcGVydHkgYXBwbGljYWJsZSB0byByZ2IgYW5kIGN1YmVoZWxpeCBpbnRlcnBvbGF0b3JzLiBGb3IgbW9yZSwgc2VlIHRoZSBbZDMtaW50ZXJwb2xhdGUgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9naXRodWIuY29tL2QzL2QzLWludGVycG9sYXRlKS5cbiAgICpcbiAgICogX19Ob3RlOl9fIFNlcXVlbnRpYWwgc2NhbGVzIGRvIG5vdCBzdXBwb3J0IGBpbnRlcnBvbGF0ZWAgYXMgdGhleSBoYXZlIGEgZml4ZWQgaW50ZXJwb2xhdG9yLiAgU2luY2UgVmVnYS1MaXRlIHVzZXMgc2VxdWVudGlhbCBzY2FsZXMgZm9yIHF1YW50aXRhdGl2ZSBmaWVsZHMgYnkgZGVmYXVsdCwgeW91IGhhdmUgdG8gc2V0IHRoZSBzY2FsZSBgdHlwZWAgdG8gb3RoZXIgcXVhbnRpdGF0aXZlIHNjYWxlIHR5cGUgc3VjaCBhcyBgXCJsaW5lYXJcImAgdG8gY3VzdG9taXplIGBpbnRlcnBvbGF0ZWAuXG4gICAqL1xuICBpbnRlcnBvbGF0ZT86IFNjYWxlSW50ZXJwb2xhdGUgfCBTY2FsZUludGVycG9sYXRlUGFyYW1zO1xufVxuXG5jb25zdCBTQ0FMRV9QUk9QRVJUWV9JTkRFWDogRmxhZzxrZXlvZiBTY2FsZT4gPSB7XG4gIHR5cGU6IDEsXG4gIGRvbWFpbjogMSxcbiAgcmFuZ2U6IDEsXG4gIHJhbmdlU3RlcDogMSxcbiAgc2NoZW1lOiAxLFxuICAvLyBPdGhlciBwcm9wZXJ0aWVzXG4gIHJldmVyc2U6IDEsXG4gIHJvdW5kOiAxLFxuICAvLyBxdWFudGl0YXRpdmUgLyB0aW1lXG4gIGNsYW1wOiAxLFxuICBuaWNlOiAxLFxuICAvLyBxdWFudGl0YXRpdmVcbiAgYmFzZTogMSxcbiAgZXhwb25lbnQ6IDEsXG4gIGludGVycG9sYXRlOiAxLFxuICB6ZXJvOiAxLCAvLyB6ZXJvIGRlcGVuZHMgb24gZG9tYWluXG4gIC8vIGJhbmQvcG9pbnRcbiAgcGFkZGluZzogMSxcbiAgcGFkZGluZ0lubmVyOiAxLFxuICBwYWRkaW5nT3V0ZXI6IDFcbn07XG5cbmV4cG9ydCBjb25zdCBTQ0FMRV9QUk9QRVJUSUVTID0gZmxhZ0tleXMoU0NBTEVfUFJPUEVSVFlfSU5ERVgpO1xuXG5jb25zdCB7dHlwZSwgZG9tYWluLCByYW5nZSwgcmFuZ2VTdGVwLCBzY2hlbWUsIC4uLk5PTl9UWVBFX0RPTUFJTl9SQU5HRV9WRUdBX1NDQUxFX1BST1BFUlRZX0lOREVYfSA9IFNDQUxFX1BST1BFUlRZX0lOREVYO1xuXG5leHBvcnQgY29uc3QgTk9OX1RZUEVfRE9NQUlOX1JBTkdFX1ZFR0FfU0NBTEVfUFJPUEVSVElFUyA9IGZsYWdLZXlzKE5PTl9UWVBFX0RPTUFJTl9SQU5HRV9WRUdBX1NDQUxFX1BST1BFUlRZX0lOREVYKTtcblxuZXhwb3J0IGNvbnN0IFNDQUxFX1RZUEVfSU5ERVggPSBnZW5lcmF0ZVNjYWxlVHlwZUluZGV4KCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZVR5cGVTdXBwb3J0UHJvcGVydHkoc2NhbGVUeXBlOiBTY2FsZVR5cGUsIHByb3BOYW1lOiBrZXlvZiBTY2FsZSkge1xuICBzd2l0Y2ggKHByb3BOYW1lKSB7XG4gICAgY2FzZSAndHlwZSc6XG4gICAgY2FzZSAnZG9tYWluJzpcbiAgICBjYXNlICdyZXZlcnNlJzpcbiAgICBjYXNlICdyYW5nZSc6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBjYXNlICdzY2hlbWUnOlxuICAgICAgcmV0dXJuIGNvbnRhaW5zKFsnc2VxdWVudGlhbCcsICdvcmRpbmFsJywgJ2Jpbi1vcmRpbmFsJywgJ3F1YW50aWxlJywgJ3F1YW50aXplJ10sIHNjYWxlVHlwZSk7XG4gICAgY2FzZSAnaW50ZXJwb2xhdGUnOlxuICAgICAgLy8gRklYTUUoaHR0cHM6Ly9naXRodWIuY29tL3ZlZ2EvdmVnYS1saXRlL2lzc3Vlcy8yOTAyKSBob3cgYWJvdXQgb3JkaW5hbD9cbiAgICAgIHJldHVybiBjb250YWlucyhbJ2xpbmVhcicsICdiaW4tbGluZWFyJywgJ3BvdycsICdsb2cnLCAnc3FydCcsICd1dGMnLCAndGltZSddLCBzY2FsZVR5cGUpO1xuICAgIGNhc2UgJ3JvdW5kJzpcbiAgICAgIHJldHVybiBpc0NvbnRpbnVvdXNUb0NvbnRpbnVvdXMoc2NhbGVUeXBlKSB8fCBzY2FsZVR5cGUgPT09ICdiYW5kJyB8fCBzY2FsZVR5cGUgPT09ICdwb2ludCc7XG4gICAgY2FzZSAncGFkZGluZyc6XG4gICAgICByZXR1cm4gaXNDb250aW51b3VzVG9Db250aW51b3VzKHNjYWxlVHlwZSkgfHwgY29udGFpbnMoWydwb2ludCcsICdiYW5kJ10sIHNjYWxlVHlwZSk7XG4gICAgY2FzZSAncGFkZGluZ091dGVyJzpcbiAgICBjYXNlICdyYW5nZVN0ZXAnOlxuICAgICAgcmV0dXJuIGNvbnRhaW5zKFsncG9pbnQnLCAnYmFuZCddLCBzY2FsZVR5cGUpO1xuICAgIGNhc2UgJ3BhZGRpbmdJbm5lcic6XG4gICAgICByZXR1cm4gc2NhbGVUeXBlID09PSAnYmFuZCc7XG4gICAgY2FzZSAnY2xhbXAnOlxuICAgICAgcmV0dXJuIGlzQ29udGludW91c1RvQ29udGludW91cyhzY2FsZVR5cGUpIHx8IHNjYWxlVHlwZSA9PT0gJ3NlcXVlbnRpYWwnO1xuICAgIGNhc2UgJ25pY2UnOlxuICAgICAgcmV0dXJuIGlzQ29udGludW91c1RvQ29udGludW91cyhzY2FsZVR5cGUpIHx8IHNjYWxlVHlwZSA9PT0gJ3NlcXVlbnRpYWwnIHx8IHNjYWxlVHlwZSBhcyBhbnkgPT09ICdxdWFudGl6ZSc7XG4gICAgY2FzZSAnZXhwb25lbnQnOlxuICAgICAgcmV0dXJuIHNjYWxlVHlwZSA9PT0gJ3Bvdyc7XG4gICAgY2FzZSAnYmFzZSc6XG4gICAgICByZXR1cm4gc2NhbGVUeXBlID09PSAnbG9nJztcbiAgICBjYXNlICd6ZXJvJzpcbiAgICAgIHJldHVybiBoYXNDb250aW51b3VzRG9tYWluKHNjYWxlVHlwZSkgJiYgIWNvbnRhaW5zKFtcbiAgICAgICAgJ2xvZycsICAvLyBsb2cgc2NhbGUgY2Fubm90IGhhdmUgemVybyB2YWx1ZVxuICAgICAgICAndGltZScsICd1dGMnLCAvLyB6ZXJvIGlzIG5vdCBtZWFuaW5nZnVsIGZvciB0aW1lXG4gICAgICAgICdiaW4tbGluZWFyJywgLy8gYmlubmluZyBzaG91bGQgbm90IGF1dG9tYXRpY2FsbHkgYWRkIHplcm9cbiAgICAgICAgJ3RocmVzaG9sZCcsIC8vIHRocmVzaG9sZCByZXF1aXJlcyBjdXN0b20gZG9tYWluIHNvIHplcm8gZG9lcyBub3QgbWF0dGVyXG4gICAgICAgICdxdWFudGlsZScgLy8gcXVhbnRpbGUgZGVwZW5kcyBvbiBkaXN0cmlidXRpb24gc28gemVybyBkb2VzIG5vdCBtYXR0ZXJcbiAgICAgIF0sIHNjYWxlVHlwZSk7XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQ6IHNob3VsZCBuZXZlciByZWFjaCBoZXJlKi9cbiAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHNjYWxlIHByb3BlcnR5ICR7cHJvcE5hbWV9LmApO1xufVxuXG4vKipcbiAqIFJldHVybnMgdW5kZWZpbmVkIGlmIHRoZSBpbnB1dCBjaGFubmVsIHN1cHBvcnRzIHRoZSBpbnB1dCBzY2FsZSBwcm9wZXJ0eSBuYW1lXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGFubmVsU2NhbGVQcm9wZXJ0eUluY29tcGF0YWJpbGl0eShjaGFubmVsOiBDaGFubmVsLCBwcm9wTmFtZToga2V5b2YgU2NhbGUpOiBzdHJpbmcge1xuICBzd2l0Y2ggKHByb3BOYW1lKSB7XG4gICAgY2FzZSAnaW50ZXJwb2xhdGUnOlxuICAgIGNhc2UgJ3NjaGVtZSc6XG4gICAgICBpZiAoIWlzQ29sb3JDaGFubmVsKGNoYW5uZWwpKSB7XG4gICAgICAgIHJldHVybiBsb2cubWVzc2FnZS5jYW5ub3RVc2VTY2FsZVByb3BlcnR5V2l0aE5vbkNvbG9yKGNoYW5uZWwpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICBjYXNlICd0eXBlJzpcbiAgICBjYXNlICdkb21haW4nOlxuICAgIGNhc2UgJ3JhbmdlJzpcbiAgICBjYXNlICdiYXNlJzpcbiAgICBjYXNlICdleHBvbmVudCc6XG4gICAgY2FzZSAnbmljZSc6XG4gICAgY2FzZSAncGFkZGluZyc6XG4gICAgY2FzZSAncGFkZGluZ0lubmVyJzpcbiAgICBjYXNlICdwYWRkaW5nT3V0ZXInOlxuICAgIGNhc2UgJ3JhbmdlU3RlcCc6XG4gICAgY2FzZSAncmV2ZXJzZSc6XG4gICAgY2FzZSAncm91bmQnOlxuICAgIGNhc2UgJ2NsYW1wJzpcbiAgICBjYXNlICd6ZXJvJzpcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7IC8vIEdPT0QhXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQ6IGl0IHNob3VsZCBuZXZlciByZWFjaCBoZXJlICovXG4gIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBzY2FsZSBwcm9wZXJ0eSBcIiR7cHJvcE5hbWV9XCIuYCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZVR5cGVTdXBwb3J0RGF0YVR5cGUoc3BlY2lmaWVkVHlwZTogU2NhbGVUeXBlLCBmaWVsZERlZlR5cGU6IFR5cGUsIGJpbjogYm9vbGVhbnxCaW5QYXJhbXMpOmJvb2xlYW4ge1xuICBpZiAoY29udGFpbnMoW1R5cGUuT1JESU5BTCwgVHlwZS5OT01JTkFMXSwgZmllbGREZWZUeXBlKSkge1xuICAgIHJldHVybiBzcGVjaWZpZWRUeXBlID09PSB1bmRlZmluZWQgfHwgaGFzRGlzY3JldGVEb21haW4oc3BlY2lmaWVkVHlwZSk7XG4gIH0gZWxzZSBpZiAoZmllbGREZWZUeXBlID09PSBUeXBlLlRFTVBPUkFMKSB7XG4gICAgcmV0dXJuIGNvbnRhaW5zKFtTY2FsZVR5cGUuVElNRSwgU2NhbGVUeXBlLlVUQywgU2NhbGVUeXBlLlNFUVVFTlRJQUwsIHVuZGVmaW5lZF0sIHNwZWNpZmllZFR5cGUpO1xuICB9IGVsc2UgaWYgKGZpZWxkRGVmVHlwZSA9PT0gVHlwZS5RVUFOVElUQVRJVkUpIHtcbiAgICBpZiAoYmluKSB7XG4gICAgICByZXR1cm4gY29udGFpbnMoW1NjYWxlVHlwZS5CSU5fTElORUFSLCBTY2FsZVR5cGUuQklOX09SRElOQUwsIFNjYWxlVHlwZS5MSU5FQVJdLCBzcGVjaWZpZWRUeXBlKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRhaW5zKFtTY2FsZVR5cGUuTE9HLCBTY2FsZVR5cGUuUE9XLCBTY2FsZVR5cGUuU1FSVCwgU2NhbGVUeXBlLlFVQU5USUxFLCBTY2FsZVR5cGUuUVVBTlRJWkUsIFNjYWxlVHlwZS5MSU5FQVIsIFNjYWxlVHlwZS5TRVFVRU5USUFMLCB1bmRlZmluZWRdLCBzcGVjaWZpZWRUeXBlKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2hhbm5lbFN1cHBvcnRTY2FsZVR5cGUoY2hhbm5lbDogQ2hhbm5lbCwgc2NhbGVUeXBlOiBTY2FsZVR5cGUpOiBib29sZWFuIHtcbiAgc3dpdGNoIChjaGFubmVsKSB7XG4gICAgY2FzZSBDaGFubmVsLlg6XG4gICAgY2FzZSBDaGFubmVsLlk6XG4gICAgY2FzZSBDaGFubmVsLlNJWkU6IC8vIFRPRE86IHNpemUgYW5kIG9wYWNpdHkgY2FuIHN1cHBvcnQgb3JkaW5hbCB3aXRoIG1vcmUgbW9kaWZpY2F0aW9uXG4gICAgY2FzZSBDaGFubmVsLk9QQUNJVFk6XG4gICAgICAvLyBBbHRob3VnaCBpdCBnZW5lcmFsbHkgZG9lc24ndCBtYWtlIHNlbnNlIHRvIHVzZSBiYW5kIHdpdGggc2l6ZSBhbmQgb3BhY2l0eSxcbiAgICAgIC8vIGl0IGNhbiBhbHNvIHdvcmsgc2luY2Ugd2UgdXNlIGJhbmQ6IDAuNSB0byBnZXQgbWlkcG9pbnQuXG4gICAgICByZXR1cm4gaXNDb250aW51b3VzVG9Db250aW51b3VzKHNjYWxlVHlwZSkgfHwgY29udGFpbnMoWydiYW5kJywgJ3BvaW50J10sIHNjYWxlVHlwZSk7XG5cbiAgICBjYXNlIENoYW5uZWwuQ09MT1I6XG4gICAgY2FzZSBDaGFubmVsLkZJTEw6XG4gICAgY2FzZSBDaGFubmVsLlNUUk9LRTpcbiAgICAgIHJldHVybiBzY2FsZVR5cGUgIT09ICdiYW5kJzsgICAgLy8gYmFuZCBkb2VzIG5vdCBtYWtlIHNlbnNlIHdpdGggY29sb3JcblxuICAgIGNhc2UgQ2hhbm5lbC5TSEFQRTpcbiAgICAgIHJldHVybiBzY2FsZVR5cGUgPT09ICdvcmRpbmFsJzsgLy8gc2hhcGUgPSBsb29rdXAgb25seVxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0OiBpdCBzaG91bGQgbmV2ZXIgcmVhY2ggaGVyZSAqL1xuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdXBwb3J0ZWRTY2FsZVR5cGUoY2hhbm5lbDogQ2hhbm5lbCwgZmllbGREZWZUeXBlOiBUeXBlLCBiaW4/OiBib29sZWFuKSB7XG4gIHJldHVybiBTQ0FMRV9UWVBFX0lOREVYW2dlbmVyYXRlU2NhbGVUeXBlSW5kZXhLZXkoY2hhbm5lbCwgZmllbGREZWZUeXBlLCBiaW4pXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTY2FsZVR5cGVJbmRleCB7XG4gIFtjaGFubmVsOiBzdHJpbmddOiBTY2FsZVR5cGVbXTtcbn1cblxuLy8gZ2VuZXJhdGVzIFNjYWxlVHlwZUluZGV4IHdoZXJlIGtleXMgYXJlIGVuY29kaW5nIGNoYW5uZWxzIGFuZCB2YWx1ZXMgYXJlIGxpc3Qgb2YgdmFsaWQgU2NhbGVUeXBlc1xuZnVuY3Rpb24gZ2VuZXJhdGVTY2FsZVR5cGVJbmRleCgpIHtcbiAgY29uc3QgaW5kZXg6IFNjYWxlVHlwZUluZGV4ID0ge307XG4gIGZvciAoY29uc3QgY2hhbm5lbCBvZiBDSEFOTkVMUykge1xuICAgIGZvciAoY29uc3QgZmllbGREZWZUeXBlIG9mIGtleXMoVFlQRV9JTkRFWCkpIHtcbiAgICAgIGZvciAoY29uc3Qgc2NhbGVUeXBlIG9mIFNDQUxFX1RZUEVTKSB7XG4gICAgICAgIGZvciAoY29uc3QgYmluIG9mIFtmYWxzZSwgdHJ1ZV0pIHtcbiAgICAgICAgICBjb25zdCBrZXkgPSBnZW5lcmF0ZVNjYWxlVHlwZUluZGV4S2V5KGNoYW5uZWwsIGZpZWxkRGVmVHlwZSwgYmluKTtcbiAgICAgICAgICBpZiAoY2hhbm5lbFN1cHBvcnRTY2FsZVR5cGUoY2hhbm5lbCwgc2NhbGVUeXBlKSAmJiBzY2FsZVR5cGVTdXBwb3J0RGF0YVR5cGUoc2NhbGVUeXBlLCBmaWVsZERlZlR5cGUsIGJpbikpIHtcbiAgICAgICAgICAgIGluZGV4W2tleV0gPSBpbmRleFtrZXldIHx8IFtdO1xuICAgICAgICAgICAgaW5kZXhba2V5XS5wdXNoKHNjYWxlVHlwZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBpbmRleDtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVTY2FsZVR5cGVJbmRleEtleShjaGFubmVsOiBDaGFubmVsLCBmaWVsZERlZlR5cGU6IFR5cGUsIGJpbjogYm9vbGVhbikge1xuICBjb25zdCBrZXkgPSBjaGFubmVsICsgJ18nICsgZmllbGREZWZUeXBlO1xuICByZXR1cm4gYmluID8ga2V5ICsgJ19iaW4nIDoga2V5O1xufVxuIl19