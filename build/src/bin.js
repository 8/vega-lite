import { isBoolean } from 'vega-util';
import { COLOR, COLUMN, FILL, OPACITY, ROW, SHAPE, SIZE, STROKE } from './channel';
import { keys, varName } from './util';
export function binToString(bin) {
    if (isBoolean(bin)) {
        return 'bin';
    }
    return 'bin' + keys(bin).map(function (p) { return varName("_" + p + "_" + bin[p]); }).join('');
}
export function isBinParams(bin) {
    return bin && !isBoolean(bin);
}
export function autoMaxBins(channel) {
    switch (channel) {
        case ROW:
        case COLUMN:
        case SIZE:
        case COLOR:
        case FILL:
        case STROKE:
        case OPACITY:
        // Facets and Size shouldn't have too many bins
        // We choose 6 like shape to simplify the rule
        case SHAPE:
            return 6; // Vega's "shape" has 6 distinct values
        default:
            return 10;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Jpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ3BDLE9BQU8sRUFBVSxLQUFLLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQzFGLE9BQU8sRUFBQyxJQUFJLEVBQUUsT0FBTyxFQUFDLE1BQU0sUUFBUSxDQUFDO0FBNkRyQyxNQUFNLHNCQUFzQixHQUF3QjtJQUNsRCxJQUFJLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUNsQixPQUFPLEtBQUssQ0FBQztLQUNkO0lBQ0QsT0FBTyxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLE9BQU8sQ0FBQyxNQUFJLENBQUMsU0FBSSxHQUFHLENBQUMsQ0FBQyxDQUFHLENBQUMsRUFBMUIsQ0FBMEIsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN6RSxDQUFDO0FBRUQsTUFBTSxzQkFBc0IsR0FBd0I7SUFDbEQsT0FBTyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDaEMsQ0FBQztBQUVELE1BQU0sc0JBQXNCLE9BQWdCO0lBQzFDLFFBQVEsT0FBTyxFQUFFO1FBQ2YsS0FBSyxHQUFHLENBQUM7UUFDVCxLQUFLLE1BQU0sQ0FBQztRQUNaLEtBQUssSUFBSSxDQUFDO1FBQ1YsS0FBSyxLQUFLLENBQUM7UUFDWCxLQUFLLElBQUksQ0FBQztRQUNWLEtBQUssTUFBTSxDQUFDO1FBQ1osS0FBSyxPQUFPLENBQUM7UUFDWCwrQ0FBK0M7UUFDL0MsOENBQThDO1FBQ2hELEtBQUssS0FBSztZQUNSLE9BQU8sQ0FBQyxDQUFDLENBQUMsdUNBQXVDO1FBQ25EO1lBQ0UsT0FBTyxFQUFFLENBQUM7S0FDYjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2lzQm9vbGVhbn0gZnJvbSAndmVnYS11dGlsJztcbmltcG9ydCB7Q2hhbm5lbCwgQ09MT1IsIENPTFVNTiwgRklMTCwgT1BBQ0lUWSwgUk9XLCBTSEFQRSwgU0laRSwgU1RST0tFfSBmcm9tICcuL2NoYW5uZWwnO1xuaW1wb3J0IHtrZXlzLCB2YXJOYW1lfSBmcm9tICcuL3V0aWwnO1xuXG5cbmV4cG9ydCBpbnRlcmZhY2UgQmFzZUJpbiB7XG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIGJhc2UgdG8gdXNlIGZvciBhdXRvbWF0aWMgYmluIGRldGVybWluYXRpb24gKGRlZmF1bHQgaXMgYmFzZSAxMCkuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBgMTBgXG4gICAqXG4gICAqL1xuICBiYXNlPzogbnVtYmVyO1xuICAvKipcbiAgICogQW4gZXhhY3Qgc3RlcCBzaXplIHRvIHVzZSBiZXR3ZWVuIGJpbnMuXG4gICAqXG4gICAqIF9fTm90ZTpfXyBJZiBwcm92aWRlZCwgb3B0aW9ucyBzdWNoIGFzIG1heGJpbnMgd2lsbCBiZSBpZ25vcmVkLlxuICAgKi9cbiAgc3RlcD86IG51bWJlcjtcbiAgLyoqXG4gICAqIEFuIGFycmF5IG9mIGFsbG93YWJsZSBzdGVwIHNpemVzIHRvIGNob29zZSBmcm9tLlxuICAgKiBAbWluSXRlbXMgMVxuICAgKi9cbiAgc3RlcHM/OiBudW1iZXJbXTtcbiAgLyoqXG4gICAqIEEgbWluaW11bSBhbGxvd2FibGUgc3RlcCBzaXplIChwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBpbnRlZ2VyIHZhbHVlcykuXG4gICAqL1xuICBtaW5zdGVwPzogbnVtYmVyO1xuICAvKipcbiAgICogU2NhbGUgZmFjdG9ycyBpbmRpY2F0aW5nIGFsbG93YWJsZSBzdWJkaXZpc2lvbnMuIFRoZSBkZWZhdWx0IHZhbHVlIGlzIFs1LCAyXSwgd2hpY2ggaW5kaWNhdGVzIHRoYXQgZm9yIGJhc2UgMTAgbnVtYmVycyAodGhlIGRlZmF1bHQgYmFzZSksIHRoZSBtZXRob2QgbWF5IGNvbnNpZGVyIGRpdmlkaW5nIGJpbiBzaXplcyBieSA1IGFuZC9vciAyLiBGb3IgZXhhbXBsZSwgZm9yIGFuIGluaXRpYWwgc3RlcCBzaXplIG9mIDEwLCB0aGUgbWV0aG9kIGNhbiBjaGVjayBpZiBiaW4gc2l6ZXMgb2YgMiAoPSAxMC81KSwgNSAoPSAxMC8yKSwgb3IgMSAoPSAxMC8oNSoyKSkgbWlnaHQgYWxzbyBzYXRpc2Z5IHRoZSBnaXZlbiBjb25zdHJhaW50cy5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fIGBbNSwgMl1gXG4gICAqXG4gICAqIEBtaW5JdGVtcyAxXG4gICAqL1xuICBkaXZpZGU/OiBudW1iZXJbXTtcbiAgLyoqXG4gICAqIE1heGltdW0gbnVtYmVyIG9mIGJpbnMuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBgNmAgZm9yIGByb3dgLCBgY29sdW1uYCBhbmQgYHNoYXBlYCBjaGFubmVsczsgYDEwYCBmb3Igb3RoZXIgY2hhbm5lbHNcbiAgICpcbiAgICogQG1pbmltdW0gMlxuICAgKi9cbiAgbWF4Ymlucz86IG51bWJlcjtcbiAgLyoqXG4gICAqIElmIHRydWUgKHRoZSBkZWZhdWx0KSwgYXR0ZW1wdHMgdG8gbWFrZSB0aGUgYmluIGJvdW5kYXJpZXMgdXNlIGh1bWFuLWZyaWVuZGx5IGJvdW5kYXJpZXMsIHN1Y2ggYXMgbXVsdGlwbGVzIG9mIHRlbi5cbiAgICovXG4gIG5pY2U/OiBib29sZWFuO1xufVxuXG5cbi8qKlxuICogQmlubmluZyBwcm9wZXJ0aWVzIG9yIGJvb2xlYW4gZmxhZyBmb3IgZGV0ZXJtaW5pbmcgd2hldGhlciB0byBiaW4gZGF0YSBvciBub3QuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQmluUGFyYW1zIGV4dGVuZHMgQmFzZUJpbiB7XG4gIC8qKlxuICAgKiBBIHR3by1lbGVtZW50IChgW21pbiwgbWF4XWApIGFycmF5IGluZGljYXRpbmcgdGhlIHJhbmdlIG9mIGRlc2lyZWQgYmluIHZhbHVlcy5cbiAgICogQG1pbkl0ZW1zIDJcbiAgICogQG1heEl0ZW1zIDJcbiAgICovXG4gIGV4dGVudD86IG51bWJlcltdOyAgLy8gVmdCaW5UcmFuc2Zvcm0gdXNlcyBhIGRpZmZlcmVudCBleHRlbnQgc28gd2UgbmVlZCB0byBwdWxsIHRoaXMgb3V0LlxufVxuXG5leHBvcnQgZnVuY3Rpb24gYmluVG9TdHJpbmcoYmluOiBCaW5QYXJhbXMgfCBib29sZWFuKSB7XG4gIGlmIChpc0Jvb2xlYW4oYmluKSkge1xuICAgIHJldHVybiAnYmluJztcbiAgfVxuICByZXR1cm4gJ2JpbicgKyBrZXlzKGJpbikubWFwKHAgPT4gdmFyTmFtZShgXyR7cH1fJHtiaW5bcF19YCkpLmpvaW4oJycpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNCaW5QYXJhbXMoYmluOiBCaW5QYXJhbXMgfCBib29sZWFuKTogYmluIGlzIEJpblBhcmFtcyB7XG4gIHJldHVybiBiaW4gJiYgIWlzQm9vbGVhbihiaW4pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXV0b01heEJpbnMoY2hhbm5lbDogQ2hhbm5lbCk6IG51bWJlciB7XG4gIHN3aXRjaCAoY2hhbm5lbCkge1xuICAgIGNhc2UgUk9XOlxuICAgIGNhc2UgQ09MVU1OOlxuICAgIGNhc2UgU0laRTpcbiAgICBjYXNlIENPTE9SOlxuICAgIGNhc2UgRklMTDpcbiAgICBjYXNlIFNUUk9LRTpcbiAgICBjYXNlIE9QQUNJVFk6XG4gICAgICAvLyBGYWNldHMgYW5kIFNpemUgc2hvdWxkbid0IGhhdmUgdG9vIG1hbnkgYmluc1xuICAgICAgLy8gV2UgY2hvb3NlIDYgbGlrZSBzaGFwZSB0byBzaW1wbGlmeSB0aGUgcnVsZVxuICAgIGNhc2UgU0hBUEU6XG4gICAgICByZXR1cm4gNjsgLy8gVmVnYSdzIFwic2hhcGVcIiBoYXMgNiBkaXN0aW5jdCB2YWx1ZXNcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIDEwO1xuICB9XG59XG4iXX0=