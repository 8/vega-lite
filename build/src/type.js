/** Constants and utilities for data type */
/** Data type based on level of measurement */
export var Type;
(function (Type) {
    Type.QUANTITATIVE = 'quantitative';
    Type.ORDINAL = 'ordinal';
    Type.TEMPORAL = 'temporal';
    Type.NOMINAL = 'nominal';
    Type.LATITUDE = 'latitude';
    Type.LONGITUDE = 'longitude';
    Type.GEOJSON = 'geojson';
})(Type || (Type = {}));
export var TYPE_INDEX = {
    quantitative: 1,
    ordinal: 1,
    temporal: 1,
    nominal: 1,
    latitude: 1,
    longitude: 1,
    geojson: 1
};
export function isType(t) {
    return !!TYPE_INDEX[t];
}
export var QUANTITATIVE = Type.QUANTITATIVE;
export var ORDINAL = Type.ORDINAL;
export var TEMPORAL = Type.TEMPORAL;
export var NOMINAL = Type.NOMINAL;
export var GEOJSON = Type.GEOJSON;
/**
 * Get full, lowercase type name for a given type.
 * @param  type
 * @return Full type name.
 */
export function getFullName(type) {
    if (type) {
        type = type.toLowerCase();
        switch (type) {
            case 'q':
            case QUANTITATIVE:
                return 'quantitative';
            case 't':
            case TEMPORAL:
                return 'temporal';
            case 'o':
            case ORDINAL:
                return 'ordinal';
            case 'n':
            case NOMINAL:
                return 'nominal';
            case Type.LATITUDE:
                return 'latitude';
            case Type.LONGITUDE:
                return 'longitude';
            case GEOJSON:
                return 'geojson';
        }
    }
    // If we get invalid input, return undefined type.
    return undefined;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLDRDQUE0QztBQUM1Qyw4Q0FBOEM7QUFFOUMsTUFBTSxLQUFXLElBQUksQ0FTcEI7QUFURCxXQUFpQixJQUFJO0lBQ04saUJBQVksR0FBbUIsY0FBYyxDQUFDO0lBQzlDLFlBQU8sR0FBYyxTQUFTLENBQUM7SUFDL0IsYUFBUSxHQUFlLFVBQVUsQ0FBQztJQUNsQyxZQUFPLEdBQWMsU0FBUyxDQUFDO0lBRS9CLGFBQVEsR0FBZSxVQUFVLENBQUM7SUFDbEMsY0FBUyxHQUFnQixXQUFXLENBQUM7SUFDckMsWUFBTyxHQUFjLFNBQVMsQ0FBQztBQUM5QyxDQUFDLEVBVGdCLElBQUksS0FBSixJQUFJLFFBU3BCO0FBTUQsTUFBTSxDQUFDLElBQU0sVUFBVSxHQUFlO0lBQ3BDLFlBQVksRUFBRSxDQUFDO0lBQ2YsT0FBTyxFQUFFLENBQUM7SUFDVixRQUFRLEVBQUUsQ0FBQztJQUNYLE9BQU8sRUFBRSxDQUFDO0lBQ1YsUUFBUSxFQUFFLENBQUM7SUFDWCxTQUFTLEVBQUUsQ0FBQztJQUNaLE9BQU8sRUFBRSxDQUFDO0NBQ1gsQ0FBQztBQUVGLE1BQU0saUJBQWlCLENBQU07SUFDM0IsT0FBTyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3pCLENBQUM7QUFFRCxNQUFNLENBQUMsSUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztBQUM5QyxNQUFNLENBQUMsSUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUNwQyxNQUFNLENBQUMsSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztBQUN0QyxNQUFNLENBQUMsSUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUVwQyxNQUFNLENBQUMsSUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUVwQzs7OztHQUlHO0FBQ0gsTUFBTSxzQkFBc0IsSUFBaUI7SUFDM0MsSUFBSSxJQUFJLEVBQUU7UUFDUixJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzFCLFFBQVEsSUFBSSxFQUFFO1lBQ1osS0FBSyxHQUFHLENBQUM7WUFDVCxLQUFLLFlBQVk7Z0JBQ2YsT0FBTyxjQUFjLENBQUM7WUFDeEIsS0FBSyxHQUFHLENBQUM7WUFDVCxLQUFLLFFBQVE7Z0JBQ1gsT0FBTyxVQUFVLENBQUM7WUFDcEIsS0FBSyxHQUFHLENBQUM7WUFDVCxLQUFLLE9BQU87Z0JBQ1YsT0FBTyxTQUFTLENBQUM7WUFDbkIsS0FBSyxHQUFHLENBQUM7WUFDVCxLQUFLLE9BQU87Z0JBQ1YsT0FBTyxTQUFTLENBQUM7WUFDbkIsS0FBSyxJQUFJLENBQUMsUUFBUTtnQkFDaEIsT0FBTyxVQUFVLENBQUM7WUFDcEIsS0FBSyxJQUFJLENBQUMsU0FBUztnQkFDakIsT0FBTyxXQUFXLENBQUM7WUFDckIsS0FBSyxPQUFPO2dCQUNWLE9BQU8sU0FBUyxDQUFDO1NBQ3BCO0tBQ0Y7SUFDRCxrREFBa0Q7SUFDbEQsT0FBTyxTQUFTLENBQUM7QUFDbkIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RmxhZ30gZnJvbSAnLi91dGlsJztcbi8qKiBDb25zdGFudHMgYW5kIHV0aWxpdGllcyBmb3IgZGF0YSB0eXBlICovXG4vKiogRGF0YSB0eXBlIGJhc2VkIG9uIGxldmVsIG9mIG1lYXN1cmVtZW50ICovXG5cbmV4cG9ydCBuYW1lc3BhY2UgVHlwZSB7XG4gIGV4cG9ydCBjb25zdCBRVUFOVElUQVRJVkU6ICdxdWFudGl0YXRpdmUnID0gJ3F1YW50aXRhdGl2ZSc7XG4gIGV4cG9ydCBjb25zdCBPUkRJTkFMOiAnb3JkaW5hbCcgPSAnb3JkaW5hbCc7XG4gIGV4cG9ydCBjb25zdCBURU1QT1JBTDogJ3RlbXBvcmFsJyA9ICd0ZW1wb3JhbCc7XG4gIGV4cG9ydCBjb25zdCBOT01JTkFMOiAnbm9taW5hbCcgPSAnbm9taW5hbCc7XG5cbiAgZXhwb3J0IGNvbnN0IExBVElUVURFOiAnbGF0aXR1ZGUnID0gJ2xhdGl0dWRlJztcbiAgZXhwb3J0IGNvbnN0IExPTkdJVFVERTogJ2xvbmdpdHVkZScgPSAnbG9uZ2l0dWRlJztcbiAgZXhwb3J0IGNvbnN0IEdFT0pTT046ICdnZW9qc29uJyA9ICdnZW9qc29uJztcbn1cbmV4cG9ydCB0eXBlIEJhc2ljVHlwZSA9IHR5cGVvZiBUeXBlLlFVQU5USVRBVElWRSB8IHR5cGVvZiBUeXBlLk9SRElOQUwgfCB0eXBlb2YgVHlwZS5URU1QT1JBTCB8IHR5cGVvZiBUeXBlLk5PTUlOQUw7XG5leHBvcnQgdHlwZSBHZW9UeXBlID0gdHlwZW9mIFR5cGUuTEFUSVRVREUgfCB0eXBlb2YgVHlwZS5MT05HSVRVREUgfCB0eXBlb2YgVHlwZS5HRU9KU09OO1xuXG5leHBvcnQgdHlwZSBUeXBlID0gQmFzaWNUeXBlIHwgR2VvVHlwZTtcblxuZXhwb3J0IGNvbnN0IFRZUEVfSU5ERVg6IEZsYWc8VHlwZT4gPSB7XG4gIHF1YW50aXRhdGl2ZTogMSxcbiAgb3JkaW5hbDogMSxcbiAgdGVtcG9yYWw6IDEsXG4gIG5vbWluYWw6IDEsXG4gIGxhdGl0dWRlOiAxLFxuICBsb25naXR1ZGU6IDEsXG4gIGdlb2pzb246IDFcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1R5cGUodDogYW55KTogdCBpcyBUeXBlIHtcbiAgcmV0dXJuICEhVFlQRV9JTkRFWFt0XTtcbn1cblxuZXhwb3J0IGNvbnN0IFFVQU5USVRBVElWRSA9IFR5cGUuUVVBTlRJVEFUSVZFO1xuZXhwb3J0IGNvbnN0IE9SRElOQUwgPSBUeXBlLk9SRElOQUw7XG5leHBvcnQgY29uc3QgVEVNUE9SQUwgPSBUeXBlLlRFTVBPUkFMO1xuZXhwb3J0IGNvbnN0IE5PTUlOQUwgPSBUeXBlLk5PTUlOQUw7XG5cbmV4cG9ydCBjb25zdCBHRU9KU09OID0gVHlwZS5HRU9KU09OO1xuXG4vKipcbiAqIEdldCBmdWxsLCBsb3dlcmNhc2UgdHlwZSBuYW1lIGZvciBhIGdpdmVuIHR5cGUuXG4gKiBAcGFyYW0gIHR5cGVcbiAqIEByZXR1cm4gRnVsbCB0eXBlIG5hbWUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRGdWxsTmFtZSh0eXBlOiBUeXBlfHN0cmluZyk6IFR5cGUge1xuICBpZiAodHlwZSkge1xuICAgIHR5cGUgPSB0eXBlLnRvTG93ZXJDYXNlKCk7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlICdxJzpcbiAgICAgIGNhc2UgUVVBTlRJVEFUSVZFOlxuICAgICAgICByZXR1cm4gJ3F1YW50aXRhdGl2ZSc7XG4gICAgICBjYXNlICd0JzpcbiAgICAgIGNhc2UgVEVNUE9SQUw6XG4gICAgICAgIHJldHVybiAndGVtcG9yYWwnO1xuICAgICAgY2FzZSAnbyc6XG4gICAgICBjYXNlIE9SRElOQUw6XG4gICAgICAgIHJldHVybiAnb3JkaW5hbCc7XG4gICAgICBjYXNlICduJzpcbiAgICAgIGNhc2UgTk9NSU5BTDpcbiAgICAgICAgcmV0dXJuICdub21pbmFsJztcbiAgICAgIGNhc2UgVHlwZS5MQVRJVFVERTpcbiAgICAgICAgcmV0dXJuICdsYXRpdHVkZSc7XG4gICAgICBjYXNlIFR5cGUuTE9OR0lUVURFOlxuICAgICAgICByZXR1cm4gJ2xvbmdpdHVkZSc7XG4gICAgICBjYXNlIEdFT0pTT046XG4gICAgICAgIHJldHVybiAnZ2VvanNvbic7XG4gICAgfVxuICB9XG4gIC8vIElmIHdlIGdldCBpbnZhbGlkIGlucHV0LCByZXR1cm4gdW5kZWZpbmVkIHR5cGUuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG4iXX0=