import * as tslib_1 from "tslib";
/**
 * Utility files for producing Vega ValueRef for marks
 */
import { isArray, isString } from 'vega-util';
import { X, Y } from '../../channel';
import { isFieldDef, isValueDef, vgField, } from '../../fielddef';
import * as log from '../../log';
import { hasDiscreteDomain, ScaleType } from '../../scale';
import { QUANTITATIVE } from '../../type';
import { contains, some } from '../../util';
import { binRequiresRange, formatSignalRef } from '../common';
// TODO: we need to find a way to refactor these so that scaleName is a part of scale
// but that's complicated.  For now, this is a huge step moving forward.
/**
 * @return Vega ValueRef for stackable x or y
 */
export function stackable(channel, channelDef, scaleName, scale, stack, defaultRef) {
    if (isFieldDef(channelDef) && stack && channel === stack.fieldChannel) {
        // x or y use stack_end so that stacked line's point mark use stack_end too.
        return fieldRef(channelDef, scaleName, { suffix: 'end' });
    }
    return midPoint(channel, channelDef, scaleName, scale, stack, defaultRef);
}
/**
 * @return Vega ValueRef for stackable x2 or y2
 */
export function stackable2(channel, aFieldDef, a2fieldDef, scaleName, scale, stack, defaultRef) {
    if (isFieldDef(aFieldDef) && stack &&
        // If fieldChannel is X and channel is X2 (or Y and Y2)
        channel.charAt(0) === stack.fieldChannel.charAt(0)) {
        return fieldRef(aFieldDef, scaleName, { suffix: 'start' });
    }
    return midPoint(channel, a2fieldDef, scaleName, scale, stack, defaultRef);
}
/**
 * Value Ref for binned fields
 */
export function bin(fieldDef, scaleName, side, offset) {
    var binSuffix = side === 'start' ? undefined : 'end';
    return fieldRef(fieldDef, scaleName, { binSuffix: binSuffix }, offset ? { offset: offset } : {});
}
export function fieldRef(fieldDef, scaleName, opt, mixins) {
    var ref = tslib_1.__assign({}, (scaleName ? { scale: scaleName } : {}), { field: vgField(fieldDef, opt) });
    if (mixins) {
        return tslib_1.__assign({}, ref, mixins);
    }
    return ref;
}
export function bandRef(scaleName, band) {
    if (band === void 0) { band = true; }
    return {
        scale: scaleName,
        band: band
    };
}
/**
 * Signal that returns the middle of a bin. Should only be used with x and y.
 */
function binMidSignal(fieldDef, scaleName) {
    return {
        signal: "(" +
            ("scale(\"" + scaleName + "\", " + vgField(fieldDef, { expr: 'datum' }) + ")") +
            " + " +
            ("scale(\"" + scaleName + "\", " + vgField(fieldDef, { binSuffix: 'end', expr: 'datum' }) + ")") +
            ")/2"
    };
}
/**
 * @returns {VgValueRef} Value Ref for xc / yc or mid point for other channels.
 */
export function midPoint(channel, channelDef, scaleName, scale, stack, defaultRef) {
    // TODO: datum support
    if (channelDef) {
        /* istanbul ignore else */
        if (isFieldDef(channelDef)) {
            if (channelDef.bin) {
                // Use middle only for x an y to place marks in the center between start and end of the bin range.
                // We do not use the mid point for other channels (e.g. size) so that properties of legends and marks match.
                if (contains([X, Y], channel) && channelDef.type === QUANTITATIVE) {
                    if (stack && stack.impute) {
                        // For stack, we computed bin_mid so we can impute.
                        return fieldRef(channelDef, scaleName, { binSuffix: 'mid' });
                    }
                    // For non-stack, we can just calculate bin mid on the fly using signal.
                    return binMidSignal(channelDef, scaleName);
                }
                return fieldRef(channelDef, scaleName, binRequiresRange(channelDef, channel) ? { binSuffix: 'range' } : {});
            }
            if (scale) {
                var scaleType = scale.get('type');
                if (hasDiscreteDomain(scaleType)) {
                    if (scaleType === 'band') {
                        // For band, to get mid point, need to offset by half of the band
                        return fieldRef(channelDef, scaleName, { binSuffix: 'range' }, { band: 0.5 });
                    }
                    return fieldRef(channelDef, scaleName, { binSuffix: 'range' });
                }
            }
            return fieldRef(channelDef, scaleName, {}); // no need for bin suffix
        }
        else if (isValueDef(channelDef)) {
            return { value: channelDef.value };
        }
        // If channelDef is neither field def or value def, it's a condition-only def.
        // In such case, we will use default ref.
    }
    return defaultRef;
}
export function text(textDef, config) {
    // text
    if (textDef) {
        if (isFieldDef(textDef)) {
            return formatSignalRef(textDef, textDef.format, 'datum', config);
        }
        else if (isValueDef(textDef)) {
            return { value: textDef.value };
        }
    }
    return undefined;
}
export function mid(sizeRef) {
    return tslib_1.__assign({}, sizeRef, { mult: 0.5 });
}
/**
 * Whether the scale definitely includes zero in the domain
 */
function domainDefinitelyIncludeZero(scale) {
    if (scale.get('zero') !== false) {
        return true;
    }
    var domains = scale.domains;
    if (isArray(domains)) {
        return some(domains, function (d) { return isArray(d) && d.length === 2 && d[0] <= 0 && d[1] >= 0; });
    }
    return false;
}
export function getDefaultRef(defaultRef, channel, scaleName, scale, mark) {
    if (isString(defaultRef)) {
        if (scaleName) {
            var scaleType = scale.get('type');
            if (contains([ScaleType.LOG, ScaleType.TIME, ScaleType.UTC], scaleType)) {
                // Log scales cannot have zero.
                // Zero in time scale is arbitrary, and does not affect ratio.
                // (Time is an interval level of measurement, not ratio).
                // See https://en.wikipedia.org/wiki/Level_of_measurement for more info.
                if (mark === 'bar' || mark === 'area') {
                    log.warn(log.message.nonZeroScaleUsedWithLengthMark(mark, channel, { scaleType: scaleType }));
                }
            }
            else {
                if (domainDefinitelyIncludeZero(scale)) {
                    return {
                        scale: scaleName,
                        value: 0
                    };
                }
                if (mark === 'bar' || mark === 'area') {
                    log.warn(log.message.nonZeroScaleUsedWithLengthMark(mark, channel, { zeroFalse: scale.explicit.zero === false }));
                }
            }
        }
        if (defaultRef === 'zeroOrMin') {
            return channel === 'x' ? { value: 0 } : { field: { group: 'height' } };
        }
        else { // zeroOrMax
            return channel === 'x' ? { field: { group: 'width' } } : { value: 0 };
        }
    }
    return defaultRef;
}
//# sourceMappingURL=data:application/json;base64,