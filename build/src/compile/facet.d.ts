import { Channel } from '../channel';
import { Config } from '../config';
import { Facet } from '../facet';
import { FieldDef } from '../fielddef';
import { Scale } from '../scale';
import { FacetSpec } from '../spec';
import { VgData, VgEncodeEntry } from '../vega.schema';
import { Model } from './model';
export declare class FacetModel extends Model {
    readonly facet: Facet;
    readonly child: Model;
    readonly children: Model[];
    private readonly _spacing;
    constructor(spec: FacetSpec, parent: Model, parentGivenName: string, config: Config);
    private initFacet(facet);
    private initScalesAndSpacing(facet, config);
    private initAxis(facet, config, child);
    channelHasField(channel: Channel): boolean;
    fieldDef(channel: Channel): FieldDef;
    parseData(): void;
    parseSelection(): void;
    parseLayoutData(): void;
    parseScale(): void;
    parseMark(): void;
    parseAxis(): void;
    parseAxisGroup(): void;
    parseLegend(): void;
    assembleData(): VgData[];
    assembleParentGroupProperties(): any;
    assembleSignals(signals: any): any[];
    assembleSelectionData(data: VgData[]): VgData[];
    assembleLayout(layoutData: VgData[]): VgData[];
    assembleMarks(): VgEncodeEntry[];
    channels(): ("row" | "column")[];
    protected getMapping(): Facet;
    spacing(channel: Channel): any;
    isFacet(): boolean;
}
export declare function hasSubPlotWithXy(model: FacetModel): boolean;
export declare function spacing(scale: Scale, model: FacetModel, config: Config): number;
export declare function getSharedAxisGroup(model: FacetModel, channel: 'x' | 'y'): VgEncodeEntry;
