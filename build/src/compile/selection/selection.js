/// <reference path="../../../typings/vega-event-selector.d.ts" />
import * as tslib_1 from "tslib";
import { selector as parseSelector } from 'vega-event-selector';
import { isString, stringValue } from 'vega-util';
import { X, Y } from '../../channel';
import { warn } from '../../log';
import { SELECTION_ID } from '../../selection';
import { accessPath, logicalExpr, varName } from '../../util';
import { isFacetModel, isUnitModel } from '../model';
import intervalCompiler from './interval';
import multiCompiler from './multi';
import singleCompiler from './single';
import { forEachTransform } from './transforms/transforms';
export var STORE = '_store';
export var TUPLE = '_tuple';
export var MODIFY = '_modify';
export var SELECTION_DOMAIN = '_selection_domain_';
export function parseUnitSelection(model, selDefs) {
    var selCmpts = {};
    var selectionConfig = model.config.selection;
    var _loop_1 = function (name_1) {
        if (!selDefs.hasOwnProperty(name_1)) {
            return "continue";
        }
        var selDef = selDefs[name_1];
        var cfg = selectionConfig[selDef.type];
        // Set default values from config if a property hasn't been specified,
        // or if it is true. E.g., "translate": true should use the default
        // event handlers for translate. However, true may be a valid value for
        // a property (e.g., "nearest": true).
        for (var key in cfg) {
            // A selection should contain either `encodings` or `fields`, only use
            // default values for these two values if neither of them is specified.
            if ((key === 'encodings' && selDef.fields) || (key === 'fields' && selDef.encodings)) {
                continue;
            }
            if (key === 'mark') {
                selDef[key] = tslib_1.__assign({}, cfg[key], selDef[key]);
            }
            if (selDef[key] === undefined || selDef[key] === true) {
                selDef[key] = cfg[key] || selDef[key];
            }
        }
        name_1 = varName(name_1);
        var selCmpt = selCmpts[name_1] = tslib_1.__assign({}, selDef, { name: name_1, events: isString(selDef.on) ? parseSelector(selDef.on, 'scope') : selDef.on });
        forEachTransform(selCmpt, function (txCompiler) {
            if (txCompiler.parse) {
                txCompiler.parse(model, selDef, selCmpt);
            }
        });
    };
    for (var name_1 in selDefs) {
        _loop_1(name_1);
    }
    return selCmpts;
}
export function assembleUnitSelectionSignals(model, signals) {
    forEachSelection(model, function (selCmpt, selCompiler) {
        var name = selCmpt.name;
        var modifyExpr = selCompiler.modifyExpr(model, selCmpt);
        signals.push.apply(signals, selCompiler.signals(model, selCmpt));
        forEachTransform(selCmpt, function (txCompiler) {
            if (txCompiler.signals) {
                signals = txCompiler.signals(model, selCmpt, signals);
            }
            if (txCompiler.modifyExpr) {
                modifyExpr = txCompiler.modifyExpr(model, selCmpt, modifyExpr);
            }
        });
        signals.push({
            name: name + MODIFY,
            on: [{
                    events: { signal: name + TUPLE },
                    update: "modify(" + stringValue(selCmpt.name + STORE) + ", " + modifyExpr + ")"
                }]
        });
    });
    var facetModel = getFacetModel(model);
    if (signals.length && facetModel) {
        var name_2 = stringValue(facetModel.getName('cell'));
        signals.unshift({
            name: 'facet',
            value: {},
            on: [{
                    events: parseSelector('mousemove', 'scope'),
                    update: "isTuple(facet) ? facet : group(" + name_2 + ").datum"
                }]
        });
    }
    return signals;
}
export function assembleTopLevelSignals(model, signals) {
    var needsUnit = false;
    forEachSelection(model, function (selCmpt, selCompiler) {
        if (selCompiler.topLevelSignals) {
            signals = selCompiler.topLevelSignals(model, selCmpt, signals);
        }
        forEachTransform(selCmpt, function (txCompiler) {
            if (txCompiler.topLevelSignals) {
                signals = txCompiler.topLevelSignals(model, selCmpt, signals);
            }
        });
        needsUnit = true;
    });
    if (needsUnit) {
        var hasUnit = signals.filter(function (s) { return s.name === 'unit'; });
        if (!(hasUnit.length)) {
            signals.unshift({
                name: 'unit',
                value: {},
                on: [{ events: 'mousemove', update: 'isTuple(group()) ? group() : unit' }]
            });
        }
    }
    return signals;
}
export function assembleUnitSelectionData(model, data) {
    forEachSelection(model, function (selCmpt) {
        var contains = data.filter(function (d) { return d.name === selCmpt.name + STORE; });
        if (!contains.length) {
            data.push({ name: selCmpt.name + STORE });
        }
    });
    return data;
}
export function assembleUnitSelectionMarks(model, marks) {
    forEachSelection(model, function (selCmpt, selCompiler) {
        marks = selCompiler.marks ? selCompiler.marks(model, selCmpt, marks) : marks;
        forEachTransform(selCmpt, function (txCompiler) {
            if (txCompiler.marks) {
                marks = txCompiler.marks(model, selCmpt, marks);
            }
        });
    });
    return marks;
}
export function assembleLayerSelectionMarks(model, marks) {
    model.children.forEach(function (child) {
        if (isUnitModel(child)) {
            marks = assembleUnitSelectionMarks(child, marks);
        }
    });
    return marks;
}
export function selectionPredicate(model, selections, dfnode) {
    var stores = [];
    function expr(name) {
        var vname = varName(name);
        var selCmpt = model.getSelectionComponent(vname, name);
        var store = stringValue(vname + STORE);
        if (selCmpt.timeUnit) {
            var child = dfnode || model.component.data.raw;
            var tunode = selCmpt.timeUnit.clone();
            if (child.parent) {
                tunode.insertAsParentOf(child);
            }
            else {
                child.parent = tunode;
            }
        }
        if (selCmpt.empty !== 'none') {
            stores.push(store);
        }
        return compiler(selCmpt.type).predicate + ("(" + store + ", datum") +
            (selCmpt.resolve === 'global' ? ')' : ", " + stringValue(selCmpt.resolve) + ")");
    }
    var predicateStr = logicalExpr(selections, expr);
    return (stores.length
        ? '!(' + stores.map(function (s) { return "length(data(" + s + "))"; }).join(' || ') + ') || '
        : '') + ("(" + predicateStr + ")");
}
// Selections are parsed _after_ scales. If a scale domain is set to
// use a selection, the SELECTION_DOMAIN constant is used as the
// domainRaw.signal during scale.parse and then replaced with the necessary
// selection expression function during scale.assemble. To not pollute the
// type signatures to account for this setup, the selection domain definition
// is coerced to a string and appended to SELECTION_DOMAIN.
export function isRawSelectionDomain(domainRaw) {
    return domainRaw.signal.indexOf(SELECTION_DOMAIN) >= 0;
}
export function selectionScaleDomain(model, domainRaw) {
    var selDomain = JSON.parse(domainRaw.signal.replace(SELECTION_DOMAIN, ''));
    var name = varName(selDomain.selection);
    var selCmpt = model.component.selection && model.component.selection[name];
    if (selCmpt) {
        warn('Use "bind": "scales" to setup a binding for scales and selections within the same view.');
    }
    else {
        selCmpt = model.getSelectionComponent(name, selDomain.selection);
        if (!selDomain.encoding && !selDomain.field) {
            selDomain.field = selCmpt.project[0].field;
            if (selCmpt.project.length > 1) {
                warn('A "field" or "encoding" must be specified when using a selection as a scale domain. ' +
                    ("Using \"field\": " + stringValue(selDomain.field) + "."));
            }
        }
        return {
            signal: compiler(selCmpt.type).scaleDomain +
                ("(" + stringValue(name + STORE) + ", " + stringValue(selDomain.encoding || null) + ", ") +
                stringValue(selDomain.field || null) +
                (selCmpt.resolve === 'global' ? ')' : ", " + stringValue(selCmpt.resolve) + ")")
        };
    }
    return { signal: 'null' };
}
// Utility functions
function forEachSelection(model, cb) {
    var selections = model.component.selection;
    for (var name_3 in selections) {
        if (selections.hasOwnProperty(name_3)) {
            var sel = selections[name_3];
            cb(sel, compiler(sel.type));
        }
    }
}
function compiler(type) {
    switch (type) {
        case 'single':
            return singleCompiler;
        case 'multi':
            return multiCompiler;
        case 'interval':
            return intervalCompiler;
    }
    return null;
}
function getFacetModel(model) {
    var parent = model.parent;
    while (parent) {
        if (isFacetModel(parent)) {
            break;
        }
        parent = parent.parent;
    }
    return parent;
}
export function unitName(model) {
    var name = stringValue(model.name);
    var facet = getFacetModel(model);
    if (facet) {
        name += (facet.facet.row ? " + '_' + facet" + accessPath(facet.vgField('row')) : '')
            + (facet.facet.column ? " + '_' + facet" + accessPath(facet.vgField('column')) : '');
    }
    return name;
}
export function requiresSelectionId(model) {
    var identifier = false;
    forEachSelection(model, function (selCmpt) {
        identifier = identifier || selCmpt.project.some(function (proj) { return proj.field === SELECTION_ID; });
    });
    return identifier;
}
export function channelSignalName(selCmpt, channel, range) {
    var sgNames = selCmpt._signalNames || (selCmpt._signalNames = {});
    if (sgNames[channel] && sgNames[channel][range]) {
        return sgNames[channel][range];
    }
    sgNames[channel] = sgNames[channel] || {};
    var basename = varName(selCmpt.name + '_' + (range === 'visual' ? channel : selCmpt.fields[channel]));
    var name = basename;
    var counter = 1;
    while (sgNames[name]) {
        name = basename + "_" + counter++;
    }
    return (sgNames[name] = sgNames[channel][range] = name);
}
export function positionalProjections(selCmpt) {
    var x = null;
    var xi = null;
    var y = null;
    var yi = null;
    selCmpt.project.forEach(function (p, i) {
        if (p.channel === X) {
            x = p;
            xi = i;
        }
        else if (p.channel === Y) {
            y = p;
            yi = i;
        }
    });
    return { x: x, xi: xi, y: y, yi: yi };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvc2VsZWN0aW9uL3NlbGVjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxrRUFBa0U7O0FBRWxFLE9BQU8sRUFBQyxRQUFRLElBQUksYUFBYSxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFDOUQsT0FBTyxFQUFDLFFBQVEsRUFBRSxXQUFXLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDaEQsT0FBTyxFQUF3QixDQUFDLEVBQUUsQ0FBQyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzFELE9BQU8sRUFBQyxJQUFJLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFFL0IsT0FBTyxFQUFjLFlBQVksRUFBbUQsTUFBTSxpQkFBaUIsQ0FBQztBQUM1RyxPQUFPLEVBQUMsVUFBVSxFQUFRLFdBQVcsRUFBRSxPQUFPLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFNbEUsT0FBTyxFQUFDLFlBQVksRUFBRSxXQUFXLEVBQVEsTUFBTSxVQUFVLENBQUM7QUFFMUQsT0FBTyxnQkFBZ0IsTUFBTSxZQUFZLENBQUM7QUFDMUMsT0FBTyxhQUFhLE1BQU0sU0FBUyxDQUFDO0FBRXBDLE9BQU8sY0FBYyxNQUFNLFVBQVUsQ0FBQztBQUN0QyxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUd6RCxNQUFNLENBQUMsSUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDO0FBQzlCLE1BQU0sQ0FBQyxJQUFNLEtBQUssR0FBRyxRQUFRLENBQUM7QUFDOUIsTUFBTSxDQUFDLElBQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQztBQUNoQyxNQUFNLENBQUMsSUFBTSxnQkFBZ0IsR0FBRyxvQkFBb0IsQ0FBQztBQXVDckQsTUFBTSw2QkFBNkIsS0FBZ0IsRUFBRSxPQUEyQjtJQUM5RSxJQUFNLFFBQVEsR0FBNkIsRUFBRSxDQUFDO0lBQzlDLElBQU0sZUFBZSxHQUFHLEtB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LFVBQUMsQ0FBQyxFQUFFLENBQUM7UUFDM0IsSUFBSSxDQUFDLENBQUMsT0FBTyxLQUFLLENBQUMsRUFBRTtZQUNuQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ04sRUFBRSxHQUFHLENBQUMsQ0FBQztTQUNSO2FBQU0sSUFBSSxDQUFDLENBQUMsT0FBTyxLQUFLLENBQUMsRUFBRTtZQUMxQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ04sRUFBRSxHQUFHLENBQUMsQ0FBQztTQUNSO0lBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDSCxPQUFPLEVBQUMsQ0FBQyxHQUFBLEVBQUUsRUFBRSxJQUFBLEVBQUUsQ0FBQyxHQUFBLEVBQUUsRUFBRSxJQUFBLEVBQUMsQ0FBQztBQUN4QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uLy4uL3R5cGluZ3MvdmVnYS1ldmVudC1zZWxlY3Rvci5kLnRzXCIgLz5cblxuaW1wb3J0IHtzZWxlY3RvciBhcyBwYXJzZVNlbGVjdG9yfSBmcm9tICd2ZWdhLWV2ZW50LXNlbGVjdG9yJztcbmltcG9ydCB7aXNTdHJpbmcsIHN0cmluZ1ZhbHVlfSBmcm9tICd2ZWdhLXV0aWwnO1xuaW1wb3J0IHtDaGFubmVsLCBTY2FsZUNoYW5uZWwsIFgsIFl9IGZyb20gJy4uLy4uL2NoYW5uZWwnO1xuaW1wb3J0IHt3YXJufSBmcm9tICcuLi8uLi9sb2cnO1xuaW1wb3J0IHtMb2dpY2FsT3BlcmFuZH0gZnJvbSAnLi4vLi4vbG9naWNhbCc7XG5pbXBvcnQge0JydXNoQ29uZmlnLCBTRUxFQ1RJT05fSUQsIFNlbGVjdGlvbkRlZiwgU2VsZWN0aW9uUmVzb2x1dGlvbiwgU2VsZWN0aW9uVHlwZX0gZnJvbSAnLi4vLi4vc2VsZWN0aW9uJztcbmltcG9ydCB7YWNjZXNzUGF0aCwgRGljdCwgbG9naWNhbEV4cHIsIHZhck5hbWV9IGZyb20gJy4uLy4uL3V0aWwnO1xuaW1wb3J0IHtWZ0JpbmRpbmcsIFZnRGF0YSwgVmdFdmVudFN0cmVhbSwgVmdTaWduYWxSZWZ9IGZyb20gJy4uLy4uL3ZlZ2Euc2NoZW1hJztcbmltcG9ydCB7RGF0YUZsb3dOb2RlfSBmcm9tICcuLi9kYXRhL2RhdGFmbG93JztcbmltcG9ydCB7VGltZVVuaXROb2RlfSBmcm9tICcuLi9kYXRhL3RpbWV1bml0JztcbmltcG9ydCB7RmFjZXRNb2RlbH0gZnJvbSAnLi4vZmFjZXQnO1xuaW1wb3J0IHtMYXllck1vZGVsfSBmcm9tICcuLi9sYXllcic7XG5pbXBvcnQge2lzRmFjZXRNb2RlbCwgaXNVbml0TW9kZWwsIE1vZGVsfSBmcm9tICcuLi9tb2RlbCc7XG5pbXBvcnQge1VuaXRNb2RlbH0gZnJvbSAnLi4vdW5pdCc7XG5pbXBvcnQgaW50ZXJ2YWxDb21waWxlciBmcm9tICcuL2ludGVydmFsJztcbmltcG9ydCBtdWx0aUNvbXBpbGVyIGZyb20gJy4vbXVsdGknO1xuaW1wb3J0IHtTZWxlY3Rpb25Db21wb25lbnR9IGZyb20gJy4vc2VsZWN0aW9uJztcbmltcG9ydCBzaW5nbGVDb21waWxlciBmcm9tICcuL3NpbmdsZSc7XG5pbXBvcnQge2ZvckVhY2hUcmFuc2Zvcm19IGZyb20gJy4vdHJhbnNmb3Jtcy90cmFuc2Zvcm1zJztcblxuXG5leHBvcnQgY29uc3QgU1RPUkUgPSAnX3N0b3JlJztcbmV4cG9ydCBjb25zdCBUVVBMRSA9ICdfdHVwbGUnO1xuZXhwb3J0IGNvbnN0IE1PRElGWSA9ICdfbW9kaWZ5JztcbmV4cG9ydCBjb25zdCBTRUxFQ1RJT05fRE9NQUlOID0gJ19zZWxlY3Rpb25fZG9tYWluXyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VsZWN0aW9uQ29tcG9uZW50IHtcbiAgbmFtZTogc3RyaW5nO1xuICB0eXBlOiBTZWxlY3Rpb25UeXBlO1xuICBldmVudHM6IFZnRXZlbnRTdHJlYW07XG4gIC8vIHByZWRpY2F0ZT86IHN0cmluZztcbiAgYmluZD86ICdzY2FsZXMnIHwgVmdCaW5kaW5nIHwge1trZXk6IHN0cmluZ106IFZnQmluZGluZ307XG4gIHJlc29sdmU6IFNlbGVjdGlvblJlc29sdXRpb247XG4gIGVtcHR5OiAnYWxsJyB8ICdub25lJztcbiAgbWFyaz86IEJydXNoQ29uZmlnO1xuXG4gIF9zaWduYWxOYW1lczoge307XG5cbiAgLy8gVHJhbnNmb3Jtc1xuICBwcm9qZWN0PzogUHJvamVjdENvbXBvbmVudFtdO1xuICBmaWVsZHM/OiBhbnk7XG4gIHRpbWVVbml0PzogVGltZVVuaXROb2RlO1xuICBzY2FsZXM/OiBDaGFubmVsW107XG4gIHRvZ2dsZT86IGFueTtcbiAgdHJhbnNsYXRlPzogYW55O1xuICB6b29tPzogYW55O1xuICBuZWFyZXN0PzogYW55O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFByb2plY3RDb21wb25lbnQge1xuICBmaWVsZD86IHN0cmluZztcbiAgY2hhbm5lbD86IFNjYWxlQ2hhbm5lbDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTZWxlY3Rpb25Db21waWxlciB7XG4gIHNpZ25hbHM6IChtb2RlbDogVW5pdE1vZGVsLCBzZWxDbXB0OiBTZWxlY3Rpb25Db21wb25lbnQpID0+IGFueVtdO1xuICB0b3BMZXZlbFNpZ25hbHM/OiAobW9kZWw6IE1vZGVsLCBzZWxDbXB0OiBTZWxlY3Rpb25Db21wb25lbnQsIHNpZ25hbHM6IGFueVtdKSA9PiBhbnlbXTtcbiAgbW9kaWZ5RXhwcjogKG1vZGVsOiBVbml0TW9kZWwsIHNlbENtcHQ6IFNlbGVjdGlvbkNvbXBvbmVudCkgPT4gc3RyaW5nO1xuICBtYXJrcz86IChtb2RlbDogVW5pdE1vZGVsLCBzZWxDbXB0OlNlbGVjdGlvbkNvbXBvbmVudCwgbWFya3M6IGFueVtdKSA9PiBhbnlbXTtcbiAgcHJlZGljYXRlOiBzdHJpbmc7ICAvLyBWZWdhIGV4cHIgc3RyaW5nIHRvIGRldGVybWluZSBpbmNsdXNpb24gaW4gc2VsZWN0aW9uLlxuICBzY2FsZURvbWFpbjogc3RyaW5nOyAgLy8gVmVnYSBleHByIHN0cmluZyB0byBtYXRlcmlhbGl6ZSBhIHNjYWxlIGRvbWFpbi5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVW5pdFNlbGVjdGlvbihtb2RlbDogVW5pdE1vZGVsLCBzZWxEZWZzOiBEaWN0PFNlbGVjdGlvbkRlZj4pIHtcbiAgY29uc3Qgc2VsQ21wdHM6IERpY3Q8U2VsZWN0aW9uQ29tcG9uZW50PiA9IHt9O1xuICBjb25zdCBzZWxlY3Rpb25Db25maWcgPSBtb2RlbC5jb25maWcuc2VsZWN0aW9uO1xuXG4gIGZvciAobGV0IG5hbWUgaW4gc2VsRGVmcykge1xuICAgIGlmICghc2VsRGVmcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgY29uc3Qgc2VsRGVmID0gc2VsRGVmc1tuYW1lXTtcbiAgICBjb25zdCBjZmcgPSBzZWxlY3Rpb25Db25maWdbc2VsRGVmLnR5cGVdO1xuXG4gICAgLy8gU2V0IGRlZmF1bHQgdmFsdWVzIGZyb20gY29uZmlnIGlmIGEgcHJvcGVydHkgaGFzbid0IGJlZW4gc3BlY2lmaWVkLFxuICAgIC8vIG9yIGlmIGl0IGlzIHRydWUuIEUuZy4sIFwidHJhbnNsYXRlXCI6IHRydWUgc2hvdWxkIHVzZSB0aGUgZGVmYXVsdFxuICAgIC8vIGV2ZW50IGhhbmRsZXJzIGZvciB0cmFuc2xhdGUuIEhvd2V2ZXIsIHRydWUgbWF5IGJlIGEgdmFsaWQgdmFsdWUgZm9yXG4gICAgLy8gYSBwcm9wZXJ0eSAoZS5nLiwgXCJuZWFyZXN0XCI6IHRydWUpLlxuICAgIGZvciAoY29uc3Qga2V5IGluIGNmZykge1xuICAgICAgLy8gQSBzZWxlY3Rpb24gc2hvdWxkIGNvbnRhaW4gZWl0aGVyIGBlbmNvZGluZ3NgIG9yIGBmaWVsZHNgLCBvbmx5IHVzZVxuICAgICAgLy8gZGVmYXVsdCB2YWx1ZXMgZm9yIHRoZXNlIHR3byB2YWx1ZXMgaWYgbmVpdGhlciBvZiB0aGVtIGlzIHNwZWNpZmllZC5cbiAgICAgIGlmICgoa2V5ID09PSAnZW5jb2RpbmdzJyAmJiBzZWxEZWYuZmllbGRzKSB8fCAoa2V5ID09PSAnZmllbGRzJyAmJiBzZWxEZWYuZW5jb2RpbmdzKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGtleSA9PT0gJ21hcmsnKSB7XG4gICAgICAgIHNlbERlZltrZXldID0gey4uLmNmZ1trZXldLCAuLi5zZWxEZWZba2V5XX07XG4gICAgICB9XG5cbiAgICAgIGlmIChzZWxEZWZba2V5XSA9PT0gdW5kZWZpbmVkIHx8IHNlbERlZltrZXldID09PSB0cnVlKSB7XG4gICAgICAgIHNlbERlZltrZXldID0gY2ZnW2tleV0gfHwgc2VsRGVmW2tleV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgbmFtZSA9IHZhck5hbWUobmFtZSk7XG4gICAgY29uc3Qgc2VsQ21wdCA9IHNlbENtcHRzW25hbWVdID0ge1xuICAgICAgLi4uc2VsRGVmLFxuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIGV2ZW50czogaXNTdHJpbmcoc2VsRGVmLm9uKSA/IHBhcnNlU2VsZWN0b3Ioc2VsRGVmLm9uLCAnc2NvcGUnKSA6IHNlbERlZi5vbixcbiAgICB9IGFzIFNlbGVjdGlvbkNvbXBvbmVudDtcblxuICAgIGZvckVhY2hUcmFuc2Zvcm0oc2VsQ21wdCwgdHhDb21waWxlciA9PiB7XG4gICAgICBpZiAodHhDb21waWxlci5wYXJzZSkge1xuICAgICAgICB0eENvbXBpbGVyLnBhcnNlKG1vZGVsLCBzZWxEZWYsIHNlbENtcHQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHNlbENtcHRzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNzZW1ibGVVbml0U2VsZWN0aW9uU2lnbmFscyhtb2RlbDogVW5pdE1vZGVsLCBzaWduYWxzOiBhbnlbXSkge1xuICBmb3JFYWNoU2VsZWN0aW9uKG1vZGVsLCAoc2VsQ21wdCwgc2VsQ29tcGlsZXIpID0+IHtcbiAgICBjb25zdCBuYW1lID0gc2VsQ21wdC5uYW1lO1xuICAgIGxldCBtb2RpZnlFeHByID0gc2VsQ29tcGlsZXIubW9kaWZ5RXhwcihtb2RlbCwgc2VsQ21wdCk7XG5cbiAgICBzaWduYWxzLnB1c2guYXBwbHkoc2lnbmFscywgc2VsQ29tcGlsZXIuc2lnbmFscyhtb2RlbCwgc2VsQ21wdCkpO1xuXG4gICAgZm9yRWFjaFRyYW5zZm9ybShzZWxDbXB0LCB0eENvbXBpbGVyID0+IHtcbiAgICAgIGlmICh0eENvbXBpbGVyLnNpZ25hbHMpIHtcbiAgICAgICAgc2lnbmFscyA9IHR4Q29tcGlsZXIuc2lnbmFscyhtb2RlbCwgc2VsQ21wdCwgc2lnbmFscyk7XG4gICAgICB9XG4gICAgICBpZiAodHhDb21waWxlci5tb2RpZnlFeHByKSB7XG4gICAgICAgIG1vZGlmeUV4cHIgPSB0eENvbXBpbGVyLm1vZGlmeUV4cHIobW9kZWwsIHNlbENtcHQsIG1vZGlmeUV4cHIpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgc2lnbmFscy5wdXNoKHtcbiAgICAgIG5hbWU6IG5hbWUgKyBNT0RJRlksXG4gICAgICBvbjogW3tcbiAgICAgICAgZXZlbnRzOiB7c2lnbmFsOiBuYW1lICsgVFVQTEV9LFxuICAgICAgICB1cGRhdGU6IGBtb2RpZnkoJHtzdHJpbmdWYWx1ZShzZWxDbXB0Lm5hbWUgKyBTVE9SRSl9LCAke21vZGlmeUV4cHJ9KWBcbiAgICAgIH1dXG4gICAgfSk7XG4gIH0pO1xuXG4gIGNvbnN0IGZhY2V0TW9kZWwgPSBnZXRGYWNldE1vZGVsKG1vZGVsKTtcbiAgaWYgKHNpZ25hbHMubGVuZ3RoICYmIGZhY2V0TW9kZWwpIHtcbiAgICBjb25zdCBuYW1lID0gc3RyaW5nVmFsdWUoZmFjZXRNb2RlbC5nZXROYW1lKCdjZWxsJykpO1xuICAgIHNpZ25hbHMudW5zaGlmdCh7XG4gICAgICBuYW1lOiAnZmFjZXQnLFxuICAgICAgdmFsdWU6IHt9LFxuICAgICAgb246IFt7XG4gICAgICAgIGV2ZW50czogcGFyc2VTZWxlY3RvcignbW91c2Vtb3ZlJywgJ3Njb3BlJyksXG4gICAgICAgIHVwZGF0ZTogYGlzVHVwbGUoZmFjZXQpID8gZmFjZXQgOiBncm91cCgke25hbWV9KS5kYXR1bWBcbiAgICAgIH1dXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gc2lnbmFscztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VtYmxlVG9wTGV2ZWxTaWduYWxzKG1vZGVsOiBVbml0TW9kZWwsIHNpZ25hbHM6IGFueVtdKSB7XG4gIGxldCBuZWVkc1VuaXQgPSBmYWxzZTtcbiAgZm9yRWFjaFNlbGVjdGlvbihtb2RlbCwgKHNlbENtcHQsIHNlbENvbXBpbGVyKSA9PiB7XG4gICAgaWYgKHNlbENvbXBpbGVyLnRvcExldmVsU2lnbmFscykge1xuICAgICAgc2lnbmFscyA9IHNlbENvbXBpbGVyLnRvcExldmVsU2lnbmFscyhtb2RlbCwgc2VsQ21wdCwgc2lnbmFscyk7XG4gICAgfVxuXG4gICAgZm9yRWFjaFRyYW5zZm9ybShzZWxDbXB0LCB0eENvbXBpbGVyID0+IHtcbiAgICAgIGlmICh0eENvbXBpbGVyLnRvcExldmVsU2lnbmFscykge1xuICAgICAgICBzaWduYWxzID0gdHhDb21waWxlci50b3BMZXZlbFNpZ25hbHMobW9kZWwsIHNlbENtcHQsIHNpZ25hbHMpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgbmVlZHNVbml0ID0gdHJ1ZTtcbiAgfSk7XG5cbiAgaWYgKG5lZWRzVW5pdCkge1xuICAgIGNvbnN0IGhhc1VuaXQgPSBzaWduYWxzLmZpbHRlcigocykgPT4gcy5uYW1lID09PSAndW5pdCcpO1xuICAgIGlmICghKGhhc1VuaXQubGVuZ3RoKSkge1xuICAgICAgc2lnbmFscy51bnNoaWZ0KHtcbiAgICAgICAgbmFtZTogJ3VuaXQnLFxuICAgICAgICB2YWx1ZToge30sXG4gICAgICAgIG9uOiBbe2V2ZW50czogJ21vdXNlbW92ZScsIHVwZGF0ZTogJ2lzVHVwbGUoZ3JvdXAoKSkgPyBncm91cCgpIDogdW5pdCd9XVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHNpZ25hbHM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlbWJsZVVuaXRTZWxlY3Rpb25EYXRhKG1vZGVsOiBVbml0TW9kZWwsIGRhdGE6IFZnRGF0YVtdKTogVmdEYXRhW10ge1xuICBmb3JFYWNoU2VsZWN0aW9uKG1vZGVsLCBzZWxDbXB0ID0+IHtcbiAgICBjb25zdCBjb250YWlucyA9IGRhdGEuZmlsdGVyKChkKSA9PiBkLm5hbWUgPT09IHNlbENtcHQubmFtZSArIFNUT1JFKTtcbiAgICBpZiAoIWNvbnRhaW5zLmxlbmd0aCkge1xuICAgICAgZGF0YS5wdXNoKHtuYW1lOiBzZWxDbXB0Lm5hbWUgKyBTVE9SRX0pO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlbWJsZVVuaXRTZWxlY3Rpb25NYXJrcyhtb2RlbDogVW5pdE1vZGVsLCBtYXJrczogYW55W10pOiBhbnlbXSB7XG4gIGZvckVhY2hTZWxlY3Rpb24obW9kZWwsIChzZWxDbXB0LCBzZWxDb21waWxlcikgPT4ge1xuICAgIG1hcmtzID0gc2VsQ29tcGlsZXIubWFya3MgPyBzZWxDb21waWxlci5tYXJrcyhtb2RlbCwgc2VsQ21wdCwgbWFya3MpIDogbWFya3M7XG4gICAgZm9yRWFjaFRyYW5zZm9ybShzZWxDbXB0LCAodHhDb21waWxlcikgPT4ge1xuICAgICAgaWYgKHR4Q29tcGlsZXIubWFya3MpIHtcbiAgICAgICAgbWFya3MgPSB0eENvbXBpbGVyLm1hcmtzKG1vZGVsLCBzZWxDbXB0LCBtYXJrcyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuXG4gIHJldHVybiBtYXJrcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VtYmxlTGF5ZXJTZWxlY3Rpb25NYXJrcyhtb2RlbDogTGF5ZXJNb2RlbCwgbWFya3M6IGFueVtdKTogYW55W10ge1xuICBtb2RlbC5jaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICBpZiAoaXNVbml0TW9kZWwoY2hpbGQpKSB7XG4gICAgICBtYXJrcyA9IGFzc2VtYmxlVW5pdFNlbGVjdGlvbk1hcmtzKGNoaWxkLCBtYXJrcyk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gbWFya3M7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZWxlY3Rpb25QcmVkaWNhdGUobW9kZWw6IE1vZGVsLCBzZWxlY3Rpb25zOiBMb2dpY2FsT3BlcmFuZDxzdHJpbmc+LCBkZm5vZGU/OiBEYXRhRmxvd05vZGUpOiBzdHJpbmcge1xuICBjb25zdCBzdG9yZXM6IHN0cmluZ1tdID0gW107XG4gIGZ1bmN0aW9uIGV4cHIobmFtZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCB2bmFtZSA9IHZhck5hbWUobmFtZSk7XG4gICAgY29uc3Qgc2VsQ21wdCA9IG1vZGVsLmdldFNlbGVjdGlvbkNvbXBvbmVudCh2bmFtZSwgbmFtZSk7XG4gICAgY29uc3Qgc3RvcmUgPSBzdHJpbmdWYWx1ZSh2bmFtZSArIFNUT1JFKTtcblxuICAgIGlmIChzZWxDbXB0LnRpbWVVbml0KSB7XG4gICAgICBjb25zdCBjaGlsZCA9IGRmbm9kZSB8fCBtb2RlbC5jb21wb25lbnQuZGF0YS5yYXc7XG4gICAgICBjb25zdCB0dW5vZGUgPSBzZWxDbXB0LnRpbWVVbml0LmNsb25lKCk7XG4gICAgICBpZiAoY2hpbGQucGFyZW50KSB7XG4gICAgICAgIHR1bm9kZS5pbnNlcnRBc1BhcmVudE9mKGNoaWxkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNoaWxkLnBhcmVudCA9IHR1bm9kZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc2VsQ21wdC5lbXB0eSAhPT0gJ25vbmUnKSB7XG4gICAgICBzdG9yZXMucHVzaChzdG9yZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbXBpbGVyKHNlbENtcHQudHlwZSkucHJlZGljYXRlICsgYCgke3N0b3JlfSwgZGF0dW1gICtcbiAgICAgIChzZWxDbXB0LnJlc29sdmUgPT09ICdnbG9iYWwnID8gJyknIDogYCwgJHtzdHJpbmdWYWx1ZShzZWxDbXB0LnJlc29sdmUpfSlgKTtcbiAgfVxuXG4gIGNvbnN0IHByZWRpY2F0ZVN0ciA9IGxvZ2ljYWxFeHByKHNlbGVjdGlvbnMsIGV4cHIpO1xuICByZXR1cm4gKHN0b3Jlcy5sZW5ndGhcbiAgICA/ICchKCcgKyBzdG9yZXMubWFwKChzKSA9PiBgbGVuZ3RoKGRhdGEoJHtzfSkpYCkuam9pbignIHx8ICcpICsgJykgfHwgJ1xuICAgIDogJydcbiAgKSArIGAoJHtwcmVkaWNhdGVTdHJ9KWA7XG59XG5cbi8vIFNlbGVjdGlvbnMgYXJlIHBhcnNlZCBfYWZ0ZXJfIHNjYWxlcy4gSWYgYSBzY2FsZSBkb21haW4gaXMgc2V0IHRvXG4vLyB1c2UgYSBzZWxlY3Rpb24sIHRoZSBTRUxFQ1RJT05fRE9NQUlOIGNvbnN0YW50IGlzIHVzZWQgYXMgdGhlXG4vLyBkb21haW5SYXcuc2lnbmFsIGR1cmluZyBzY2FsZS5wYXJzZSBhbmQgdGhlbiByZXBsYWNlZCB3aXRoIHRoZSBuZWNlc3Nhcnlcbi8vIHNlbGVjdGlvbiBleHByZXNzaW9uIGZ1bmN0aW9uIGR1cmluZyBzY2FsZS5hc3NlbWJsZS4gVG8gbm90IHBvbGx1dGUgdGhlXG4vLyB0eXBlIHNpZ25hdHVyZXMgdG8gYWNjb3VudCBmb3IgdGhpcyBzZXR1cCwgdGhlIHNlbGVjdGlvbiBkb21haW4gZGVmaW5pdGlvblxuLy8gaXMgY29lcmNlZCB0byBhIHN0cmluZyBhbmQgYXBwZW5kZWQgdG8gU0VMRUNUSU9OX0RPTUFJTi5cbmV4cG9ydCBmdW5jdGlvbiBpc1Jhd1NlbGVjdGlvbkRvbWFpbihkb21haW5SYXc6IFZnU2lnbmFsUmVmKSB7XG4gIHJldHVybiBkb21haW5SYXcuc2lnbmFsLmluZGV4T2YoU0VMRUNUSU9OX0RPTUFJTikgPj0gMDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzZWxlY3Rpb25TY2FsZURvbWFpbihtb2RlbDogTW9kZWwsIGRvbWFpblJhdzogVmdTaWduYWxSZWYpOiBWZ1NpZ25hbFJlZiB7XG4gIGNvbnN0IHNlbERvbWFpbiA9IEpTT04ucGFyc2UoZG9tYWluUmF3LnNpZ25hbC5yZXBsYWNlKFNFTEVDVElPTl9ET01BSU4sICcnKSk7XG4gIGNvbnN0IG5hbWUgPSB2YXJOYW1lKHNlbERvbWFpbi5zZWxlY3Rpb24pO1xuXG4gIGxldCBzZWxDbXB0ID0gbW9kZWwuY29tcG9uZW50LnNlbGVjdGlvbiAmJiBtb2RlbC5jb21wb25lbnQuc2VsZWN0aW9uW25hbWVdO1xuICBpZiAoc2VsQ21wdCkge1xuICAgIHdhcm4oJ1VzZSBcImJpbmRcIjogXCJzY2FsZXNcIiB0byBzZXR1cCBhIGJpbmRpbmcgZm9yIHNjYWxlcyBhbmQgc2VsZWN0aW9ucyB3aXRoaW4gdGhlIHNhbWUgdmlldy4nKTtcbiAgfSBlbHNlIHtcbiAgICBzZWxDbXB0ID0gbW9kZWwuZ2V0U2VsZWN0aW9uQ29tcG9uZW50KG5hbWUsIHNlbERvbWFpbi5zZWxlY3Rpb24pO1xuICAgIGlmICghc2VsRG9tYWluLmVuY29kaW5nICYmICFzZWxEb21haW4uZmllbGQpIHtcbiAgICAgIHNlbERvbWFpbi5maWVsZCA9IHNlbENtcHQucHJvamVjdFswXS5maWVsZDtcbiAgICAgIGlmIChzZWxDbXB0LnByb2plY3QubGVuZ3RoID4gMSkge1xuICAgICAgICB3YXJuKCdBIFwiZmllbGRcIiBvciBcImVuY29kaW5nXCIgbXVzdCBiZSBzcGVjaWZpZWQgd2hlbiB1c2luZyBhIHNlbGVjdGlvbiBhcyBhIHNjYWxlIGRvbWFpbi4gJyArXG4gICAgICAgIGBVc2luZyBcImZpZWxkXCI6ICR7c3RyaW5nVmFsdWUoc2VsRG9tYWluLmZpZWxkKX0uYCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBzaWduYWw6IGNvbXBpbGVyKHNlbENtcHQudHlwZSkuc2NhbGVEb21haW4gK1xuICAgICAgICBgKCR7c3RyaW5nVmFsdWUobmFtZSArIFNUT1JFKX0sICR7c3RyaW5nVmFsdWUoc2VsRG9tYWluLmVuY29kaW5nIHx8IG51bGwpfSwgYCArXG4gICAgICAgICAgc3RyaW5nVmFsdWUoc2VsRG9tYWluLmZpZWxkIHx8IG51bGwpICtcbiAgICAgICAgICAoc2VsQ21wdC5yZXNvbHZlID09PSAnZ2xvYmFsJyA/ICcpJyA6IGAsICR7c3RyaW5nVmFsdWUoc2VsQ21wdC5yZXNvbHZlKX0pYClcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtzaWduYWw6ICdudWxsJ307XG59XG5cbi8vIFV0aWxpdHkgZnVuY3Rpb25zXG5cbmZ1bmN0aW9uIGZvckVhY2hTZWxlY3Rpb24obW9kZWw6IE1vZGVsLCBjYjogKHNlbENtcHQ6IFNlbGVjdGlvbkNvbXBvbmVudCwgc2VsQ29tcGlsZXI6IFNlbGVjdGlvbkNvbXBpbGVyKSA9PiB2b2lkKSB7XG4gIGNvbnN0IHNlbGVjdGlvbnMgPSBtb2RlbC5jb21wb25lbnQuc2VsZWN0aW9uO1xuICBmb3IgKGNvbnN0IG5hbWUgaW4gc2VsZWN0aW9ucykge1xuICAgIGlmIChzZWxlY3Rpb25zLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICBjb25zdCBzZWwgPSBzZWxlY3Rpb25zW25hbWVdO1xuICAgICAgY2Ioc2VsLCBjb21waWxlcihzZWwudHlwZSkpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjb21waWxlcih0eXBlOiBTZWxlY3Rpb25UeXBlKTogU2VsZWN0aW9uQ29tcGlsZXIge1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdzaW5nbGUnOlxuICAgICAgcmV0dXJuIHNpbmdsZUNvbXBpbGVyO1xuICAgIGNhc2UgJ211bHRpJzpcbiAgICAgIHJldHVybiBtdWx0aUNvbXBpbGVyO1xuICAgIGNhc2UgJ2ludGVydmFsJzpcbiAgICAgIHJldHVybiBpbnRlcnZhbENvbXBpbGVyO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBnZXRGYWNldE1vZGVsKG1vZGVsOiBNb2RlbCk6IEZhY2V0TW9kZWwge1xuICBsZXQgcGFyZW50ID0gbW9kZWwucGFyZW50O1xuICB3aGlsZSAocGFyZW50KSB7XG4gICAgaWYgKGlzRmFjZXRNb2RlbChwYXJlbnQpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgfVxuXG4gIHJldHVybiBwYXJlbnQgYXMgRmFjZXRNb2RlbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVuaXROYW1lKG1vZGVsOiBNb2RlbCkge1xuICBsZXQgbmFtZSA9IHN0cmluZ1ZhbHVlKG1vZGVsLm5hbWUpO1xuICBjb25zdCBmYWNldCA9IGdldEZhY2V0TW9kZWwobW9kZWwpO1xuICBpZiAoZmFjZXQpIHtcbiAgICBuYW1lICs9IChmYWNldC5mYWNldC5yb3cgPyBgICsgJ18nICsgZmFjZXQke2FjY2Vzc1BhdGgoZmFjZXQudmdGaWVsZCgncm93JykpfWAgOiAnJylcbiAgICAgICsgKGZhY2V0LmZhY2V0LmNvbHVtbiA/IGAgKyAnXycgKyBmYWNldCR7YWNjZXNzUGF0aChmYWNldC52Z0ZpZWxkKCdjb2x1bW4nKSl9YCA6ICcnKTtcbiAgfVxuICByZXR1cm4gbmFtZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlcXVpcmVzU2VsZWN0aW9uSWQobW9kZWw6IE1vZGVsKSB7XG4gIGxldCBpZGVudGlmaWVyID0gZmFsc2U7XG4gIGZvckVhY2hTZWxlY3Rpb24obW9kZWwsIChzZWxDbXB0KSA9PiB7XG4gICAgaWRlbnRpZmllciA9IGlkZW50aWZpZXIgfHwgc2VsQ21wdC5wcm9qZWN0LnNvbWUoKHByb2opID0+IHByb2ouZmllbGQgPT09IFNFTEVDVElPTl9JRCk7XG4gIH0pO1xuICByZXR1cm4gaWRlbnRpZmllcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNoYW5uZWxTaWduYWxOYW1lKHNlbENtcHQ6IFNlbGVjdGlvbkNvbXBvbmVudCwgY2hhbm5lbDogQ2hhbm5lbCwgcmFuZ2U6ICd2aXN1YWwnIHwgJ2RhdGEnKSB7XG4gIGNvbnN0IHNnTmFtZXMgPSBzZWxDbXB0Ll9zaWduYWxOYW1lcyB8fCAoc2VsQ21wdC5fc2lnbmFsTmFtZXMgPSB7fSk7XG4gIGlmIChzZ05hbWVzW2NoYW5uZWxdICYmIHNnTmFtZXNbY2hhbm5lbF1bcmFuZ2VdKSB7XG4gICAgcmV0dXJuIHNnTmFtZXNbY2hhbm5lbF1bcmFuZ2VdO1xuICB9XG5cbiAgc2dOYW1lc1tjaGFubmVsXSA9IHNnTmFtZXNbY2hhbm5lbF0gfHwge307XG4gIGNvbnN0IGJhc2VuYW1lID0gdmFyTmFtZShzZWxDbXB0Lm5hbWUgKyAnXycgKyAocmFuZ2UgPT09ICd2aXN1YWwnID8gY2hhbm5lbCA6IHNlbENtcHQuZmllbGRzW2NoYW5uZWxdKSk7XG4gIGxldCBuYW1lID0gYmFzZW5hbWU7XG4gIGxldCBjb3VudGVyID0gMTtcbiAgd2hpbGUgKHNnTmFtZXNbbmFtZV0pIHtcbiAgICBuYW1lID0gYCR7YmFzZW5hbWV9XyR7Y291bnRlcisrfWA7XG4gIH1cblxuICByZXR1cm4gKHNnTmFtZXNbbmFtZV0gPSBzZ05hbWVzW2NoYW5uZWxdW3JhbmdlXSA9IG5hbWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcG9zaXRpb25hbFByb2plY3Rpb25zKHNlbENtcHQ6IFNlbGVjdGlvbkNvbXBvbmVudCkge1xuICBsZXQgeDpQcm9qZWN0Q29tcG9uZW50ID0gbnVsbDtcbiAgbGV0IHhpOm51bWJlciA9IG51bGw7XG4gIGxldCB5OlByb2plY3RDb21wb25lbnQgPSBudWxsO1xuICBsZXQgeWk6IG51bWJlciA9IG51bGw7XG5cbiAgc2VsQ21wdC5wcm9qZWN0LmZvckVhY2goKHAsIGkpID0+IHtcbiAgICBpZiAocC5jaGFubmVsID09PSBYKSB7XG4gICAgICB4ID0gcDtcbiAgICAgIHhpID0gaTtcbiAgICB9IGVsc2UgaWYgKHAuY2hhbm5lbCA9PT0gWSkge1xuICAgICAgeSA9IHA7XG4gICAgICB5aSA9IGk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHt4LCB4aSwgeSwgeWl9O1xufVxuIl19