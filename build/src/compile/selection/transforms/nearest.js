import * as log from '../../../log';
import { isPathMark } from '../../../mark';
import { positionalProjections } from '../selection';
var VORONOI = 'voronoi';
var nearest = {
    has: function (selCmpt) {
        return selCmpt.type !== 'interval' && selCmpt.nearest;
    },
    marks: function (model, selCmpt, marks) {
        var _a = positionalProjections(selCmpt), x = _a.x, y = _a.y;
        var markType = model.mark;
        if (isPathMark(markType)) {
            log.warn(log.message.nearestNotSupportForContinuous(markType));
            return marks;
        }
        var cellDef = {
            name: model.getName(VORONOI),
            type: 'path',
            from: { data: model.getName('marks') },
            encode: {
                enter: {
                    fill: { value: 'transparent' },
                    strokeWidth: { value: 0.35 },
                    stroke: { value: 'transparent' },
                    isVoronoi: { value: true }
                }
            },
            transform: [{
                    type: 'voronoi',
                    x: { expr: (x || (!x && !y)) ? 'datum.datum.x || 0' : '0' },
                    y: { expr: (y || (!x && !y)) ? 'datum.datum.y || 0' : '0' },
                    size: [model.getSizeSignalRef('width'), model.getSizeSignalRef('height')]
                }]
        };
        var index = 0;
        var exists = false;
        marks.forEach(function (mark, i) {
            var name = mark.name || '';
            if (name === model.component.mark[0].name) {
                index = i;
            }
            else if (name.indexOf(VORONOI) >= 0) {
                exists = true;
            }
        });
        if (!exists) {
            marks.splice(index + 1, 0, cellDef);
        }
        return marks;
    }
};
export default nearest;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmVhcmVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21waWxlL3NlbGVjdGlvbi90cmFuc2Zvcm1zL25lYXJlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLEdBQUcsTUFBTSxjQUFjLENBQUM7QUFDcEMsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSxjQUFjLENBQUM7QUFHbkQsSUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDO0FBRTFCLElBQU0sT0FBTyxHQUFxQjtJQUNoQyxHQUFHLEVBQUUsVUFBUyxPQUFPO1FBQ25CLE9BQU8sT0FBTyxDQUFDLElBQUksS0FBSyxVQUFVLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQztJQUN4RCxDQUFDO0lBRUQsS0FBSyxFQUFFLFVBQVMsS0FBSyxFQUFFLE9BQU8sRUFBRSxLQUFLO1FBQzdCLElBQUEsbUNBQXVDLEVBQXRDLFFBQUMsRUFBRSxRQUFDLENBQW1DO1FBQzlDLElBQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7UUFDNUIsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDeEIsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLDhCQUE4QixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDL0QsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUVELElBQU0sT0FBTyxHQUFHO1lBQ2QsSUFBSSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDO1lBQzVCLElBQUksRUFBRSxNQUFNO1lBQ1osSUFBSSxFQUFFLEVBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUM7WUFDcEMsTUFBTSxFQUFFO2dCQUNOLEtBQUssRUFBRTtvQkFDTCxJQUFJLEVBQUUsRUFBQyxLQUFLLEVBQUUsYUFBYSxFQUFDO29CQUM1QixXQUFXLEVBQUUsRUFBQyxLQUFLLEVBQUUsSUFBSSxFQUFDO29CQUMxQixNQUFNLEVBQUUsRUFBQyxLQUFLLEVBQUUsYUFBYSxFQUFDO29CQUM5QixTQUFTLEVBQUUsRUFBQyxLQUFLLEVBQUUsSUFBSSxFQUFDO2lCQUN6QjthQUNGO1lBQ0QsU0FBUyxFQUFFLENBQUM7b0JBQ1YsSUFBSSxFQUFFLFNBQVM7b0JBQ2YsQ0FBQyxFQUFFLEVBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFDO29CQUN6RCxDQUFDLEVBQUUsRUFBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUM7b0JBQ3pELElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsRUFBRSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUM7aUJBQzFFLENBQUM7U0FDSCxDQUFDO1FBRUYsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ2QsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ25CLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBQyxJQUFJLEVBQUUsQ0FBQztZQUNwQixJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQztZQUM3QixJQUFJLElBQUksS0FBSyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUU7Z0JBQ3pDLEtBQUssR0FBRyxDQUFDLENBQUM7YUFDWDtpQkFBTSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUNyQyxNQUFNLEdBQUcsSUFBSSxDQUFDO2FBQ2Y7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDWCxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQ3JDO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0NBQ0YsQ0FBQztBQUVGLGVBQWUsT0FBTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgbG9nIGZyb20gJy4uLy4uLy4uL2xvZyc7XG5pbXBvcnQge2lzUGF0aE1hcmt9IGZyb20gJy4uLy4uLy4uL21hcmsnO1xuaW1wb3J0IHtwb3NpdGlvbmFsUHJvamVjdGlvbnN9IGZyb20gJy4uL3NlbGVjdGlvbic7XG5pbXBvcnQge1RyYW5zZm9ybUNvbXBpbGVyfSBmcm9tICcuL3RyYW5zZm9ybXMnO1xuXG5jb25zdCBWT1JPTk9JID0gJ3Zvcm9ub2knO1xuXG5jb25zdCBuZWFyZXN0OlRyYW5zZm9ybUNvbXBpbGVyID0ge1xuICBoYXM6IGZ1bmN0aW9uKHNlbENtcHQpIHtcbiAgICByZXR1cm4gc2VsQ21wdC50eXBlICE9PSAnaW50ZXJ2YWwnICYmIHNlbENtcHQubmVhcmVzdDtcbiAgfSxcblxuICBtYXJrczogZnVuY3Rpb24obW9kZWwsIHNlbENtcHQsIG1hcmtzKSB7XG4gICAgY29uc3Qge3gsIHl9ID0gcG9zaXRpb25hbFByb2plY3Rpb25zKHNlbENtcHQpO1xuICAgIGNvbnN0IG1hcmtUeXBlID0gbW9kZWwubWFyaztcbiAgICBpZiAoaXNQYXRoTWFyayhtYXJrVHlwZSkpIHtcbiAgICAgIGxvZy53YXJuKGxvZy5tZXNzYWdlLm5lYXJlc3ROb3RTdXBwb3J0Rm9yQ29udGludW91cyhtYXJrVHlwZSkpO1xuICAgICAgcmV0dXJuIG1hcmtzO1xuICAgIH1cblxuICAgIGNvbnN0IGNlbGxEZWYgPSB7XG4gICAgICBuYW1lOiBtb2RlbC5nZXROYW1lKFZPUk9OT0kpLFxuICAgICAgdHlwZTogJ3BhdGgnLFxuICAgICAgZnJvbToge2RhdGE6IG1vZGVsLmdldE5hbWUoJ21hcmtzJyl9LFxuICAgICAgZW5jb2RlOiB7XG4gICAgICAgIGVudGVyOiB7XG4gICAgICAgICAgZmlsbDoge3ZhbHVlOiAndHJhbnNwYXJlbnQnfSxcbiAgICAgICAgICBzdHJva2VXaWR0aDoge3ZhbHVlOiAwLjM1fSxcbiAgICAgICAgICBzdHJva2U6IHt2YWx1ZTogJ3RyYW5zcGFyZW50J30sXG4gICAgICAgICAgaXNWb3Jvbm9pOiB7dmFsdWU6IHRydWV9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB0cmFuc2Zvcm06IFt7XG4gICAgICAgIHR5cGU6ICd2b3Jvbm9pJyxcbiAgICAgICAgeDoge2V4cHI6ICh4IHx8ICgheCAmJiAheSkpID8gJ2RhdHVtLmRhdHVtLnggfHwgMCcgOiAnMCd9LFxuICAgICAgICB5OiB7ZXhwcjogKHkgfHwgKCF4ICYmICF5KSkgPyAnZGF0dW0uZGF0dW0ueSB8fCAwJyA6ICcwJ30sXG4gICAgICAgIHNpemU6IFttb2RlbC5nZXRTaXplU2lnbmFsUmVmKCd3aWR0aCcpLCBtb2RlbC5nZXRTaXplU2lnbmFsUmVmKCdoZWlnaHQnKV1cbiAgICAgIH1dXG4gICAgfTtcblxuICAgIGxldCBpbmRleCA9IDA7XG4gICAgbGV0IGV4aXN0cyA9IGZhbHNlO1xuICAgIG1hcmtzLmZvckVhY2goKG1hcmssIGkpID0+IHtcbiAgICAgIGNvbnN0IG5hbWUgPSBtYXJrLm5hbWUgfHwgJyc7XG4gICAgICBpZiAobmFtZSA9PT0gbW9kZWwuY29tcG9uZW50Lm1hcmtbMF0ubmFtZSkge1xuICAgICAgICBpbmRleCA9IGk7XG4gICAgICB9IGVsc2UgaWYgKG5hbWUuaW5kZXhPZihWT1JPTk9JKSA+PSAwKSB7XG4gICAgICAgIGV4aXN0cyA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoIWV4aXN0cykge1xuICAgICAgbWFya3Muc3BsaWNlKGluZGV4ICsgMSwgMCwgY2VsbERlZik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hcmtzO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBuZWFyZXN0O1xuIl19