import { stringValue } from 'vega-util';
import { X, Y } from '../../../channel';
import * as log from '../../../log';
import { hasContinuousDomain, isBinScale } from '../../../scale';
import { channelSignalName } from '../selection';
var scaleBindings = {
    has: function (selCmpt) {
        return selCmpt.type === 'interval' && selCmpt.resolve === 'global' &&
            selCmpt.bind && selCmpt.bind === 'scales';
    },
    parse: function (model, selDef, selCmpt) {
        var bound = selCmpt.scales = [];
        selCmpt.project.forEach(function (p) {
            var channel = p.channel;
            var scale = model.getScaleComponent(channel);
            var scaleType = scale ? scale.get('type') : undefined;
            if (!scale || !hasContinuousDomain(scaleType) || isBinScale(scaleType)) {
                log.warn(log.message.SCALE_BINDINGS_CONTINUOUS);
                return;
            }
            scale.set('domainRaw', { signal: channelSignalName(selCmpt, channel, 'data') }, true);
            bound.push(channel);
            // Bind both x/y for diag plot of repeated views.
            if (model.repeater && model.repeater.row === model.repeater.column) {
                var scale2 = model.getScaleComponent(channel === X ? Y : X);
                scale2.set('domainRaw', { signal: channelSignalName(selCmpt, channel, 'data') }, true);
            }
        });
    },
    topLevelSignals: function (model, selCmpt, signals) {
        // Top-level signals are only needed when coordinating composed views.
        if (!model.parent) {
            return signals;
        }
        var channels = selCmpt.scales.filter(function (channel) {
            return !(signals.filter(function (s) { return s.name === channelSignalName(selCmpt, channel, 'data'); }).length);
        });
        return signals.concat(channels.map(function (channel) {
            return { name: channelSignalName(selCmpt, channel, 'data') };
        }));
    },
    signals: function (model, selCmpt, signals) {
        // Nested signals need only push to top-level signals when within composed views.
        if (model.parent) {
            selCmpt.scales.forEach(function (channel) {
                var signal = signals.filter(function (s) { return s.name === channelSignalName(selCmpt, channel, 'data'); })[0];
                signal.push = 'outer';
                delete signal.value;
                delete signal.update;
            });
        }
        return signals;
    }
};
export default scaleBindings;
export function domain(model, channel) {
    var scale = stringValue(model.scaleName(channel));
    return "domain(" + scale + ")";
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NhbGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvc2VsZWN0aW9uL3RyYW5zZm9ybXMvc2NhbGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDdEMsT0FBTyxFQUFVLENBQUMsRUFBRSxDQUFDLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUMvQyxPQUFPLEtBQUssR0FBRyxNQUFNLGNBQWMsQ0FBQztBQUNwQyxPQUFPLEVBQUMsbUJBQW1CLEVBQUUsVUFBVSxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFFL0QsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sY0FBYyxDQUFDO0FBSS9DLElBQU0sYUFBYSxHQUFxQjtJQUN0QyxHQUFHLEVBQUUsVUFBUyxPQUFPO1FBQ25CLE9BQU8sT0FBTyxDQUFDLElBQUksS0FBSyxVQUFVLElBQUksT0FBTyxDQUFDLE9BQU8sS0FBSyxRQUFRO1lBQ2hFLE9BQU8sQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLElBQUksS0FBSyxRQUFRLENBQUM7SUFDOUMsQ0FBQztJQUVELEtBQUssRUFBRSxVQUFTLEtBQUssRUFBRSxNQUFNLEVBQUUsT0FBTztRQUNwQyxJQUFNLEtBQUssR0FBYyxPQUFPLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUU3QyxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFTLENBQUM7WUFDaEMsSUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQztZQUMxQixJQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDL0MsSUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7WUFFeEQsSUFBSSxD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QUFDO0lBQ3BELE9BQU8sWUFBVSxLQUFLLE1BQUcsQ0FBQztBQUM1QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtzdHJpbmdWYWx1ZX0gZnJvbSAndmVnYS11dGlsJztcbmltcG9ydCB7Q2hhbm5lbCwgWCwgWX0gZnJvbSAnLi4vLi4vLi4vY2hhbm5lbCc7XG5pbXBvcnQgKiBhcyBsb2cgZnJvbSAnLi4vLi4vLi4vbG9nJztcbmltcG9ydCB7aGFzQ29udGludW91c0RvbWFpbiwgaXNCaW5TY2FsZX0gZnJvbSAnLi4vLi4vLi4vc2NhbGUnO1xuaW1wb3J0IHtVbml0TW9kZWx9IGZyb20gJy4uLy4uL3VuaXQnO1xuaW1wb3J0IHtjaGFubmVsU2lnbmFsTmFtZX0gZnJvbSAnLi4vc2VsZWN0aW9uJztcbmltcG9ydCB7VHJhbnNmb3JtQ29tcGlsZXJ9IGZyb20gJy4vdHJhbnNmb3Jtcyc7XG5cblxuY29uc3Qgc2NhbGVCaW5kaW5nczpUcmFuc2Zvcm1Db21waWxlciA9IHtcbiAgaGFzOiBmdW5jdGlvbihzZWxDbXB0KSB7XG4gICAgcmV0dXJuIHNlbENtcHQudHlwZSA9PT0gJ2ludGVydmFsJyAmJiBzZWxDbXB0LnJlc29sdmUgPT09ICdnbG9iYWwnICYmXG4gICAgICBzZWxDbXB0LmJpbmQgJiYgc2VsQ21wdC5iaW5kID09PSAnc2NhbGVzJztcbiAgfSxcblxuICBwYXJzZTogZnVuY3Rpb24obW9kZWwsIHNlbERlZiwgc2VsQ21wdCkge1xuICAgIGNvbnN0IGJvdW5kOiBDaGFubmVsW10gPSBzZWxDbXB0LnNjYWxlcyA9IFtdO1xuXG4gICAgc2VsQ21wdC5wcm9qZWN0LmZvckVhY2goZnVuY3Rpb24ocCkge1xuICAgICAgY29uc3QgY2hhbm5lbCA9IHAuY2hhbm5lbDtcbiAgICAgIGNvbnN0IHNjYWxlID0gbW9kZWwuZ2V0U2NhbGVDb21wb25lbnQoY2hhbm5lbCk7XG4gICAgICBjb25zdCBzY2FsZVR5cGUgPSBzY2FsZSA/IHNjYWxlLmdldCgndHlwZScpIDogdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoIXNjYWxlIHx8ICFoYXNDb250aW51b3VzRG9tYWluKHNjYWxlVHlwZSkgfHwgaXNCaW5TY2FsZShzY2FsZVR5cGUpKSB7XG4gICAgICAgIGxvZy53YXJuKGxvZy5tZXNzYWdlLlNDQUxFX0JJTkRJTkdTX0NPTlRJTlVPVVMpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHNjYWxlLnNldCgnZG9tYWluUmF3Jywge3NpZ25hbDogY2hhbm5lbFNpZ25hbE5hbWUoc2VsQ21wdCwgY2hhbm5lbCwgJ2RhdGEnKX0sIHRydWUpO1xuICAgICAgYm91bmQucHVzaChjaGFubmVsKTtcblxuICAgICAgLy8gQmluZCBib3RoIHgveSBmb3IgZGlhZyBwbG90IG9mIHJlcGVhdGVkIHZpZXdzLlxuICAgICAgaWYgKG1vZGVsLnJlcGVhdGVyICYmIG1vZGVsLnJlcGVhdGVyLnJvdyA9PT0gbW9kZWwucmVwZWF0ZXIuY29sdW1uKSB7XG4gICAgICAgIGNvbnN0IHNjYWxlMiA9IG1vZGVsLmdldFNjYWxlQ29tcG9uZW50KGNoYW5uZWwgPT09IFggPyBZIDogWCk7XG4gICAgICAgIHNjYWxlMi5zZXQoJ2RvbWFpblJhdycsIHtzaWduYWw6IGNoYW5uZWxTaWduYWxOYW1lKHNlbENtcHQsIGNoYW5uZWwsICdkYXRhJyl9LCB0cnVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcblxuICB0b3BMZXZlbFNpZ25hbHM6IGZ1bmN0aW9uKG1vZGVsLCBzZWxDbXB0LCBzaWduYWxzKSB7XG4gICAgLy8gVG9wLWxldmVsIHNpZ25hbHMgYXJlIG9ubHkgbmVlZGVkIHdoZW4gY29vcmRpbmF0aW5nIGNvbXBvc2VkIHZpZXdzLlxuICAgIGlmICghbW9kZWwucGFyZW50KSB7XG4gICAgICByZXR1cm4gc2lnbmFscztcbiAgICB9XG5cbiAgICBjb25zdCBjaGFubmVscyA9IHNlbENtcHQuc2NhbGVzLmZpbHRlcigoY2hhbm5lbCkgPT4ge1xuICAgICAgcmV0dXJuICEoc2lnbmFscy5maWx0ZXIocyA9PiBzLm5hbWUgPT09IGNoYW5uZWxTaWduYWxOYW1lKHNlbENtcHQsIGNoYW5uZWwsICdkYXRhJykpLmxlbmd0aCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc2lnbmFscy5jb25jYXQoY2hhbm5lbHMubWFwKChjaGFubmVsKSA9PiB7XG4gICAgICByZXR1cm4ge25hbWU6IGNoYW5uZWxTaWduYWxOYW1lKHNlbENtcHQsIGNoYW5uZWwsICdkYXRhJyl9O1xuICAgIH0pKTtcbiAgfSxcblxuICBzaWduYWxzOiBmdW5jdGlvbihtb2RlbCwgc2VsQ21wdCwgc2lnbmFscykge1xuICAgIC8vIE5lc3RlZCBzaWduYWxzIG5lZWQgb25seSBwdXNoIHRvIHRvcC1sZXZlbCBzaWduYWxzIHdoZW4gd2l0aGluIGNvbXBvc2VkIHZpZXdzLlxuICAgIGlmIChtb2RlbC5wYXJlbnQpIHtcbiAgICAgIHNlbENtcHQuc2NhbGVzLmZvckVhY2goY2hhbm5lbCA9PiB7XG4gICAgICAgIGNvbnN0IHNpZ25hbCA9IHNpZ25hbHMuZmlsdGVyKHMgPT4gcy5uYW1lID09PSBjaGFubmVsU2lnbmFsTmFtZShzZWxDbXB0LCBjaGFubmVsLCAnZGF0YScpKVswXTtcblxuICAgICAgICBzaWduYWwucHVzaCA9ICdvdXRlcic7XG4gICAgICAgIGRlbGV0ZSBzaWduYWwudmFsdWU7XG4gICAgICAgIGRlbGV0ZSBzaWduYWwudXBkYXRlO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNpZ25hbHM7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHNjYWxlQmluZGluZ3M7XG5cbmV4cG9ydCBmdW5jdGlvbiBkb21haW4obW9kZWw6IFVuaXRNb2RlbCwgY2hhbm5lbDogQ2hhbm5lbCkge1xuICBjb25zdCBzY2FsZSA9IHN0cmluZ1ZhbHVlKG1vZGVsLnNjYWxlTmFtZShjaGFubmVsKSk7XG4gIHJldHVybiBgZG9tYWluKCR7c2NhbGV9KWA7XG59XG4iXX0=