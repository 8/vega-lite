import { toSet } from 'vega-util';
import { contains, flagKeys } from './util';
export var Mark;
(function (Mark) {
    Mark.AREA = 'area';
    Mark.BAR = 'bar';
    Mark.LINE = 'line';
    Mark.POINT = 'point';
    Mark.RECT = 'rect';
    Mark.RULE = 'rule';
    Mark.TEXT = 'text';
    Mark.TICK = 'tick';
    Mark.TRAIL = 'trail';
    Mark.CIRCLE = 'circle';
    Mark.SQUARE = 'square';
    Mark.GEOSHAPE = 'geoshape';
})(Mark || (Mark = {}));
export var AREA = Mark.AREA;
export var BAR = Mark.BAR;
export var LINE = Mark.LINE;
export var POINT = Mark.POINT;
export var TEXT = Mark.TEXT;
export var TICK = Mark.TICK;
export var TRAIL = Mark.TRAIL;
export var RECT = Mark.RECT;
export var RULE = Mark.RULE;
export var GEOSHAPE = Mark.GEOSHAPE;
export var CIRCLE = Mark.CIRCLE;
export var SQUARE = Mark.SQUARE;
// Using mapped type to declare index, ensuring we always have all marks when we add more.
var MARK_INDEX = {
    area: 1,
    bar: 1,
    line: 1,
    point: 1,
    text: 1,
    tick: 1,
    trail: 1,
    rect: 1,
    geoshape: 1,
    rule: 1,
    circle: 1,
    square: 1
};
export function isMark(m) {
    return !!MARK_INDEX[m];
}
export function isPathMark(m) {
    return contains(['line', 'area', 'trail'], m);
}
export var PRIMITIVE_MARKS = flagKeys(MARK_INDEX);
export function isMarkDef(mark) {
    return mark['type'];
}
var PRIMITIVE_MARK_INDEX = toSet(PRIMITIVE_MARKS);
export function isPrimitiveMark(mark) {
    var markType = isMarkDef(mark) ? mark.type : mark;
    return markType in PRIMITIVE_MARK_INDEX;
}
export var STROKE_CONFIG = ['stroke', 'strokeWidth',
    'strokeDash', 'strokeDashOffset', 'strokeOpacity'];
export var FILL_CONFIG = ['fill', 'fillOpacity'];
export var FILL_STROKE_CONFIG = [].concat(STROKE_CONFIG, FILL_CONFIG);
export var VL_ONLY_MARK_CONFIG_PROPERTIES = ['filled', 'color'];
export var VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX = {
    area: ['line', 'point'],
    bar: ['binSpacing', 'continuousBandSize', 'discreteBandSize'],
    line: ['point'],
    text: ['shortTimeLabels'],
    tick: ['bandSize', 'thickness']
};
export var defaultMarkConfig = {
    color: '#4c78a8',
};
export var defaultBarConfig = {
    binSpacing: 1,
    continuousBandSize: 5
};
export var defaultTickConfig = {
    thickness: 1
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFyay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYXJrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxLQUFLLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFFaEMsT0FBTyxFQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUMsTUFBTSxRQUFRLENBQUM7QUFHMUMsTUFBTSxLQUFXLElBQUksQ0FhcEI7QUFiRCxXQUFpQixJQUFJO0lBQ04sU0FBSSxHQUFXLE1BQU0sQ0FBQztJQUN0QixRQUFHLEdBQVUsS0FBSyxDQUFDO0lBQ25CLFNBQUksR0FBVyxNQUFNLENBQUM7SUFDdEIsVUFBSyxHQUFZLE9BQU8sQ0FBQztJQUN6QixTQUFJLEdBQVcsTUFBTSxDQUFDO0lBQ3RCLFNBQUksR0FBVyxNQUFNLENBQUM7SUFDdEIsU0FBSSxHQUFXLE1BQU0sQ0FBQztJQUN0QixTQUFJLEdBQVcsTUFBTSxDQUFDO0lBQ3RCLFVBQUssR0FBWSxPQUFPLENBQUM7SUFDekIsV0FBTSxHQUFhLFFBQVEsQ0FBQztJQUM1QixXQUFNLEdBQWEsUUFBUSxDQUFDO0lBQzVCLGFBQVEsR0FBZSxVQUFVLENBQUM7QUFDakQsQ0FBQyxFQWJnQixJQUFJLEtBQUosSUFBSSxRQWFwQjtBQVFELE1BQU0sQ0FBQyxJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQzlCLE1BQU0sQ0FBQyxJQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO0FBQzVCLE1BQU0sQ0FBQyxJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQzlCLE1BQU0sQ0FBQyxJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0FBQ2hDLE1BQU0sQ0FBQyxJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQzlCLE1BQU0sQ0FBQyxJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQzlCLE1BQU0s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bUJGLE1BQU0sQ0FBQyxJQUFNLGlCQUFpQixHQUFlO0lBQzNDLFNBQVMsRUFBRSxDQUFDO0NBQ2IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7dG9TZXR9IGZyb20gJ3ZlZ2EtdXRpbCc7XG5pbXBvcnQge0NvbXBvc2l0ZU1hcmssIENvbXBvc2l0ZU1hcmtEZWZ9IGZyb20gJy4vY29tcG9zaXRlbWFyay9pbmRleCc7XG5pbXBvcnQge2NvbnRhaW5zLCBmbGFnS2V5c30gZnJvbSAnLi91dGlsJztcbmltcG9ydCB7VmdNYXJrQ29uZmlnfSBmcm9tICcuL3ZlZ2Euc2NoZW1hJztcblxuZXhwb3J0IG5hbWVzcGFjZSBNYXJrIHtcbiAgZXhwb3J0IGNvbnN0IEFSRUE6ICdhcmVhJyA9ICdhcmVhJztcbiAgZXhwb3J0IGNvbnN0IEJBUjogJ2JhcicgPSAnYmFyJztcbiAgZXhwb3J0IGNvbnN0IExJTkU6ICdsaW5lJyA9ICdsaW5lJztcbiAgZXhwb3J0IGNvbnN0IFBPSU5UOiAncG9pbnQnID0gJ3BvaW50JztcbiAgZXhwb3J0IGNvbnN0IFJFQ1Q6ICdyZWN0JyA9ICdyZWN0JztcbiAgZXhwb3J0IGNvbnN0IFJVTEU6ICdydWxlJyA9ICdydWxlJztcbiAgZXhwb3J0IGNvbnN0IFRFWFQ6ICd0ZXh0JyA9ICd0ZXh0JztcbiAgZXhwb3J0IGNvbnN0IFRJQ0s6ICd0aWNrJyA9ICd0aWNrJztcbiAgZXhwb3J0IGNvbnN0IFRSQUlMOiAndHJhaWwnID0gJ3RyYWlsJztcbiAgZXhwb3J0IGNvbnN0IENJUkNMRTogJ2NpcmNsZScgPSAnY2lyY2xlJztcbiAgZXhwb3J0IGNvbnN0IFNRVUFSRTogJ3NxdWFyZScgPSAnc3F1YXJlJztcbiAgZXhwb3J0IGNvbnN0IEdFT1NIQVBFOiAnZ2Vvc2hhcGUnID0gJ2dlb3NoYXBlJztcbn1cblxuLyoqXG4gKiBBbGwgdHlwZXMgb2YgcHJpbWl0aXZlIG1hcmtzLlxuICovXG5leHBvcnQgdHlwZSBNYXJrID0gdHlwZW9mIE1hcmsuQVJFQSB8IHR5cGVvZiBNYXJrLkJBUiB8IHR5cGVvZiBNYXJrLkxJTkUgfCB0eXBlb2YgTWFyay5UUkFJTCB8IHR5cGVvZiBNYXJrLlBPSU5UIHwgdHlwZW9mIE1hcmsuVEVYVCB8IHR5cGVvZiBNYXJrLlRJQ0sgfCB0eXBlb2YgTWFyay5SRUNUIHwgdHlwZW9mIE1hcmsuUlVMRSB8IHR5cGVvZiBNYXJrLkNJUkNMRSB8IHR5cGVvZiBNYXJrLlNRVUFSRSB8IHR5cGVvZiBNYXJrLkdFT1NIQVBFO1xuXG5cbmV4cG9ydCBjb25zdCBBUkVBID0gTWFyay5BUkVBO1xuZXhwb3J0IGNvbnN0IEJBUiA9IE1hcmsuQkFSO1xuZXhwb3J0IGNvbnN0IExJTkUgPSBNYXJrLkxJTkU7XG5leHBvcnQgY29uc3QgUE9JTlQgPSBNYXJrLlBPSU5UO1xuZXhwb3J0IGNvbnN0IFRFWFQgPSBNYXJrLlRFWFQ7XG5leHBvcnQgY29uc3QgVElDSyA9IE1hcmsuVElDSztcbmV4cG9ydCBjb25zdCBUUkFJTCA9IE1hcmsuVFJBSUw7XG5leHBvcnQgY29uc3QgUkVDVCA9IE1hcmsuUkVDVDtcbmV4cG9ydCBjb25zdCBSVUxFID0gTWFyay5SVUxFO1xuZXhwb3J0IGNvbnN0IEdFT1NIQVBFID0gTWFyay5HRU9TSEFQRTtcblxuZXhwb3J0IGNvbnN0IENJUkNMRSA9IE1hcmsuQ0lSQ0xFO1xuZXhwb3J0IGNvbnN0IFNRVUFSRSA9IE1hcmsuU1FVQVJFO1xuXG4vLyBVc2luZyBtYXBwZWQgdHlwZSB0byBkZWNsYXJlIGluZGV4LCBlbnN1cmluZyB3ZSBhbHdheXMgaGF2ZSBhbGwgbWFya3Mgd2hlbiB3ZSBhZGQgbW9yZS5cbmNvbnN0IE1BUktfSU5ERVg6IHtbTSBpbiBNYXJrXTogMX0gPSB7XG4gIGFyZWE6IDEsXG4gIGJhcjogMSxcbiAgbGluZTogMSxcbiAgcG9pbnQ6IDEsXG4gIHRleHQ6IDEsXG4gIHRpY2s6IDEsXG4gIHRyYWlsOiAxLFxuICByZWN0OiAxLFxuICBnZW9zaGFwZTogMSxcbiAgcnVsZTogMSxcbiAgY2lyY2xlOiAxLFxuICBzcXVhcmU6IDFcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBpc01hcmsobTogc3RyaW5nKTogbSBpcyBNYXJrIHtcbiAgcmV0dXJuICEhTUFSS19JTkRFWFttXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzUGF0aE1hcmsobTogTWFyayB8IENvbXBvc2l0ZU1hcmspOiBtIGlzICdsaW5lJyB8ICdhcmVhJyB8ICd0cmFpbCcge1xuICByZXR1cm4gY29udGFpbnMoWydsaW5lJywgJ2FyZWEnLCAndHJhaWwnXSwgbSk7XG59XG5cbmV4cG9ydCBjb25zdCBQUklNSVRJVkVfTUFSS1MgPSBmbGFnS2V5cyhNQVJLX0lOREVYKTtcblxuXG5leHBvcnQgaW50ZXJmYWNlIE1hcmtDb25maWcgZXh0ZW5kcyBWZ01hcmtDb25maWcge1xuICAvLyAtLS0tLS0tLS0tIENvbG9yIC0tLS0tLS0tLS1cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIG1hcmsncyBjb2xvciBzaG91bGQgYmUgdXNlZCBhcyBmaWxsIGNvbG9yIGluc3RlYWQgb2Ygc3Ryb2tlIGNvbG9yLlxuICAgKlxuICAgKiBfX0RlZmF1bHQgdmFsdWU6X18gYHRydWVgIGZvciBhbGwgbWFya3MgZXhjZXB0IGBwb2ludGAgYW5kIGBmYWxzZWAgZm9yIGBwb2ludGAuXG4gICAqXG4gICAqIF9fQXBwbGljYWJsZSBmb3I6X18gYGJhcmAsIGBwb2ludGAsIGBjaXJjbGVgLCBgc3F1YXJlYCwgYW5kIGBhcmVhYCBtYXJrcy5cbiAgICpcbiAgICogX19Ob3RlOl9fIFRoaXMgcHJvcGVydHkgY2Fubm90IGJlIHVzZWQgaW4gYSBbc3R5bGUgY29uZmlnXShodHRwczovL3ZlZ2EuZ2l0aHViLmlvL3ZlZ2EtbGl0ZS9kb2NzL21hcmsuaHRtbCNzdHlsZS1jb25maWcpLlxuICAgKlxuICAgKi9cbiAgZmlsbGVkPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogRGVmYXVsdCBjb2xvci4gIE5vdGUgdGhhdCBgZmlsbGAgYW5kIGBzdHJva2VgIGhhdmUgaGlnaGVyIHByZWNlZGVuY2UgdGhhbiBgY29sb3JgIGFuZCB3aWxsIG92ZXJyaWRlIGBjb2xvcmAuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyA8c3BhbiBzdHlsZT1cImNvbG9yOiAjNDY4MmI0O1wiPiYjOTYzMjs8L3NwYW4+IGBcIiM0NjgyYjRcImBcbiAgICpcbiAgICogX19Ob3RlOl9fIFRoaXMgcHJvcGVydHkgY2Fubm90IGJlIHVzZWQgaW4gYSBbc3R5bGUgY29uZmlnXShodHRwczovL3ZlZ2EuZ2l0aHViLmlvL3ZlZ2EtbGl0ZS9kb2NzL21hcmsuaHRtbCNzdHlsZS1jb25maWcpLlxuICAgKi9cbiAgY29sb3I/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmFyQmluU3BhY2luZ01peGlucyB7XG4gIC8qKlxuICAgKiBPZmZzZXQgYmV0d2VlbiBiYXJzIGZvciBiaW5uZWQgZmllbGQuICBJZGVhbCB2YWx1ZSBmb3IgdGhpcyBpcyBlaXRoZXIgMCAoUHJlZmVycmVkIGJ5IHN0YXRpc3RpY2lhbnMpIG9yIDEgKFZlZ2EtTGl0ZSBEZWZhdWx0LCBEMyBleGFtcGxlIHN0eWxlKS5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fIGAxYFxuICAgKlxuICAgKiBAbWluaW11bSAwXG4gICAqL1xuICBiaW5TcGFjaW5nPzogbnVtYmVyO1xufVxuXG5cbi8qKiBAaGlkZSAqL1xuZXhwb3J0IHR5cGUgSGlkZGVuQ29tcG9zaXRlID0gQ29tcG9zaXRlTWFyayB8IENvbXBvc2l0ZU1hcmtEZWY7XG5cbmV4cG9ydCB0eXBlIEFueU1hcmsgPVxuICBIaWRkZW5Db21wb3NpdGUgfFxuICBNYXJrIHxcbiAgTWFya0RlZjtcblxuZXhwb3J0IGZ1bmN0aW9uIGlzTWFya0RlZihtYXJrOiBBbnlNYXJrKTogbWFyayBpcyAoTWFya0RlZiB8IENvbXBvc2l0ZU1hcmtEZWYpIHtcbiAgcmV0dXJuIG1hcmtbJ3R5cGUnXTtcbn1cblxuY29uc3QgUFJJTUlUSVZFX01BUktfSU5ERVggPSB0b1NldChQUklNSVRJVkVfTUFSS1MpO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNQcmltaXRpdmVNYXJrKG1hcms6IENvbXBvc2l0ZU1hcmsgfCBDb21wb3NpdGVNYXJrRGVmIHwgTWFyayB8IE1hcmtEZWYpOiBtYXJrIGlzIE1hcmsge1xuICBjb25zdCBtYXJrVHlwZSA9IGlzTWFya0RlZihtYXJrKSA/IG1hcmsudHlwZSA6IG1hcms7XG4gIHJldHVybiBtYXJrVHlwZSBpbiBQUklNSVRJVkVfTUFSS19JTkRFWDtcbn1cblxuZXhwb3J0IGNvbnN0IFNUUk9LRV9DT05GSUcgPSBbJ3N0cm9rZScsICdzdHJva2VXaWR0aCcsXG4gICdzdHJva2VEYXNoJywgJ3N0cm9rZURhc2hPZmZzZXQnLCAnc3Ryb2tlT3BhY2l0eSddO1xuXG5leHBvcnQgY29uc3QgRklMTF9DT05GSUcgPSBbJ2ZpbGwnLCAnZmlsbE9wYWNpdHknXTtcblxuZXhwb3J0IGNvbnN0IEZJTExfU1RST0tFX0NPTkZJRyA9IFtdLmNvbmNhdChTVFJPS0VfQ09ORklHLCBGSUxMX0NPTkZJRyk7XG5cbmV4cG9ydCBjb25zdCBWTF9PTkxZX01BUktfQ09ORklHX1BST1BFUlRJRVM6IChrZXlvZiBNYXJrQ29uZmlnKVtdID0gWydmaWxsZWQnLCAnY29sb3InXTtcblxuZXhwb3J0IGNvbnN0IFZMX09OTFlfTUFSS19TUEVDSUZJQ19DT05GSUdfUFJPUEVSVFlfSU5ERVg6IHtcbiAgW2sgaW4gKHR5cGVvZiBQUklNSVRJVkVfTUFSS1NbMF0pXT86IChrZXlvZiBNYXJrQ29uZmlnTWl4aW5zW2tdKVtdXG59ID0ge1xuICBhcmVhOiBbJ2xpbmUnLCAncG9pbnQnXSxcbiAgYmFyOiBbJ2JpblNwYWNpbmcnLCAnY29udGludW91c0JhbmRTaXplJywgJ2Rpc2NyZXRlQmFuZFNpemUnXSxcbiAgbGluZTogWydwb2ludCddLFxuICB0ZXh0OiBbJ3Nob3J0VGltZUxhYmVscyddLFxuICB0aWNrOiBbJ2JhbmRTaXplJywgJ3RoaWNrbmVzcyddXG59O1xuXG5leHBvcnQgY29uc3QgZGVmYXVsdE1hcmtDb25maWc6IE1hcmtDb25maWcgPSB7XG4gIGNvbG9yOiAnIzRjNzhhOCcsXG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIE1hcmtDb25maWdNaXhpbnMge1xuICAvKiogTWFyayBDb25maWcgKi9cbiAgbWFyaz86IE1hcmtDb25maWc7XG5cbiAgLy8gTUFSSy1TUEVDSUZJQyBDT05GSUdTXG4gIC8qKiBBcmVhLVNwZWNpZmljIENvbmZpZyAqL1xuICBhcmVhPzogQXJlYUNvbmZpZztcblxuICAvKiogQmFyLVNwZWNpZmljIENvbmZpZyAqL1xuICBiYXI/OiBCYXJDb25maWc7XG5cbiAgLyoqIENpcmNsZS1TcGVjaWZpYyBDb25maWcgKi9cbiAgY2lyY2xlPzogTWFya0NvbmZpZztcblxuICAvKiogTGluZS1TcGVjaWZpYyBDb25maWcgKi9cbiAgbGluZT86IExpbmVDb25maWc7XG5cbiAgLyoqIFBvaW50LVNwZWNpZmljIENvbmZpZyAqL1xuICBwb2ludD86IE1hcmtDb25maWc7XG5cbiAgLyoqIFJlY3QtU3BlY2lmaWMgQ29uZmlnICovXG4gIHJlY3Q/OiBNYXJrQ29uZmlnO1xuXG4gIC8qKiBSdWxlLVNwZWNpZmljIENvbmZpZyAqL1xuICBydWxlPzogTWFya0NvbmZpZztcblxuICAvKiogU3F1YXJlLVNwZWNpZmljIENvbmZpZyAqL1xuICBzcXVhcmU/OiBNYXJrQ29uZmlnO1xuXG4gIC8qKiBUZXh0LVNwZWNpZmljIENvbmZpZyAqL1xuICB0ZXh0PzogVGV4dENvbmZpZztcblxuICAvKiogVGljay1TcGVjaWZpYyBDb25maWcgKi9cbiAgdGljaz86IFRpY2tDb25maWc7XG5cbiAgLyoqIFRyYWlsLVNwZWNpZmljIENvbmZpZyAqL1xuICB0cmFpbD86IExpbmVDb25maWc7XG5cbiAgLyoqIEdlb3NoYXBlLVNwZWNpZmljIENvbmZpZyAqL1xuICBnZW9zaGFwZT86IE1hcmtDb25maWc7XG59XG5cblxuZXhwb3J0IGludGVyZmFjZSBCYXJDb25maWcgZXh0ZW5kcyBCYXJCaW5TcGFjaW5nTWl4aW5zLCBNYXJrQ29uZmlnIHtcblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgc2l6ZSBvZiB0aGUgYmFycyBvbiBjb250aW51b3VzIHNjYWxlcy5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fIGA1YFxuICAgKlxuICAgKiBAbWluaW11bSAwXG4gICAqL1xuICBjb250aW51b3VzQmFuZFNpemU/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBiYXJzLiAgSWYgdW5zcGVjaWZpZWQsIHRoZSBkZWZhdWx0IHNpemUgaXMgIGBiYW5kU2l6ZS0xYCxcbiAgICogd2hpY2ggcHJvdmlkZXMgMSBwaXhlbCBvZmZzZXQgYmV0d2VlbiBiYXJzLlxuICAgKiBAbWluaW11bSAwXG4gICAqL1xuICBkaXNjcmV0ZUJhbmRTaXplPzogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBvaW50T3ZlcmxheU1peGlucyB7XG4gIC8qKlxuICAgKiBBIGZsYWcgZm9yIG92ZXJsYXlpbmcgcG9pbnRzIG9uIHRvcCBvZiBsaW5lIG9yIGFyZWEgbWFya3MsIG9yIGFuIG9iamVjdCBkZWZpbmluZyB0aGUgcHJvcGVydGllcyBvZiB0aGUgb3ZlcmxheWVkIHBvaW50cy5cbiAgICpcbiAgICogLSBJZiB0aGlzIHByb3BlcnR5IGlzIGBcInRyYW5zcGFyZW50XCJgLCB0cmFuc3BhcmVudCBwb2ludHMgd2lsbCBiZSB1c2VkIChmb3IgZW5oYW5jaW5nIHRvb2x0aXBzIGFuZCBzZWxlY3Rpb25zKS5cbiAgICpcbiAgICogLSBJZiB0aGlzIHByb3BlcnR5IGlzIGFuIGVtcHR5IG9iamVjdCAoYHt9YCkgb3IgYHRydWVgLCBmaWxsZWQgcG9pbnRzIHdpdGggZGVmYXVsdCBwcm9wZXJ0aWVzIHdpbGwgYmUgdXNlZC5cbiAgICpcbiAgICogLSBJZiB0aGlzIHByb3BlcnR5IGlzIGBmYWxzZWAsIG5vIHBvaW50cyB3b3VsZCBiZSBhdXRvbWF0aWNhbGx5IGFkZGVkIHRvIGxpbmUgb3IgYXJlYSBtYXJrcy5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fIGBmYWxzZWAuXG4gICAqL1xuICBwb2ludD86IGJvb2xlYW4gfCBNYXJrQ29uZmlnIHwgJ3RyYW5zcGFyZW50Jztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBMaW5lQ29uZmlnIGV4dGVuZHMgTWFya0NvbmZpZywgUG9pbnRPdmVybGF5TWl4aW5zIHt9XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGluZU92ZXJsYXlNaXhpbnMge1xuICAvKipcbiAgICogQSBmbGFnIGZvciBvdmVybGF5aW5nIGxpbmUgb24gdG9wIG9mIGFyZWEgbWFya3MsIG9yIGFuIG9iamVjdCBkZWZpbmluZyB0aGUgcHJvcGVydGllcyBvZiB0aGUgb3ZlcmxheWVkIGxpbmVzLlxuICAgKlxuICAgKiAtIElmIHRoaXMgdmFsdWUgaXMgYW4gZW1wdHkgb2JqZWN0IChge31gKSBvciBgdHJ1ZWAsIGxpbmVzIHdpdGggZGVmYXVsdCBwcm9wZXJ0aWVzIHdpbGwgYmUgdXNlZC5cbiAgICpcbiAgICogLSBJZiB0aGlzIHZhbHVlIGlzIGBmYWxzZWAsIG5vIGxpbmVzIHdvdWxkIGJlIGF1dG9tYXRpY2FsbHkgYWRkZWQgdG8gYXJlYSBtYXJrcy5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fIGBmYWxzZWAuXG4gICAqL1xuICBsaW5lPzogYm9vbGVhbiB8IE1hcmtDb25maWc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXJlYUNvbmZpZyBleHRlbmRzIE1hcmtDb25maWcsIFBvaW50T3ZlcmxheU1peGlucywgTGluZU92ZXJsYXlNaXhpbnMge31cblxuZXhwb3J0IGludGVyZmFjZSBUaWNrVGhpY2tuZXNzTWl4aW5zIHtcbiAgLyoqXG4gICAqIFRoaWNrbmVzcyBvZiB0aGUgdGljayBtYXJrLlxuICAgKlxuICAgKiBfX0RlZmF1bHQgdmFsdWU6X18gIGAxYFxuICAgKlxuICAgKiBAbWluaW11bSAwXG4gICAqL1xuICB0aGlja25lc3M/OiBudW1iZXI7XG59XG5cbi8vIFBvaW50L0xpbmUgT3ZlcmxheU1peGlucyBhcmUgb25seSBmb3IgYXJlYSwgbGluZSwgYW5kIHRyYWlsIGJ1dCB3ZSBkb24ndCB3YW50IHRvIGRlY2xhcmUgbXVsdGlwbGUgdHlwZXMgb2YgTWFya0RlZlxuZXhwb3J0IGludGVyZmFjZSBNYXJrRGVmIGV4dGVuZHMgQmFyQmluU3BhY2luZ01peGlucywgTWFya0NvbmZpZywgUG9pbnRPdmVybGF5TWl4aW5zLCBMaW5lT3ZlcmxheU1peGlucywgVGlja1RoaWNrbmVzc01peGlucyB7XG4gIC8qKlxuICAgKiBUaGUgbWFyayB0eXBlLlxuICAgKiBPbmUgb2YgYFwiYmFyXCJgLCBgXCJjaXJjbGVcImAsIGBcInNxdWFyZVwiYCwgYFwidGlja1wiYCwgYFwibGluZVwiYCxcbiAgICogYFwiYXJlYVwiYCwgYFwicG9pbnRcImAsIGBcImdlb3NoYXBlXCJgLCBgXCJydWxlXCJgLCBhbmQgYFwidGV4dFwiYC5cbiAgICovXG4gIHR5cGU6IE1hcms7XG5cbiAgLyoqXG4gICAqIEEgc3RyaW5nIG9yIGFycmF5IG9mIHN0cmluZ3MgaW5kaWNhdGluZyB0aGUgbmFtZSBvZiBjdXN0b20gc3R5bGVzIHRvIGFwcGx5IHRvIHRoZSBtYXJrLiBBIHN0eWxlIGlzIGEgbmFtZWQgY29sbGVjdGlvbiBvZiBtYXJrIHByb3BlcnR5IGRlZmF1bHRzIGRlZmluZWQgd2l0aGluIHRoZSBbc3R5bGUgY29uZmlndXJhdGlvbl0oaHR0cHM6Ly92ZWdhLmdpdGh1Yi5pby92ZWdhLWxpdGUvZG9jcy9tYXJrLmh0bWwjc3R5bGUtY29uZmlnKS4gSWYgc3R5bGUgaXMgYW4gYXJyYXksIGxhdGVyIHN0eWxlcyB3aWxsIG92ZXJyaWRlIGVhcmxpZXIgc3R5bGVzLiBBbnkgW21hcmsgcHJvcGVydGllc10oaHR0cHM6Ly92ZWdhLmdpdGh1Yi5pby92ZWdhLWxpdGUvZG9jcy9lbmNvZGluZy5odG1sI21hcmstcHJvcCkgZXhwbGljaXRseSBkZWZpbmVkIHdpdGhpbiB0aGUgYGVuY29kaW5nYCB3aWxsIG92ZXJyaWRlIGEgc3R5bGUgZGVmYXVsdC5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fIFRoZSBtYXJrJ3MgbmFtZS4gIEZvciBleGFtcGxlLCBhIGJhciBtYXJrIHdpbGwgaGF2ZSBzdHlsZSBgXCJiYXJcImAgYnkgZGVmYXVsdC5cbiAgICogX19Ob3RlOl9fIEFueSBzcGVjaWZpZWQgc3R5bGUgd2lsbCBhdWdtZW50IHRoZSBkZWZhdWx0IHN0eWxlLiBGb3IgZXhhbXBsZSwgYSBiYXIgbWFyayB3aXRoIGBcInN0eWxlXCI6IFwiZm9vXCJgIHdpbGwgcmVjZWl2ZSBmcm9tIGBjb25maWcuc3R5bGUuYmFyYCBhbmQgYGNvbmZpZy5zdHlsZS5mb29gICh0aGUgc3BlY2lmaWVkIHN0eWxlIGBcImZvb1wiYCBoYXMgaGlnaGVyIHByZWNlZGVuY2UpLlxuICAgKi9cbiAgc3R5bGU/OiBzdHJpbmcgfCBzdHJpbmdbXTtcblxuICAvKipcbiAgICogV2hldGhlciBhIG1hcmsgYmUgY2xpcHBlZCB0byB0aGUgZW5jbG9zaW5nIGdyb3Vw4oCZcyB3aWR0aCBhbmQgaGVpZ2h0LlxuICAgKi9cbiAgY2xpcD86IGJvb2xlYW47XG5cbiAgLy8gT2Zmc2V0IHByb3BlcnRpZXMgc2hvdWxkIG5vdCBiZSBhIHBhcnQgb2YgY29uZmlnXG5cbiAgLyoqXG4gICAqIE9mZnNldCBmb3IgeC1wb3NpdGlvbi5cbiAgICovXG4gIHhPZmZzZXQ/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIE9mZnNldCBmb3IgeS1wb3NpdGlvbi5cbiAgICovXG4gIHlPZmZzZXQ/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIE9mZnNldCBmb3IgeDItcG9zaXRpb24uXG4gICAqL1xuICB4Mk9mZnNldD86IG51bWJlcjtcblxuICAvKipcbiAgICogT2Zmc2V0IGZvciB5Mi1wb3NpdGlvbi5cbiAgICovXG4gIHkyT2Zmc2V0PzogbnVtYmVyO1xufVxuXG5leHBvcnQgY29uc3QgZGVmYXVsdEJhckNvbmZpZzogQmFyQ29uZmlnID0ge1xuICBiaW5TcGFjaW5nOiAxLFxuICBjb250aW51b3VzQmFuZFNpemU6IDVcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGV4dENvbmZpZyBleHRlbmRzIE1hcmtDb25maWcge1xuICAvKipcbiAgICogV2hldGhlciBtb250aCBuYW1lcyBhbmQgd2Vla2RheSBuYW1lcyBzaG91bGQgYmUgYWJicmV2aWF0ZWQuXG4gICAqL1xuICBzaG9ydFRpbWVMYWJlbHM/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRpY2tDb25maWcgZXh0ZW5kcyBNYXJrQ29uZmlnLCBUaWNrVGhpY2tuZXNzTWl4aW5zIHtcbiAgLyoqXG4gICAqIFRoZSB3aWR0aCBvZiB0aGUgdGlja3MuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyAgMi8zIG9mIHJhbmdlU3RlcC5cbiAgICogQG1pbmltdW0gMFxuICAgKi9cbiAgYmFuZFNpemU/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0VGlja0NvbmZpZzogVGlja0NvbmZpZyA9IHtcbiAgdGhpY2tuZXNzOiAxXG59O1xuIl19