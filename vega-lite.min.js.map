{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/vl","vega-lite.js","node_modules/browserify/node_modules/process/browser.js","node_modules/datalib/src/bins/bins.js","node_modules/datalib/src/generate.js","node_modules/datalib/src/import/type.js","node_modules/datalib/src/stats.js","node_modules/datalib/src/time-units.js","node_modules/datalib/src/util.js","src/Encoding.js","src/compile/aggregate.js","src/compile/axis.js","src/compile/bin.js","src/compile/compile.js","src/compile/facet.js","src/compile/filter.js","src/compile/group.js","src/compile/layout.js","src/compile/legend.js","src/compile/marks.js","src/compile/scale.js","src/compile/sort.js","src/compile/stack.js","src/compile/style.js","src/compile/subfacet.js","src/compile/template.js","src/compile/time.js","src/consts.js","src/data.js","src/enc.js","src/field.js","src/globals.js","src/schema/schema.js","src/schema/schemautil.js","src/util.js"],"names":["e","exports","module","define","amd","f","window","global","self","vl","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"util","consts","extend","Encoding","compile","data","field","enc","schema","toShorthand","shorthand","./Encoding","./compile/compile","./consts","./data","./enc","./field","./globals","./schema/schema","./util",2,3,"drainQueue","draining","currentQueue","len","queue","noop","process","nextTick","fun","push","setTimeout","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","binding","name","cwd","chdir","dir","umask",4,"bins","opt","step","level","minstep","precision","v","eps","maxb","maxbins","base","logb","Math","log","div","min","max","span","steps","bisect","ceil","pow","round","floor","start","stop","unit","value","index","x","lo","hi","mid","cmp","this","EPSILON","date_value","date","date_index","units","dmin","dmax","minb","minbins","find","spec","raw","../time-units","../util",5,"gen","repeat","val","Array","zeros","range","arguments","Infinity","j","random","uniform","undefined","d","samples","map","integer","b","normal","mean","stdev","next","rds","c","y","sqrt",6,"annotation","types","TYPES","type","values","$","isString","isValid","isDate","isNumber","isBoolean","typeAll","fields","keys","reduce","infer","TESTS","splice","inferAll","PARSERS","boolean","number","string","isNaN","Date","parse","all","parsers",7,"stats","unique","results","count","valid","missing","distinct","median","filter","sort","quantile","quartile","q","p","identity","H","h","sum","delta","variance","isArray","M2","modeskew","avg","med","std","extent","dot","Number","rank","mu","idx","comparator","tie","cor","fn","mua","mub","sda","sdb","ra","rb","dist","aa","bb","ab","X","Y","A","mat","B","exp","isFunction","L2","abs","m","R","M","entropy","counts","LN2","mutual","z","px","py","I","info","profile","sd","vals","q1","q3","summary","__summary__","./generate","./import/type",8,"STEPS","entries","format","UTC","getUTCFullYear","getUTCMonth","minuteOfHour","getUTCMinutes","hourOfDay","getUTCHours","dayOfWeek","getUTCDay","dayOfMonth","getUTCDate","monthOfYear","second","minute","hour","day","month","year","timesteps",9,"util_escape_str","replace","escape_str_re","strrep","str","truncateOnWord","rev","cnt","tok","split","truncate_word_re","reverse","w","join","trim","slice","Buffer","isNode","stderr","FNAME","namedfunc","duplicate","obj","JSON","stringify","equal","k","toMap","list","keystr","String","toString","Object","prototype","isObject","isBuffer","array","shift","apply","accessor","mutator","$func","op","$valid","$length","$year","$month","$date","$day","$hour","$minute","$in","sign","NaN","numcmp","stablesort","sortBy","keyFn","indices","sa","sb","startsWith","searchString","lastIndexOf","pad","pos","padchar","truncate","word","ellipsis","l1","l2","./time-units","_process","buffer",10,"vlfield","vlenc","marktype","config","theme","defaults","instantiate","specExtended","merge","_data","_marktype","_enc","_config","_filter","proto","is","has","encType","et","filterNull","forEach","fieldList","fieldName","Q","containsType","T","O","operands","operator","concat","nodata","nofn","isCount","bin","aggr","fieldTitle","displayName","toUpperCase","scale","axis","band","bandSize","useSmallBand","ROW","COL","size","MAXBINS_DEFAULT","legend","isType","toggleSort","support","qField","init","role","text","prop","TEXT","font","isOrdinalScale","encoding","isDimension","isMeasure","isAggregate","alwaysNoOcclusion","isStack","color","cardinality","isRaw","hasValues","toSpec","excludeConfig","excludeData","subtract","assign","delim","fromShorthand","specFromShorthand","fromSpec","transpose","oldenc","row","col","direction","mode","toggleFilterNullO","nulls",11,"aggregates","dims","meas","detail","facets","transform","groupby","details","aggregated","../globals",12,"axis_title","def","layout","maxlength","cellWidth","cellHeight","setter","angle","align","baseline","dy","height","titleOffset","axisTitleOffset","axis_labels","time","hasScale","textTemplatePath","maxLabelLength","getter","names","props","defs","isCol","isRow","rowOffset","cellPadding","grid","layer","offset","stroke","opacity","x2","group","mult","orient","ticks","./time",13,"binning","output",14,"marks","aggregate","facet","stack","style","subfacet","template","mark","mdefs","mdef","addFilters","sorting","hasRow","hasCol","lineType","line","aggResult","hasDetails","from","by","legends","scales","properties","update","axes","filterLessThanZero","../Encoding","./aggregate","./axis","./bin","./facet","./filter","./group","./layout","./legend","./marks","./scale","./sort","./stack","./style","./subfacet","./template","datalib/src/stats",15,"faceting","axesGrp","enter","facetKeys","cellAxes","fill","error","unshift","groupdef","width","trans",16,"BINARY",">",">=","=","!=","<","<=","filters","condition","op1","op2","console","warn","test",17,"_name",18,"vllayout","box","hasX","hasY","xCardinality","yCardinality","padding","colCardinality","rowCardinality","getMaxLength","maxLength",19,"COLOR","SIZE","SHAPE","shape","labels",20,"bar_props","xc","y2","yc","ALPHA","point_props","strokeWidth","line_props","area_props","tick_props","filled_point_props","text_props","fontSize","fontWeight","fontStyle","bg","TABLE","bar","requiredEncoding","supportedEncoding","alpha","area","tick","circle","square","point",21,"scale_domain","domain","STACKED","getDataset","scale_range","bandWidth","zero","nice","colorRange","outerPadding","points",22,"addSortTransforms","datasetMapping","counter","byClause","dataName","transforms","source","RAW",23,"stacking","dim","isXMeasure","isYMeasure","stacked","y1","y0",24,"estimateOpacity","numPoints","numMultiples","../field",25,"subfaceting","g",26,"table","dataUrl","dataType","url",27,"timeFields","timeFn","tf","fieldFn","func","stat","yearstat","formula","expr","labelLength","substr","isOrdinalFn","isColor",28,"encodingTypes","DETAIL",29,"vldata",30,"encTypes","countRetinal","fieldDef","arr","indexOf","enctype",31,"shorthands","timefns","typeOrder","G","order","typeThenName","toLowerCase","original","typeThenCardinality","getbins","./compile/time",32,"INDEX",33,"enum","supportedEnums","supportedTypes","minimum","default","getSupportedRole","supportedRole","defaultTimeFn","scale_type","clone","typicalField","description","onlyOrdinalField","dimension","axisMixin","supportedMarktypes","sortMixin","items","required","bandMixin","legendMixin","textMixin","margin","weight","family","sizeMixin","colorMixin","alphaMixin","maximum","shapeMixin","detailMixin","rowMixin","colMixin","facetMixin","requiredNameType","multiRoleField","measure","quantitativeField","onlyQuantitativeField","formatType","additionalProperties","viewport","gridColor","gridOpacity","singleHeight","singleWidth","largeBandSize","smallBandSize","largeBandMaxCardinality","cellGridColor","cellGridOpacity","cellBackgroundColor","textCellWidth","singleBarOffset","timeScaleLabelLength","characterWidth","$schema","./schemautil",34,"dest","src","hasOwnProperty","constructor","schemautil","isEmpty","instance","changes","ins",35,"isin","item","thisArg","any","noaugment","msg","datalib/src/bins/bins","datalib/src/generate","datalib/src/util"],"mappings":"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","file":"vega-lite.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\nrequire('./globals');\n\nvar util = require('./util'),\n    consts = require('./consts');\n\nvar vl = {};\n\nutil.extend(vl, consts, util);\n\nvl.Encoding = require('./Encoding');\nvl.compile = require('./compile/compile');\nvl.data = require('./data');\nvl.field = require('./field');\nvl.enc = require('./enc');\nvl.schema = require('./schema/schema');\nvl.toShorthand = vl.Encoding.shorthand;\n\nmodule.exports = vl;","!function(e){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=e();else if(\"function\"==typeof define&&define.amd)define([],e);else{var f;\"undefined\"!=typeof window?f=window:\"undefined\"!=typeof global?f=global:\"undefined\"!=typeof self&&(f=self),f.vl=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nrequire('./globals');\n\nvar util = require('./util'),\n    consts = require('./consts');\n\nvar vl = {};\n\nutil.extend(vl, consts, util);\n\nvl.Encoding = require('./Encoding');\nvl.compile = require('./compile/compile');\nvl.data = require('./data');\nvl.field = require('./field');\nvl.enc = require('./enc');\nvl.schema = require('./schema/schema');\nvl.toShorthand = vl.Encoding.shorthand;\n\nmodule.exports = vl;\n},{\"./Encoding\":10,\"./compile/compile\":14,\"./consts\":28,\"./data\":29,\"./enc\":30,\"./field\":31,\"./globals\":32,\"./schema/schema\":33,\"./util\":35}],2:[function(require,module,exports){\n\n},{}],3:[function(require,module,exports){\n// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    draining = true;\n    var currentQueue;\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        var i = -1;\n        while (++i < len) {\n            currentQueue[i]();\n        }\n        len = queue.length;\n    }\n    draining = false;\n}\nprocess.nextTick = function (fun) {\n    queue.push(fun);\n    if (!draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\n// TODO(shtylman)\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],4:[function(require,module,exports){\nvar util = require('../util');\nvar units = require('../time-units');\nvar EPSILON = 1e-15;\n\nfunction bins(opt) {\n  opt = opt || {};\n\n  // determine range\n  var maxb = opt.maxbins || 15,\n      base = opt.base || 10,\n      logb = Math.log(base),\n      div = opt.div || [5, 2],      \n      min = opt.min,\n      max = opt.max,\n      span = max - min,\n      step, level, minstep, precision, v, i, eps;\n\n  if (opt.step) {\n    // if step size is explicitly given, use that\n    step = opt.step;\n  } else if (opt.steps) {\n    // if provided, limit choice to acceptable step sizes\n    step = opt.steps[Math.min(\n      opt.steps.length - 1,\n      bisect(opt.steps, span/maxb, 0, opt.steps.length)\n    )];\n  } else {\n    // else use span to determine step size\n    level = Math.ceil(Math.log(maxb) / logb);\n    minstep = opt.minstep || 0;\n    step = Math.max(\n      minstep,\n      Math.pow(base, Math.round(Math.log(span) / logb) - level)\n    );\n    \n    // increase step size if too many bins\n    do { step *= base; } while (Math.ceil(span/step) > maxb);\n\n    // decrease step size if allowed\n    for (i=0; i<div.length; ++i) {\n      v = step / div[i];\n      if (v >= minstep && span / v <= maxb) step = v;\n    }\n  }\n\n  // update precision, min and max\n  v = Math.log(step);\n  precision = v >= 0 ? 0 : ~~(-v / logb) + 1;\n  eps = Math.pow(base, -precision - 1);\n  min = Math.min(min, Math.floor(min / step + eps) * step);\n  max = Math.ceil(max / step) * step;\n\n  return {\n    start: min,\n    stop:  max,\n    step:  step,\n    unit:  {precision: precision},\n    value: value,\n    index: index\n  };\n}\n\nfunction bisect(a, x, lo, hi) {\n  while (lo < hi) {\n    var mid = lo + hi >>> 1;\n    if (util.cmp(a[mid], x) < 0) { lo = mid + 1; }\n    else { hi = mid; }\n  }\n  return lo;\n}\n\nfunction value(v) {\n  return this.step * Math.floor(v / this.step + EPSILON);\n}\n\nfunction index(v) {\n  return Math.floor((v - this.start) / this.step + EPSILON);\n}\n\nfunction date_value(v) {\n  return this.unit.date(value.call(this, v));\n}\n\nfunction date_index(v) {\n  return index.call(this, this.unit.unit(v));\n}\n\nbins.date = function(opt) {\n  opt = opt || {};\n\n  // find time step, then bin\n  var dmin = opt.min,\n      dmax = opt.max,\n      maxb = opt.maxbins || 20,\n      minb = opt.minbins || 4,\n      span = (+dmax) - (+dmin),\n      unit = opt.unit ? units[opt.unit] : units.find(span, minb, maxb),\n      spec = bins({\n        min:     unit.min != null ? unit.min : unit.unit(dmin),\n        max:     unit.max != null ? unit.max : unit.unit(dmax),\n        maxbins: maxb,\n        minstep: unit.minstep,\n        steps:   unit.step\n      });\n\n  spec.unit = unit;\n  spec.index = date_index;\n  if (!opt.raw) spec.value = date_value;\n  return spec;\n};\n\nmodule.exports = bins;\n\n},{\"../time-units\":8,\"../util\":9}],5:[function(require,module,exports){\nvar gen = module.exports = {};\n\ngen.repeat = function(val, n) {\n  var a = Array(n), i;\n  for (i=0; i<n; ++i) a[i] = val;\n  return a;\n};\n\ngen.zeros = function(n) {\n  return gen.repeat(0, n);\n};\n\ngen.range = function(start, stop, step) {\n  if (arguments.length < 3) {\n    step = 1;\n    if (arguments.length < 2) {\n      stop = start;\n      start = 0;\n    }\n  }\n  if ((stop - start) / step == Infinity) throw new Error('Infinite range');\n  var range = [], i = -1, j;\n  if (step < 0) while ((j = start + step * ++i) > stop) range.push(j);\n  else while ((j = start + step * ++i) < stop) range.push(j);\n  return range;\n};\n\ngen.random = {};\n\ngen.random.uniform = function(min, max) {\n  if (max === undefined) {\n    max = min;\n    min = 0;\n  }\n  var d = max - min;\n  var f = function() {\n    return min + d * Math.random();\n  };\n  f.samples = function(n) { return gen.zeros(n).map(f); };\n  return f;\n};\n\ngen.random.integer = function(a, b) {\n  if (b === undefined) {\n    b = a;\n    a = 0;\n  }\n  var d = b - a;\n  var f = function() {\n    return a + Math.floor(d * Math.random());\n  };\n  f.samples = function(n) { return gen.zeros(n).map(f); };\n  return f;\n};\n\ngen.random.normal = function(mean, stdev) {\n  mean = mean || 0;\n  stdev = stdev || 1;\n  var next;\n  var f = function() {\n    var x = 0, y = 0, rds, c;\n    if (next !== undefined) {\n      x = next;\n      next = undefined;\n      return x;\n    }\n    do {\n      x = Math.random()*2-1;\n      y = Math.random()*2-1;\n      rds = x*x + y*y;\n    } while (rds === 0 || rds > 1);\n    c = Math.sqrt(-2*Math.log(rds)/rds); // Box-Muller transform\n    next = mean + y*c*stdev;\n    return mean + x*c*stdev;\n  };\n  f.samples = function(n) { return gen.zeros(n).map(f); };\n  return f;\n};\n},{}],6:[function(require,module,exports){\nvar util = require('../util');\n\nvar TYPES = '__types__';\n\nvar PARSERS = {\n  boolean: util.boolean,\n  integer: util.number,\n  number:  util.number,\n  date:    util.date,\n  string:  function(x) { return x==='' ? null : x; }\n};\n\nvar TESTS = {\n  boolean: function(x) { return x==='true' || x==='false' || util.isBoolean(x); },\n  integer: function(x) { return TESTS.number(x) && (x=+x) === ~~x; },\n  number: function(x) { return !isNaN(+x) && !util.isDate(x); },\n  date: function(x) { return !isNaN(Date.parse(x)); }\n};\n\nfunction annotation(data, types) {\n  if (!types) return data && data[TYPES] || null;\n  data[TYPES] = types;\n}\n\nfunction type(values, f) {\n  f = util.$(f);\n  var v, i, n;\n\n  // if data array has type annotations, use them\n  if (values[TYPES]) {\n    v = f(values[TYPES]);\n    if (util.isString(v)) return v;\n  }\n\n  for (i=0, n=values.length; !util.isValid(v) && i<n; ++i) {\n    v = f ? f(values[i]) : values[i];\n  }\n\n  return util.isDate(v) ? 'date' :\n    util.isNumber(v)    ? 'number' :\n    util.isBoolean(v)   ? 'boolean' :\n    util.isString(v)    ? 'string' : null;\n}\n\nfunction typeAll(data, fields) {\n  if (!data.length) return;\n  fields = fields || util.keys(data[0]);\n  return fields.reduce(function(types, f) {\n    return (types[f] = type(data, f), types);\n  }, {});\n}\n\nfunction infer(values, f) {\n  f = util.$(f);\n  var i, j, v;\n\n  // types to test for, in precedence order\n  var types = ['boolean', 'integer', 'number', 'date'];\n\n  for (i=0; i<values.length; ++i) {\n    // get next value to test\n    v = f ? f(values[i]) : values[i];\n    // test value against remaining types\n    for (j=0; j<types.length; ++j) {\n      if (util.isValid(v) && !TESTS[types[j]](v)) {\n        types.splice(j, 1);\n        j -= 1;\n      }\n    }\n    // if no types left, return 'string'\n    if (types.length === 0) return 'string';\n  }\n\n  return types[0];\n}\n\nfunction inferAll(data, fields) {\n  fields = fields || util.keys(data[0]);\n  return fields.reduce(function(types, f) {\n    var type = infer(data, f);\n    if (PARSERS[type]) types[f] = type;\n    return types;\n  }, {});\n}\n\ntype.annotation = annotation;\ntype.all = typeAll;\ntype.infer = infer;\ntype.inferAll = inferAll;\ntype.parsers = PARSERS;\nmodule.exports = type;\n},{\"../util\":9}],7:[function(require,module,exports){\nvar util = require('./util');\nvar type = require('./import/type');\nvar gen = require('./generate');\nvar stats = {};\n\n// Collect unique values.\n// Output: an array of unique values, in first-observed order\nstats.unique = function(values, f, results) {\n  f = util.$(f);\n  results = results || [];\n  var u = {}, v, i, n;\n  for (i=0, n=values.length; i<n; ++i) {\n    v = f ? f(values[i]) : values[i];\n    if (v in u) continue;\n    u[v] = 1;\n    results.push(v);\n  }\n  return results;\n};\n\n// Return the length of the input array.\nstats.count = function(values) {\n  return values && values.length || 0;\n};\n\n// Count the number of non-null, non-undefined, non-NaN values.\nstats.count.valid = function(values, f) {\n  f = util.$(f);\n  var v, i, n, valid = 0;\n  for (i=0, n=values.length; i<n; ++i) {\n    v = f ? f(values[i]) : values[i];\n    if (util.isValid(v)) valid += 1;\n  }\n  return valid;\n};\n\n// Count the number of null or undefined values.\nstats.count.missing = function(values, f) {\n  f = util.$(f);\n  var v, i, n, count = 0;\n  for (i=0, n=values.length; i<n; ++i) {\n    v = f ? f(values[i]) : values[i];\n    if (v == null) count += 1;\n  }\n  return count;\n};\n\n// Count the number of distinct values.\n// Null, undefined and NaN are each considered distinct values.\nstats.count.distinct = function(values, f) {\n  f = util.$(f);\n  var u = {}, v, i, n, count = 0;\n  for (i=0, n=values.length; i<n; ++i) {\n    v = f ? f(values[i]) : values[i];\n    if (v in u) continue;\n    u[v] = 1;\n    count += 1;\n  }\n  return count;\n};\n\n// Construct a map from distinct values to occurrence counts.\nstats.count.map = function(values, f) {\n  f = util.$(f);\n  var map = {}, v, i, n;\n  for (i=0, n=values.length; i<n; ++i) {\n    v = f ? f(values[i]) : values[i];\n    map[v] = (v in map) ? map[v] + 1 : 1;\n  }\n  return map;\n};\n\n// Compute the median of an array of numbers.\nstats.median = function(values, f) {\n  if (f) values = values.map(util.$(f));\n  values = values.filter(util.isValid).sort(util.cmp);\n  return stats.quantile(values, 0.5);\n};\n\n// Computes the quartile boundaries of an array of numbers.\nstats.quartile = function(values, f) {\n  if (f) values = values.map(util.$(f));\n  values = values.filter(util.isValid).sort(util.cmp);\n  var q = stats.quantile;\n  return [q(values, 0.25), q(values, 0.50), q(values, 0.75)];\n};\n\n// Compute the quantile of a sorted array of numbers.\n// Adapted from the D3.js implementation.\nstats.quantile = function(values, f, p) {\n  if (p === undefined) { p = f; f = util.identity; }\n  f = util.$(f);\n  var H = (values.length - 1) * p + 1,\n      h = Math.floor(H),\n      v = +f(values[h - 1]),\n      e = H - h;\n  return e ? v + e * (f(values[h]) - v) : v;\n};\n\n// Compute the sum of an array of numbers.\nstats.sum = function(values, f) {\n  f = util.$(f);\n  for (var sum=0, i=0, n=values.length, v; i<n; ++i) {\n    v = f ? f(values[i]) : values[i];\n    if (util.isValid(v)) sum += v;\n  }\n  return sum;\n};\n\n// Compute the mean (average) of an array of numbers.\nstats.mean = function(values, f) {\n  f = util.$(f);\n  var mean = 0, delta, i, n, c, v;\n  for (i=0, c=0, n=values.length; i<n; ++i) {\n    v = f ? f(values[i]) : values[i];\n    if (util.isValid(v)) {\n      delta = v - mean;\n      mean = mean + delta / (++c);\n    }\n  }\n  return mean;\n};\n\n// Compute the sample variance of an array of numbers.\nstats.variance = function(values, f) {\n  f = util.$(f);\n  if (!util.isArray(values) || values.length===0) return 0;\n  var mean = 0, M2 = 0, delta, i, c, v;\n  for (i=0, c=0; i<values.length; ++i) {\n    v = f ? f(values[i]) : values[i];\n    if (util.isValid(v)) {\n      delta = v - mean;\n      mean = mean + delta / (++c);\n      M2 = M2 + delta * (v - mean);\n    }\n  }\n  M2 = M2 / (c - 1);\n  return M2;\n};\n\n// Compute the sample standard deviation of an array of numbers.\nstats.stdev = function(values, f) {\n  return Math.sqrt(stats.variance(values, f));\n};\n\n// Compute the Pearson mode skewness ((median-mean)/stdev) of an array of numbers.\nstats.modeskew = function(values, f) {\n  var avg = stats.mean(values, f),\n      med = stats.median(values, f),\n      std = stats.stdev(values, f);\n  return std === 0 ? 0 : (avg - med) / std;\n};\n\n// Find the minimum value in an array.\nstats.min = function(values, f) {\n  return stats.extent(values, f)[0];\n};\n\n// Find the maximum value in an array.\nstats.max = function(values, f) {\n  return stats.extent(values, f)[1];\n};\n\n// Find the minimum and maximum of an array of values.\nstats.extent = function(values, f) {\n  f = util.$(f);\n  var a, b, v, i, n = values.length;\n  for (i=0; i<n; ++i) {\n    v = f ? f(values[i]) : values[i];\n    if (util.isValid(v)) { a = b = v; break; }\n  }\n  for (; i<n; ++i) {\n    v = f ? f(values[i]) : values[i];\n    if (util.isValid(v)) {\n      if (v < a) a = v;\n      if (v > b) b = v;\n    }\n  }\n  return [a, b];\n};\n\n// Find the integer indices of the minimum and maximum values.\nstats.extent.index = function(values, f) {\n  f = util.$(f);\n  var x = -1, y = -1, a, b, v, i, n = values.length;\n  for (i=0; i<n; ++i) {\n    v = f ? f(values[i]) : values[i];\n    if (util.isValid(v)) { a = b = v; x = y = i; break; }\n  }\n  for (; i<n; ++i) {\n    v = f ? f(values[i]) : values[i];\n    if (util.isValid(v)) {\n      if (v < a) { a = v; x = i; }\n      if (v > b) { b = v; y = i; }\n    }\n  }\n  return [x, y];\n};\n\n// Compute the dot product of two arrays of numbers.\nstats.dot = function(values, a, b) {\n  var sum = 0, i, v;\n  if (!b) {\n    if (values.length !== a.length) {\n      throw Error('Array lengths must match.');\n    }\n    for (i=0; i<values.length; ++i) {\n      v = values[i] * a[i];\n      if (!Number.isNaN(v)) sum += v;\n    }\n  } else {\n    a = util.$(a);\n    b = util.$(b);\n    for (i=0; i<values.length; ++i) {\n      v = a(values[i]) * b(values[i]);\n      if (!Number.isNaN(v)) sum += v;\n    }\n  }\n  return sum;\n};\n\n// Compute ascending rank scores for an array of values.\n// Ties are assigned their collective mean rank.\nstats.rank = function(values, f) {\n  f = util.$(f) || util.identity;\n  var a = values.map(function(v, i) {\n      return {idx: i, val: f(v)};\n    })\n    .sort(util.comparator('val'));\n\n  var n = values.length,\n      r = Array(n),\n      tie = -1, p = {}, i, v, mu;\n\n  for (i=0; i<n; ++i) {\n    v = a[i].val;\n    if (tie < 0 && p === v) {\n      tie = i - 1;\n    } else if (tie > -1 && p !== v) {\n      mu = 1 + (i-1 + tie) / 2;\n      for (; tie<i; ++tie) r[a[tie].idx] = mu;\n      tie = -1;\n    }\n    r[a[i].idx] = i + 1;\n    p = v;\n  }\n\n  if (tie > -1) {\n    mu = 1 + (n-1 + tie) / 2;\n    for (; tie<n; ++tie) r[a[tie].idx] = mu;\n  }\n\n  return r;\n};\n\n// Compute the sample Pearson product-moment correlation of two arrays of numbers.\nstats.cor = function(values, a, b) {\n  var fn = b;\n  b = fn ? values.map(util.$(b)) : a;\n  a = fn ? values.map(util.$(a)) : values;\n\n  var dot = stats.dot(a, b),\n      mua = stats.mean(a),\n      mub = stats.mean(b),\n      sda = stats.stdev(a),\n      sdb = stats.stdev(b),\n      n = values.length;\n\n  return (dot - n*mua*mub) / ((n-1) * sda * sdb);\n};\n\n// Compute the Spearman rank correlation of two arrays of values.\nstats.cor.rank = function(values, a, b) {\n  var ra = b ? stats.rank(values, util.$(a)) : stats.rank(values),\n      rb = b ? stats.rank(values, util.$(b)) : stats.rank(a),\n      n = values.length, i, s, d;\n\n  for (i=0, s=0; i<n; ++i) {\n    d = ra[i] - rb[i];\n    s += d * d;\n  }\n\n  return 1 - 6*s / (n * (n*n-1));\n};\n\n// Compute the distance correlation of two arrays of numbers.\n// http://en.wikipedia.org/wiki/Distance_correlation\nstats.cor.dist = function(values, a, b) {\n  var X = b ? values.map(util.$(a)) : values,\n      Y = b ? values.map(util.$(b)) : a;\n\n  var A = stats.dist.mat(X),\n      B = stats.dist.mat(Y),\n      n = A.length,\n      i, aa, bb, ab;\n\n  for (i=0, aa=0, bb=0, ab=0; i<n; ++i) {\n    aa += A[i]*A[i];\n    bb += B[i]*B[i];\n    ab += A[i]*B[i];\n  }\n\n  return Math.sqrt(ab / Math.sqrt(aa*bb));\n};\n\n// Compute the vector distance between two arrays of numbers.\n// Default is Euclidean (exp=2) distance, configurable via exp argument.\nstats.dist = function(values, a, b, exp) {\n  var f = util.isFunction(b) || util.isString(b),\n      X = values,\n      Y = f ? values : a,\n      e = f ? exp : b,\n      L2 = e === 2 || e == null,\n      n = values.length, s = 0, d, i;\n  if (f) {\n    a = util.$(a);\n    b = util.$(b);\n  }\n  for (i=0; i<n; ++i) {\n    d = f ? (a(X[i])-b(Y[i])) : (X[i]-Y[i]);\n    s += L2 ? d*d : Math.pow(Math.abs(d), e);\n  }\n  return L2 ? Math.sqrt(s) : Math.pow(s, 1/e);\n};\n\n// Construct a mean-centered distance matrix for an array of numbers.\nstats.dist.mat = function(X) {\n  var n = X.length,\n      m = n*n,\n      A = Array(m),\n      R = gen.zeros(n),\n      M = 0, v, i, j;\n\n  for (i=0; i<n; ++i) {\n    A[i*n+i] = 0;\n    for (j=i+1; j<n; ++j) {\n      A[i*n+j] = (v = Math.abs(X[i] - X[j]));\n      A[j*n+i] = v;\n      R[i] += v;\n      R[j] += v;\n    }\n  }\n\n  for (i=0; i<n; ++i) {\n    M += R[i];\n    R[i] /= n;\n  }\n  M /= m;\n\n  for (i=0; i<n; ++i) {\n    for (j=i; j<n; ++j) {\n      A[i*n+j] += M - R[i] - R[j];\n      A[j*n+i] = A[i*n+j];\n    }\n  }\n\n  return A;\n};\n\n// Compute the Shannon entropy (log base 2) of an array of counts.\nstats.entropy = function(counts, f) {\n  f = util.$(f);\n  var i, p, s = 0, H = 0, n = counts.length;\n  for (i=0; i<n; ++i) {\n    s += (f ? f(counts[i]) : counts[i]);\n  }\n  if (s === 0) return 0;\n  for (i=0; i<n; ++i) {\n    p = (f ? f(counts[i]) : counts[i]) / s;\n    if (p) H += p * Math.log(p);\n  }\n  return -H / Math.LN2;\n};\n\n// Compute the mutual information between two discrete variables.\n// Returns an array of the form [MI, MI_distance] \n// MI_distance is defined as 1 - I(a,b) / H(a,b).\n// http://en.wikipedia.org/wiki/Mutual_information\nstats.mutual = function(values, a, b, counts) {\n  var x = counts ? values.map(util.$(a)) : values,\n      y = counts ? values.map(util.$(b)) : a,\n      z = counts ? values.map(util.$(counts)) : b;\n\n  var px = {},\n      py = {},\n      n = z.length,\n      s = 0, I = 0, H = 0, p, t, i;\n\n  for (i=0; i<n; ++i) {\n    px[x[i]] = 0;\n    py[y[i]] = 0;\n  }\n\n  for (i=0; i<n; ++i) {\n    px[x[i]] += z[i];\n    py[y[i]] += z[i];\n    s += z[i];\n  }\n\n  t = 1 / (s * Math.LN2);\n  for (i=0; i<n; ++i) {\n    if (z[i] === 0) continue;\n    p = (s * z[i]) / (px[x[i]] * py[y[i]]);\n    I += z[i] * t * Math.log(p);\n    H += z[i] * t * Math.log(z[i]/s);\n  }\n\n  return [I, 1 + I/H];\n};\n\n// Compute the mutual information between two discrete variables.\nstats.mutual.info = function(values, a, b, counts) {\n  return stats.mutual(values, a, b, counts)[0];\n};\n\n// Compute the mutual information distance between two discrete variables.\n// MI_distance is defined as 1 - I(a,b) / H(a,b).\nstats.mutual.dist = function(values, a, b, counts) {\n  return stats.mutual(values, a, b, counts)[1];\n};\n\n// Compute a profile of summary statistics for a variable.\nstats.profile = function(values, f) {\n  var mean = 0,\n      valid = 0,\n      missing = 0,\n      distinct = 0,\n      min = null,\n      max = null,\n      M2 = 0,\n      vals = [],\n      u = {}, delta, sd, i, v, x;\n\n  // compute summary stats\n  for (i=0; i<values.length; ++i) {\n    v = f ? f(values[i]) : values[i];\n\n    // update unique values\n    u[v] = (v in u) ? u[v] + 1 : (distinct += 1, 1);\n\n    if (v == null) {\n      ++missing;\n    } else if (util.isValid(v)) {\n      // update stats\n      x = (typeof v === 'string') ? v.length : v;\n      if (min===null || x < min) min = x;\n      if (max===null || x > max) max = x;\n      delta = x - mean;\n      mean = mean + delta / (++valid);\n      M2 = M2 + delta * (x - mean);\n      vals.push(x);\n    }\n  }\n  M2 = M2 / (valid - 1);\n  sd = Math.sqrt(M2);\n\n  // sort values for median and iqr\n  vals.sort(util.cmp);\n\n  return {\n    type:     type(values, f),\n    unique:   u,\n    count:    values.length,\n    valid:    valid,\n    missing:  missing,\n    distinct: distinct,\n    min:      min,\n    max:      max,\n    mean:     mean,\n    stdev:    sd,\n    median:   (v = stats.quantile(vals, 0.5)),\n    q1:       stats.quantile(vals, 0.25),\n    q3:       stats.quantile(vals, 0.75),\n    modeskew: sd === 0 ? 0 : (mean - v) / sd\n  };\n};\n\n// Compute profiles for all variables in a data set.\nstats.summary = function(data, fields) {\n  fields = fields || util.keys(data[0]);\n  var s = fields.map(function(f) {\n    var p = stats.profile(data, util.$(f));\n    return (p.field = f, p);\n  });\n  return (s.__summary__ = true, s);\n};\n\nmodule.exports = stats;\n},{\"./generate\":5,\"./import/type\":6,\"./util\":9}],8:[function(require,module,exports){\nvar STEPS = [\n  [31536e6, 5],  // 1-year\n  [7776e6, 4],   // 3-month\n  [2592e6, 4],   // 1-month\n  [12096e5, 3],  // 2-week\n  [6048e5, 3],   // 1-week\n  [1728e5, 3],   // 2-day\n  [864e5, 3],    // 1-day\n  [432e5, 2],    // 12-hour\n  [216e5, 2],    // 6-hour\n  [108e5, 2],    // 3-hour\n  [36e5, 2],     // 1-hour\n  [18e5, 1],     // 30-minute\n  [9e5, 1],      // 15-minute\n  [3e5, 1],      // 5-minute\n  [6e4, 1],      // 1-minute\n  [3e4, 0],      // 30-second\n  [15e3, 0],     // 15-second\n  [5e3, 0],      // 5-second\n  [1e3, 0]       // 1-second\n];\n\nfunction isNumber(d) { return typeof d === 'number'; }\n\nvar entries = [\n  {\n    type: 'second',\n    minstep: 1,\n    format: '%Y %b %-d %H:%M:%S.%L',\n    date: function(d) {\n      return new Date(d * 1e3);\n    },\n    unit: function(d) {\n      return (+d / 1e3);\n    }\n  },\n  {\n    type: 'minute',\n    minstep: 1,\n    format: '%Y %b %-d %H:%M',\n    date: function(d) {\n      return new Date(d * 6e4);\n    },\n    unit: function(d) {\n      return ~~(+d / 6e4);\n    }\n  },\n  {\n    type: 'hour',\n    minstep: 1,\n    format: '%Y %b %-d %H:00',\n    date: function(d) {\n      return new Date(d * 36e5);\n    },\n    unit: function(d) {\n      return ~~(+d / 36e5);\n    }\n  },\n  {\n    type: 'day',\n    minstep: 1,\n    step: [1, 7],\n    format: '%Y %b %-d',\n    date: function(d) {\n      return new Date(d * 864e5);\n    },\n    unit: function(d) {\n      return ~~(+d / 864e5);\n    }\n  },\n  {\n    type: 'month',\n    minstep: 1,\n    step: [1, 3, 6],\n    format: '%b %Y',\n    date: function(d) {\n      return new Date(Date.UTC(~~(d / 12), d % 12, 1));\n    },\n    unit: function(d) {\n      if (isNumber(d)) d = new Date(d);\n      return 12 * d.getUTCFullYear() + d.getUTCMonth();\n    }\n  },\n  {\n    type: 'year',\n    minstep: 1,\n    format: '%Y',\n    date: function(d) {\n      return new Date(Date.UTC(d, 0, 1));\n    },\n    unit: function(d) {\n      return (isNumber(d) ? new Date(d) : d).getUTCFullYear();\n    }\n  }\n];\n\nvar minuteOfHour = {\n  type: 'minuteOfHour',\n  min: 0,\n  max: 59,\n  minstep: 1,\n  format: '%M',\n  date: function(d) {\n    return new Date(Date.UTC(1970, 0, 1, 0, d));\n  },\n  unit: function(d) {\n    return (isNumber(d) ? new Date(d) : d).getUTCMinutes();\n  }\n};\n\nvar hourOfDay = {\n  type: 'hourOfDay',\n  min: 0,\n  max: 23,\n  minstep: 1,\n  format: '%H',\n  date: function(d) {\n    return new Date(Date.UTC(1970, 0, 1, d));\n  },\n  unit: function(d) {\n    return (isNumber(d) ? new Date(d) : d).getUTCHours();\n  }\n};\n\nvar dayOfWeek = {\n  type: 'dayOfWeek',\n  min: 0,\n  max: 6,\n  step: [1],\n  format: '%a',\n  date: function(d) {\n    return new Date(Date.UTC(1970, 0, 4 + d));\n  },\n  unit: function(d) {\n    return (isNumber(d) ? new Date(d) : d).getUTCDay();\n  }\n};\n\nvar dayOfMonth = {\n  type: 'dayOfMonth',\n  min: 1,\n  max: 31,\n  step: [1],\n  format: '%-d',\n  date: function(d) {\n    return new Date(Date.UTC(1970, 0, d));\n  },\n  unit: function(d) {\n    return (isNumber(d) ? new Date(d) : d).getUTCDate();\n  }\n};\n\nvar monthOfYear = {\n  type: 'monthOfYear',\n  min: 0,\n  max: 11,\n  step: [1],\n  format: '%b',\n  date: function(d) {\n    return new Date(Date.UTC(1970, d % 12, 1));\n  },\n  unit: function(d) {\n    return (isNumber(d) ? new Date(d) : d).getUTCMonth();\n  }\n};\n\nvar units = {\n  'second':       entries[0],\n  'minute':       entries[1],\n  'hour':         entries[2],\n  'day':          entries[3],\n  'month':        entries[4],\n  'year':         entries[5],\n  'minuteOfHour': minuteOfHour,\n  'hourOfDay':    hourOfDay,\n  'dayOfWeek':    dayOfWeek,\n  'dayOfMonth':   dayOfMonth,\n  'monthOfYear':  monthOfYear,\n  'timesteps':    entries\n};\n\nunits.find = function(span, minb, maxb) {\n  var i, len, bins, step = STEPS[0];\n\n  for (i = 1, len = STEPS.length; i < len; ++i) {\n    step = STEPS[i];\n    if (span > step[0]) {\n      bins = span / step[0];\n      if (bins > maxb) {\n        return entries[STEPS[i - 1][1]];\n      }\n      if (bins >= minb) {\n        return entries[step[1]];\n      }\n    }\n  }\n  return entries[STEPS[STEPS.length - 1][1]];\n};\n\nmodule.exports = units;\n\n},{}],9:[function(require,module,exports){\n(function (process){\nvar Buffer = require('buffer').Buffer;\nvar units = require('./time-units');\nvar u = module.exports = {};\n\n// where are we?\n\nu.isNode = typeof process !== 'undefined' &&\n           typeof process.stderr !== 'undefined';\n\n// utility functions\n\nvar FNAME = '__name__';\n\nu.namedfunc = function(name, f) { return (f[FNAME] = name, f); };\n\nu.name = function(f) { return f==null ? null : f[FNAME]; };\n\nu.identity = function(x) { return x; };\n\nu.true = u.namedfunc('true', function() { return true; });\n\nu.false = u.namedfunc('false', function() { return false; });\n\nu.duplicate = function(obj) {\n  return JSON.parse(JSON.stringify(obj));\n};\n\nu.equal = function(a, b) {\n  return JSON.stringify(a) === JSON.stringify(b);\n};\n\nu.extend = function(obj) {\n  for (var x, name, i=1, len=arguments.length; i<len; ++i) {\n    x = arguments[i];\n    for (name in x) { obj[name] = x[name]; }\n  }\n  return obj;\n};\n\nu.length = function(x) {\n  return x != null && x.length != null ? x.length : null;\n};\n\nu.keys = function(x) {\n  var keys = [], k;\n  for (k in x) keys.push(k);\n  return keys;\n};\n\nu.vals = function(x) {\n  var vals = [], k;\n  for (k in x) vals.push(x[k]);\n  return vals;\n};\n\nu.toMap = function(list, f) {\n  return (f = u.$(f)) ?\n    list.reduce(function(obj, x) { return (obj[f(x)] = 1, obj); }, {}) :\n    list.reduce(function(obj, x) { return (obj[x] = 1, obj); }, {});\n};\n\nu.keystr = function(values) {\n  // use to ensure consistent key generation across modules\n  var n = values.length;\n  if (!n) return '';\n  for (var s=String(values[0]), i=1; i<n; ++i) {\n    s += '|' + String(values[i]);\n  }\n  return s;\n};\n\n// type checking functions\n\nvar toString = Object.prototype.toString;\n\nu.isObject = function(obj) {\n  return obj === Object(obj);\n};\n\nu.isFunction = function(obj) {\n  return toString.call(obj) === '[object Function]';\n};\n\nu.isString = function(obj) {\n  return typeof value === 'string' || toString.call(obj) === '[object String]';\n};\n\nu.isArray = Array.isArray || function(obj) {\n  return toString.call(obj) === '[object Array]';\n};\n\nu.isNumber = function(obj) {\n  return typeof obj === 'number' || toString.call(obj) === '[object Number]';\n};\n\nu.isBoolean = function(obj) {\n  return obj === true || obj === false || toString.call(obj) == '[object Boolean]';\n};\n\nu.isDate = function(obj) {\n  return toString.call(obj) === '[object Date]';\n};\n\nu.isValid = function(obj) {\n  return obj != null && !Number.isNaN(obj);\n};\n\nu.isBuffer = (Buffer && Buffer.isBuffer) || u.false;\n\n// type coercion functions\n\nu.number = function(s) {\n  return s == null || s === '' ? null : +s;\n};\n\nu.boolean = function(s) {\n  return s == null || s === '' ? null : s==='false' ? false : !!s;\n};\n\nu.date = function(s) {\n  return s == null || s === '' ? null : Date.parse(s);\n};\n\nu.array = function(x) {\n  return x != null ? (u.isArray(x) ? x : [x]) : [];\n};\n\nu.str = function(x) {\n  return u.isArray(x) ? '[' + x.map(u.str) + ']'\n    : u.isObject(x) ? JSON.stringify(x)\n    : u.isString(x) ? ('\\''+util_escape_str(x)+'\\'') : x;\n};\n\nvar escape_str_re = /(^|[^\\\\])'/g;\n\nfunction util_escape_str(x) {\n  return x.replace(escape_str_re, '$1\\\\\\'');\n}\n\n// data access functions\n\nu.field = function(f) {\n  return String(f).split('\\\\.')\n    .map(function(d) { return d.split('.'); })\n    .reduce(function(a, b) {\n      if (a.length) { a[a.length-1] += '.' + b.shift(); }\n      a.push.apply(a, b);\n      return a;\n    }, []);\n};\n\nu.accessor = function(f) {\n  var s;\n  return f==null || u.isFunction(f) ? f :\n    u.namedfunc(f, (s = u.field(f)).length > 1 ?\n      function(x) { return s.reduce(function(x,f) { return x[f]; }, x); } :\n      function(x) { return x[f]; }\n    );\n};\n\nu.$ = u.accessor;\n\nu.mutator = function(f) {\n  var s;\n  return u.isString(f) && (s=u.field(f)).length > 1 ?\n    function(x, v) {\n      for (var i=0; i<s.length-1; ++i) x = x[s[i]];\n      x[s[i]] = v;\n    } :\n    function(x, v) { x[f] = v; };\n};\n\nu.$func = function(name, op) {\n  return function(f) {\n    f = u.$(f) || u.identity;\n    var n = name + (u.name(f) ? '_'+u.name(f) : '');\n    return u.namedfunc(n, function(d) { return op(f(d)); });\n  };\n};\n\nu.$valid  = u.$func('valid', u.isValid);\nu.$length = u.$func('length', u.length);\nu.$year   = u.$func('year', units.year.unit);\nu.$month  = u.$func('month', units.monthOfYear.unit);\nu.$date   = u.$func('date', units.dayOfMonth.unit);\nu.$day    = u.$func('day', units.dayOfWeek.unit);\nu.$hour   = u.$func('hour', units.hourOfDay.unit);\nu.$minute = u.$func('minute', units.minuteOfHour.unit);\n\nu.$in = function(f, values) {\n  f = u.$(f);\n  var map = u.isArray(values) ? u.toMap(values) : values;\n  return function(d) { return !!map[f(d)]; };\n};\n\n// comparison / sorting functions\n\nu.comparator = function(sort) {\n  var sign = [];\n  if (sort === undefined) sort = [];\n  sort = u.array(sort).map(function(f) {\n    var s = 1;\n    if      (f[0] === '-') { s = -1; f = f.slice(1); }\n    else if (f[0] === '+') { s = +1; f = f.slice(1); }\n    sign.push(s);\n    return u.accessor(f);\n  });\n  return function(a,b) {\n    var i, n, f, x, y;\n    for (i=0, n=sort.length; i<n; ++i) {\n      f = sort[i]; x = f(a); y = f(b);\n      if (x < y) return -1 * sign[i];\n      if (x > y) return sign[i];\n    }\n    return 0;\n  };\n};\n\nu.cmp = function(a, b) {\n  if (a < b) {\n    return -1;\n  } else if (a > b) {\n    return 1;\n  } else if (a >= b) {\n    return 0;\n  } else if (a === null && b === null) {\n    return 0;\n  } else if (a === null) {\n    return -1;\n  } else if (b === null) {\n    return 1;\n  }\n  return NaN;\n};\n\nu.numcmp = function(a, b) { return a - b; };\n\nu.stablesort = function(array, sortBy, keyFn) {\n  var indices = array.reduce(function(idx, v, i) {\n    return (idx[keyFn(v)] = i, idx);\n  }, {});\n\n  array.sort(function(a, b) {\n    var sa = sortBy(a),\n        sb = sortBy(b);\n    return sa < sb ? -1 : sa > sb ? 1\n         : (indices[keyFn(a)] - indices[keyFn(b)]);\n  });\n\n  return array;\n};\n\n\n// string functions\n\n// ES6 compatibility per https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith#Polyfill\n// We could have used the polyfill code, but lets wait until ES6 becomes a standard first\nu.startsWith = String.prototype.startsWith ?\n  function(string, searchString) {\n    return string.startsWith(searchString);\n  } :\n  function(string, searchString) {\n    return string.lastIndexOf(searchString, 0) === 0;\n  };\n\nu.pad = function(s, length, pos, padchar) {\n  padchar = padchar || \" \";\n  var d = length - s.length;\n  if (d <= 0) return s;\n  switch (pos) {\n    case 'left':\n      return strrep(d, padchar) + s;\n    case 'middle':\n    case 'center':\n      return strrep(Math.floor(d/2), padchar) +\n         s + strrep(Math.ceil(d/2), padchar);\n    default:\n      return s + strrep(d, padchar);\n  }\n};\n\nfunction strrep(n, str) {\n  var s = \"\", i;\n  for (i=0; i<n; ++i) s += str;\n  return s;\n}\n\nu.truncate = function(s, length, pos, word, ellipsis) {\n  var len = s.length;\n  if (len <= length) return s;\n  ellipsis = ellipsis !== undefined ? String(ellipsis) : '\\u2026';\n  var l = Math.max(0, length - ellipsis.length);\n\n  switch (pos) {\n    case 'left':\n      return ellipsis + (word ? truncateOnWord(s,l,1) : s.slice(len-l));\n    case 'middle':\n    case 'center':\n      var l1 = Math.ceil(l/2), l2 = Math.floor(l/2);\n      return (word ? truncateOnWord(s,l1) : s.slice(0,l1)) +\n        ellipsis + (word ? truncateOnWord(s,l2,1) : s.slice(len-l2));\n    default:\n      return (word ? truncateOnWord(s,l) : s.slice(0,l)) + ellipsis;\n  }\n};\n\nfunction truncateOnWord(s, len, rev) {\n  var cnt = 0, tok = s.split(truncate_word_re);\n  if (rev) {\n    s = (tok = tok.reverse())\n      .filter(function(w) { cnt += w.length; return cnt <= len; })\n      .reverse();\n  } else {\n    s = tok.filter(function(w) { cnt += w.length; return cnt <= len; });\n  }\n  return s.length ? s.join('').trim() : tok[0].slice(0, len);\n}\n\nvar truncate_word_re = /([\\u0009\\u000A\\u000B\\u000C\\u000D\\u0020\\u00A0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u2028\\u2029\\u3000\\uFEFF])/;\n\n}).call(this,require('_process'))\n\n},{\"./time-units\":8,\"_process\":3,\"buffer\":2}],10:[function(require,module,exports){\n'use strict';\n\nrequire('./globals');\n\nvar consts = require('./consts'),\n  util = require('./util'),\n  vlfield = require('./field'),\n  vlenc = require('./enc'),\n  schema = require('./schema/schema');\n\nmodule.exports = (function() {\n  function Encoding(marktype, enc, data, config, filter, theme) {\n    var defaults = schema.instantiate();\n\n    var spec = {\n      data: data,\n      marktype: marktype,\n      enc: enc,\n      config: config,\n      filter: filter || []\n    };\n\n    var specExtended = schema.util.merge(defaults, theme || {}, spec) ;\n\n    this._data = specExtended.data;\n    this._marktype = specExtended.marktype;\n    this._enc = specExtended.enc;\n    this._config = specExtended.config;\n    this._filter = specExtended.filter;\n  }\n\n  var proto = Encoding.prototype;\n\n  proto.marktype = function() {\n    return this._marktype;\n  };\n\n  proto.is = function(m) {\n    return this._marktype === m;\n  };\n\n  proto.has = function(encType) {\n    // equivalent to calling vlenc.has(this._enc, encType)\n    return this._enc[encType].name !== undefined;\n  };\n\n  proto.enc = function(et) {\n    return this._enc[et];\n  };\n\n  proto.filter = function() {\n    var filterNull = [],\n      fields = this.fields(),\n      self = this;\n\n    util.forEach(fields, function(fieldList, fieldName) {\n      if (fieldName === '*') return; //count\n\n      if ((self.config('filterNull').Q && fieldList.containsType[Q]) ||\n          (self.config('filterNull').T && fieldList.containsType[T]) ||\n          (self.config('filterNull').O && fieldList.containsType[O])) {\n        filterNull.push({\n          operands: [fieldName],\n          operator: 'notNull'\n        });\n      }\n    });\n\n    return filterNull.concat(this._filter);\n  };\n\n  // get \"field\" property for vega\n  proto.field = function(et, nodata, nofn) {\n    if (!this.has(et)) return null;\n\n    var f = (nodata ? '' : 'data.');\n\n    if (vlfield.isCount(this._enc[et])) {\n      return f + 'count';\n    } else if (!nofn && this._enc[et].bin) {\n      return f + 'bin_' + this._enc[et].name;\n    } else if (!nofn && this._enc[et].aggr) {\n      return f + this._enc[et].aggr + '_' + this._enc[et].name;\n    } else if (!nofn && this._enc[et].fn) {\n      return f + this._enc[et].fn + '_' + this._enc[et].name;\n    } else {\n      return f + this._enc[et].name;\n    }\n  };\n\n  proto.fieldName = function(et) {\n    return this._enc[et].name;\n  };\n\n  /*\n   * return key-value pairs of field name and list of fields of that field name\n   */\n  proto.fields = function() {\n    return vlenc.fields(this._enc);\n  };\n\n  proto.fieldTitle = function(et) {\n    if (vlfield.isCount(this._enc[et])) {\n      return vlfield.count.displayName;\n    }\n    var fn = this._enc[et].aggr || this._enc[et].fn || (this._enc[et].bin && \"bin\");\n    if (fn) {\n      return fn.toUpperCase() + '(' + this._enc[et].name + ')';\n    } else {\n      return this._enc[et].name;\n    }\n  };\n\n  proto.scale = function(et) {\n    return this._enc[et].scale || {};\n  };\n\n  proto.axis = function(et) {\n    return this._enc[et].axis || {};\n  };\n\n  proto.band = function(et) {\n    return this._enc[et].band || {};\n  };\n\n  proto.bandSize = function(encType, useSmallBand) {\n    useSmallBand = useSmallBand ||\n      //isBandInSmallMultiples\n      (encType === Y && this.has(ROW) && this.has(Y)) ||\n      (encType === X && this.has(COL) && this.has(X));\n\n    // if band.size is explicitly specified, follow the specification, otherwise draw value from config.\n    return this.band(encType).size ||\n      this.config(useSmallBand ? 'smallBandSize' : 'largeBandSize');\n  };\n\n  proto.aggr = function(et) {\n    return this._enc[et].aggr;\n  };\n\n  // returns false if binning is disabled, otherwise an object with binning properties\n  proto.bin = function(et) {\n    var bin = this._enc[et].bin;\n    if (bin === {})\n      return false;\n    if (bin === true)\n      return {\n        maxbins: schema.MAXBINS_DEFAULT\n      };\n    return bin;\n  };\n\n  proto.legend = function(et) {\n    return this._enc[et].legend;\n  };\n\n  proto.value = function(et) {\n    return this._enc[et].value;\n  };\n\n  proto.fn = function(et) {\n    return this._enc[et].fn;\n  };\n\n  proto.sort = function(et, stats) {\n    var sort = this._enc[et].sort,\n      enc = this._enc,\n      isType = vlfield.isType;\n\n    if ((!sort || sort.length===0) &&\n        Encoding.toggleSort.support({enc:this._enc}, stats, true) && //HACK\n        this.config('toggleSort') === 'Q'\n      ) {\n      var qField = isType(enc.x, O) ? enc.y : enc.x;\n\n      if (isType(enc[et], O)) {\n        sort = [{\n          name: qField.name,\n          aggr: qField.aggr,\n          type: qField.type,\n          reverse: true\n        }];\n      }\n    }\n\n    return sort;\n  };\n\n  proto.length = function() {\n    return util.keys(this._enc).length;\n  };\n\n  proto.map = function(f) {\n    return vlenc.map(this._enc, f);\n  };\n\n  proto.reduce = function(f, init) {\n    return vlenc.reduce(this._enc, f, init);\n  };\n\n  proto.forEach = function(f) {\n    return vlenc.forEach(this._enc, f);\n  };\n\n  proto.type = function(et) {\n    return this.has(et) ? this._enc[et].type : null;\n  };\n\n  proto.role = function(et) {\n    return this.has(et) ? vlfield.role(this._enc[et]) : null;\n  };\n\n  proto.text = function(prop) {\n    var text = this._enc[TEXT].text;\n    return prop ? text[prop] : text;\n  };\n\n  proto.font = function(prop) {\n    var font = this._enc[TEXT].font;\n    return prop ? font[prop] : font;\n  };\n\n  proto.isType = function(et, type) {\n    var field = this.enc(et);\n    return field && Encoding.isType(field, type);\n  };\n\n  Encoding.isType = vlfield.isType;\n\n  Encoding.isOrdinalScale = function(encoding, encType) {\n    return vlfield.isOrdinalScale(encoding.enc(encType));\n  };\n\n  Encoding.isDimension = function(encoding, encType) {\n    return vlfield.isDimension(encoding.enc(encType));\n  };\n\n  Encoding.isMeasure = function(encoding, encType) {\n    return vlfield.isMeasure(encoding.enc(encType));\n  };\n\n  proto.isOrdinalScale = function(encType) {\n    return this.has(encType) && Encoding.isOrdinalScale(this, encType);\n  };\n\n  proto.isDimension = function(encType) {\n    return this.has(encType) && Encoding.isDimension(this, encType);\n  };\n\n  proto.isMeasure = function(encType) {\n    return this.has(encType) && Encoding.isMeasure(this, encType);\n  };\n\n  proto.isAggregate = function() {\n    return vlenc.isAggregate(this._enc);\n  };\n\n  Encoding.isAggregate = function(spec) {\n    return vlenc.isAggregate(spec.enc);\n  };\n\n  Encoding.alwaysNoOcclusion = function(spec) {\n    // FIXME raw OxQ with # of rows = # of O\n    return vlenc.isAggregate(spec.enc);\n  };\n\n  Encoding.isStack = function(spec) {\n    // FIXME update this once we have control for stack ...\n    return (spec.marktype === 'bar' || spec.marktype === 'area') &&\n      spec.enc.color;\n  };\n\n  proto.isStack = function() {\n    // FIXME update this once we have control for stack ...\n    return (this.is('bar') || this.is('area')) && this.has('color');\n  };\n\n  proto.cardinality = function(encType, stats) {\n    return vlfield.cardinality(this.enc(encType), stats, this.config('filterNull'));\n  };\n\n  proto.isRaw = function() {\n    return !this.isAggregate();\n  };\n\n  proto.data = function(name) {\n    return this._data[name];\n  };\n\n   // returns whether the encoding has values embedded\n  proto.hasValues = function() {\n    var vals = this.data('values');\n    return vals && vals.length;\n  };\n\n  proto.config = function(name) {\n    return this._config[name];\n  };\n\n  proto.toSpec = function(excludeConfig, excludeData) {\n    var enc = util.duplicate(this._enc),\n      spec;\n\n    spec = {\n      marktype: this._marktype,\n      enc: enc,\n      filter: this._filter\n    };\n\n    if (!excludeConfig) {\n      spec.config = util.duplicate(this._config);\n    }\n\n    if (!excludeData) {\n      spec.data = util.duplicate(this._data);\n    }\n\n    // remove defaults\n    var defaults = schema.instantiate();\n    return schema.util.subtract(spec, defaults);\n  };\n\n  proto.toShorthand = function() {\n    var c = consts.shorthand;\n    return 'mark' + c.assign + this._marktype +\n      c.delim + vlenc.shorthand(this._enc);\n  };\n\n  Encoding.shorthand = function (spec) {\n    var c = consts.shorthand;\n    return 'mark' + c.assign + spec.marktype +\n      c.delim + vlenc.shorthand(spec.enc);\n  };\n\n  Encoding.fromShorthand = function(shorthand, data, config, theme) {\n    var c = consts.shorthand,\n        split = shorthand.split(c.delim),\n        marktype = split.shift().split(c.assign)[1].trim(),\n        enc = vlenc.fromShorthand(split);\n\n    return new Encoding(marktype, enc, data, config, null, theme);\n  };\n\n  Encoding.specFromShorthand = function(shorthand, data, config, excludeConfig) {\n    return Encoding.fromShorthand(shorthand, data, config).toSpec(excludeConfig);\n  };\n\n  Encoding.fromSpec = function(spec, theme) {\n    return new Encoding(spec.marktype, spec.enc, spec.data, spec.config, spec.filter, theme);\n  };\n\n  Encoding.transpose = function(spec) {\n    var oldenc = spec.enc,\n      enc = util.duplicate(spec.enc);\n    enc.x = oldenc.y;\n    enc.y = oldenc.x;\n    enc.row = oldenc.col;\n    enc.col = oldenc.row;\n    spec.enc = enc;\n    return spec;\n  };\n\n  Encoding.toggleSort = function(spec) {\n    spec.config = spec.config || {};\n    spec.config.toggleSort = spec.config.toggleSort === 'Q' ? 'O' :'Q';\n    return spec;\n  };\n\n\n  Encoding.toggleSort.direction = function(spec) {\n    if (!Encoding.toggleSort.support(spec)) { return; }\n    var enc = spec.enc;\n    return enc.x.type === 'O' ? 'x' :  'y';\n  };\n\n  Encoding.toggleSort.mode = function(spec) {\n    return spec.config.toggleSort;\n  };\n\n  Encoding.toggleSort.support = function(spec, stats) {\n    var enc = spec.enc,\n      isType = vlfield.isType;\n\n    if (vlenc.has(enc, ROW) || vlenc.has(enc, COL) ||\n      !vlenc.has(enc, X) || !vlenc.has(enc, Y) ||\n      !Encoding.alwaysNoOcclusion(spec, stats)) {\n      return false;\n    }\n\n    return ( isType(enc.x, O) && vlfield.isMeasure(enc.y)) ? 'x' :\n      ( isType(enc.y, O) && vlfield.isMeasure(enc.x)) ? 'y' : false;\n  };\n\n  Encoding.toggleFilterNullO = function(spec) {\n    spec.config = spec.config || {};\n    spec.config.filterNull = spec.config.filterNull || { //FIXME\n      T: true,\n      Q: true\n    };\n    spec.config.filterNull.O = !spec.config.filterNull.O;\n    return spec;\n  };\n\n  Encoding.toggleFilterNullO.support = function(spec, stats) {\n    var fields = vlenc.fields(spec.enc);\n    for (var fieldName in fields) {\n      var fieldList = fields[fieldName];\n      if (fieldList.containsType.O && fieldName in stats && stats[fieldName].nulls > 0) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  return Encoding;\n})();\n\n},{\"./consts\":28,\"./enc\":30,\"./field\":31,\"./globals\":32,\"./schema/schema\":33,\"./util\":35}],11:[function(require,module,exports){\n'use strict';\n\nrequire('../globals');\n\nvar util = require('../util');\n\nmodule.exports = aggregates;\n\nfunction aggregates(spec, encoding, opt) {\n  opt = opt || {};\n\n  var dims = {}, meas = {}, detail = {}, facets = {},\n    data = spec.data[1]; // currently data[0] is raw and data[1] is table\n\n  encoding.forEach(function(field, encType) {\n    if (field.aggr) {\n      if (field.aggr === 'count') {\n        meas.count = {op: 'count', field: '*'};\n      }else {\n        meas[field.aggr + '|'+ field.name] = {\n          op: field.aggr,\n          field: 'data.'+ field.name\n        };\n      }\n    } else {\n      dims[field.name] = encoding.field(encType);\n      if (encType == ROW || encType == COL) {\n        facets[field.name] = dims[field.name];\n      }else if (encType !== X && encType !== Y) {\n        detail[field.name] = dims[field.name];\n      }\n    }\n  });\n  dims = util.vals(dims);\n  meas = util.vals(meas);\n\n  if (meas.length > 0) {\n    if (!data.transform) data.transform = [];\n    data.transform.push({\n      type: 'aggregate',\n      groupby: dims,\n      fields: meas\n    });\n  }\n  return {\n    details: util.vals(detail),\n    dims: dims,\n    facets: util.vals(facets),\n    aggregated: meas.length > 0\n  };\n}\n\n},{\"../globals\":32,\"../util\":35}],12:[function(require,module,exports){\n'use strict';\n\nrequire('../globals');\n\nvar util = require('../util'),\n  setter = util.setter,\n  getter = util.getter,\n  time = require('./time');\n\nvar axis = module.exports = {};\n\naxis.names = function(props) {\n  return util.keys(util.keys(props).reduce(function(a, x) {\n    var s = props[x].scale;\n    if (s === X || s === Y) a[props[x].scale] = 1;\n    return a;\n  }, {}));\n};\n\naxis.defs = function(names, encoding, layout, stats, opt) {\n  return names.reduce(function(a, name) {\n    a.push(axis.def(name, encoding, layout, stats, opt));\n    return a;\n  }, []);\n};\n\naxis.def = function(name, encoding, layout, stats, opt) {\n  var type = name;\n  var isCol = name == COL, isRow = name == ROW;\n  var rowOffset = axisTitleOffset(encoding, layout, Y) + 20,\n    cellPadding = layout.cellPadding;\n\n\n  if (isCol) type = 'x';\n  if (isRow) type = 'y';\n\n  var def = {\n    type: type,\n    scale: name\n  };\n\n  if (encoding.axis(name).grid) {\n    def.grid = true;\n    def.layer = (isRow || isCol) ? 'front' :  'back';\n\n    if (isCol) {\n      // set grid property -- put the lines on the right the cell\n      setter(def, ['properties', 'grid'], {\n        x: {\n          offset: layout.cellWidth * (1+ cellPadding/2.0),\n          // default value(s) -- vega doesn't do recursive merge\n          scale: 'col'\n        },\n        y: {\n          value: -layout.cellHeight * (cellPadding/2),\n        },\n        stroke: { value: encoding.config('cellGridColor') },\n        opacity: { value: encoding.config('cellGridOpacity') }\n      });\n    } else if (isRow) {\n      // set grid property -- put the lines on the top\n      setter(def, ['properties', 'grid'], {\n        y: {\n          offset: -layout.cellHeight * (cellPadding/2),\n          // default value(s) -- vega doesn't do recursive merge\n          scale: 'row'\n        },\n        x: {\n          value: rowOffset\n        },\n        x2: {\n          offset: rowOffset + (layout.cellWidth * 0.05),\n          // default value(s) -- vega doesn't do recursive merge\n          group: \"mark.group.width\",\n          mult: 1\n        },\n        stroke: { value: encoding.config('cellGridColor') },\n        opacity: { value: encoding.config('cellGridOpacity') }\n      });\n    } else {\n      setter(def, ['properties', 'grid'], {\n        stroke: { value: encoding.config('gridColor') },\n        opacity: { value: encoding.config('gridOpacity') }\n      });\n    }\n  }\n\n  if (encoding.axis(name).title) {\n    def = axis_title(def, name, encoding, layout, opt);\n  }\n\n  if (isRow || isCol) {\n    setter(def, ['properties', 'ticks'], {\n      opacity: {value: 0}\n    });\n    setter(def, ['properties', 'majorTicks'], {\n      opacity: {value: 0}\n    });\n    setter(def, ['properties', 'axis'], {\n      opacity: {value: 0}\n    });\n  }\n\n  if (isCol) {\n    def.orient = 'top';\n  }\n\n  if (isRow) {\n    def.offset = rowOffset;\n  }\n\n  if (name == X) {\n    if (encoding.has(Y) && encoding.isOrdinalScale(Y) && encoding.cardinality(Y, stats) > 30) {\n      def.orient = 'top';\n    }\n\n    if (encoding.isDimension(X) || encoding.isType(X, T)) {\n      setter(def, ['properties','labels'], {\n        angle: {value: 270},\n        align: {value: 'right'},\n        baseline: {value: 'middle'}\n      });\n    } else { // Q\n      def.ticks = 5;\n    }\n  }\n\n  def = axis_labels(def, name, encoding, layout, opt);\n\n  return def;\n};\n\nfunction axis_title(def, name, encoding, layout, opt) {\n  // jshint unused:false\n\n  var maxlength = null,\n    fieldTitle = encoding.fieldTitle(name);\n  if (name===X) {\n    maxlength = layout.cellWidth / encoding.config('characterWidth');\n  } else if (name === Y) {\n    maxlength = layout.cellHeight / encoding.config('characterWidth');\n  }\n\n  def.title = maxlength ? util.truncate(fieldTitle, maxlength) : fieldTitle;\n\n  if (name === ROW) {\n    setter(def, ['properties','title'], {\n      angle: {value: 0},\n      align: {value: 'right'},\n      baseline: {value: 'middle'},\n      dy: {value: (-layout.height/2) -20}\n    });\n  }\n\n  def.titleOffset = axisTitleOffset(encoding, layout, name);\n  return def;\n}\n\nfunction axis_labels(def, name, encoding, layout, opt) {\n  // jshint unused:false\n\n  var fn;\n  // add custom label for time type\n  if (encoding.isType(name, T) && (fn = encoding.fn(name)) && (time.hasScale(fn))) {\n    setter(def, ['properties','labels','text','scale'], 'time-'+ fn);\n  }\n\n  var textTemplatePath = ['properties','labels','text','template'];\n  if (encoding.axis(name).format) {\n    def.format = encoding.axis(name).format;\n  } else if (encoding.isType(name, Q)) {\n    setter(def, textTemplatePath, \"{{data | number:'.3s'}}\");\n  } else if (encoding.isType(name, T) && !encoding.fn(name)) {\n    setter(def, textTemplatePath, \"{{data | time:'%Y-%m-%d'}}\");\n  } else if (encoding.isType(name, T) && encoding.fn(name) === 'year') {\n    setter(def, textTemplatePath, \"{{data | number:'d'}}\");\n  } else if (encoding.isType(name, O) && encoding.axis(name).maxLabelLength) {\n    setter(def, textTemplatePath, '{{data | truncate:' + encoding.axis(name).maxLabelLength + '}}');\n  }\n\n  return def;\n}\n\nfunction axisTitleOffset(encoding, layout, name) {\n  var value = encoding.axis(name).titleOffset;\n  if (value) {\n    return value;\n  }\n  switch (name) {\n    case ROW: return 0;\n    case COL: return 35;\n  }\n  return getter(layout, [name, 'axisTitleOffset']);\n}\n\n},{\"../globals\":32,\"../util\":35,\"./time\":27}],13:[function(require,module,exports){\n'use strict';\n\nrequire('../globals');\n\nmodule.exports = binning;\n\nfunction binning(spec, encoding, opt) {\n  opt = opt || {};\n\n  if (!spec.transform) spec.transform = [];\n\n  encoding.forEach(function(field, encType) {\n    if (encoding.bin(encType)) {\n      spec.transform.push({\n        type: 'bin',\n        field: 'data.' + field.name,\n        output: 'data.bin_' + field.name,\n        maxbins: encoding.bin(encType).maxbins\n      });\n    }\n  });\n}\n\n},{\"../globals\":32}],14:[function(require,module,exports){\n'use strict';\n\nvar summary = module.exports = require('datalib/src/stats').summary;\n\nrequire('../globals');\n\nmodule.exports = compile;\n\nvar Encoding = require('../Encoding'),\n  axis = compile.axis = require('./axis'),\n  filter = compile.filter = require('./filter'),\n  legend = compile.legend = require('./legend'),\n  marks = compile.marks = require('./marks'),\n  scale = compile.scale = require('./scale');\n\ncompile.aggregate = require('./aggregate');\ncompile.bin = require('./bin');\ncompile.facet = require('./facet');\ncompile.group = require('./group');\ncompile.layout = require('./layout');\ncompile.sort = require('./sort');\ncompile.stack = require('./stack');\ncompile.style = require('./style');\ncompile.subfacet = require('./subfacet');\ncompile.template = require('./template');\ncompile.time = require('./time');\n\nfunction compile(spec, stats, theme) {\n  return compile.encoding(Encoding.fromSpec(spec, theme), stats);\n}\n\ncompile.shorthand = function (shorthand, stats, config, theme) {\n  return compile.encoding(Encoding.fromShorthand(shorthand, config, theme), stats);\n};\n\ncompile.encoding = function (encoding, stats) {\n  // no need to pass stats if you pass in the data\n  if (!stats && encoding.hasValues()) {\n    stats = summary(encoding.data('values')).reduce(function(s, p) {\n      s[p.field] = p;\n      return s;\n    }, {});\n  }\n\n  var layout = compile.layout(encoding, stats),\n    style = compile.style(encoding, stats),\n    spec = compile.template(encoding, layout, stats),\n    group = spec.marks[0],\n    mark = marks[encoding.marktype()],\n    mdefs = marks.def(mark, encoding, layout, style),\n    mdef = mdefs[0];  // TODO: remove this dirty hack by refactoring the whole flow\n\n  filter.addFilters(spec, encoding);\n  var sorting = compile.sort(spec, encoding, stats);\n\n  var hasRow = encoding.has(ROW), hasCol = encoding.has(COL);\n\n  for (var i = 0; i < mdefs.length; i++) {\n    group.marks.push(mdefs[i]);\n  }\n\n  compile.bin(spec.data[1], encoding);\n\n  var lineType = marks[encoding.marktype()].line;\n\n  spec = compile.time(spec, encoding);\n\n  // handle subfacets\n  var aggResult = compile.aggregate(spec, encoding),\n    details = aggResult.details,\n    hasDetails = details && details.length > 0,\n    stack = hasDetails && compile.stack(spec, encoding, mdef, aggResult.facets);\n\n  if (hasDetails && (stack || lineType)) {\n    //subfacet to group stack / line together in one group\n    compile.subfacet(group, mdef, details, stack, encoding);\n  }\n\n  // auto-sort line/area values\n  //TODO(kanitw): have some config to turn off auto-sort for line (for line chart that encodes temporal information)\n  if (lineType) {\n    var f = (encoding.isMeasure(X) && encoding.isDimension(Y)) ? Y : X;\n    if (!mdef.from) mdef.from = {};\n    // TODO: why - ?\n    mdef.from.transform = [{type: 'sort', by: '-' + encoding.field(f)}];\n  }\n\n  // Small Multiples\n  if (hasRow || hasCol) {\n    spec = compile.facet(group, encoding, layout, style, sorting, spec, mdef, stack, stats);\n    spec.legends = legend.defs(encoding);\n  } else {\n    group.scales = scale.defs(scale.names(mdef.properties.update), encoding, layout, style, sorting,\n      {stack: stack, stats: stats});\n    group.axes = axis.defs(axis.names(mdef.properties.update), encoding, layout, stats);\n    group.legends = legend.defs(encoding);\n  }\n\n  filter.filterLessThanZero(spec, encoding);\n\n  return spec;\n};\n\n\n},{\"../Encoding\":10,\"../globals\":32,\"./aggregate\":11,\"./axis\":12,\"./bin\":13,\"./facet\":15,\"./filter\":16,\"./group\":17,\"./layout\":18,\"./legend\":19,\"./marks\":20,\"./scale\":21,\"./sort\":22,\"./stack\":23,\"./style\":24,\"./subfacet\":25,\"./template\":26,\"./time\":27,\"datalib/src/stats\":7}],15:[function(require,module,exports){\n'use strict';\n\nrequire('../globals');\n\nvar util = require('../util');\n\nvar axis = require('./axis'),\n  groupdef = require('./group').def,\n  scale = require('./scale');\n\nmodule.exports = faceting;\n\nfunction faceting(group, encoding, layout, style, sorting, spec, mdef, stack, stats) {\n  var enter = group.properties.enter;\n  var facetKeys = [], cellAxes = [], from, axesGrp;\n\n  var hasRow = encoding.has(ROW), hasCol = encoding.has(COL);\n\n  enter.fill = {value: encoding.config('cellBackgroundColor')};\n\n  //move \"from\" to cell level and add facet transform\n  group.from = {data: group.marks[0].from.data};\n\n  // Hack, this needs to be refactored\n  for (var i = 0; i < group.marks.length; i++) {\n    var mark = group.marks[i];\n    if (mark.from.transform) {\n      delete mark.from.data; //need to keep transform for subfacetting case\n    } else {\n      delete mark.from;\n    }\n  }\n\n  if (hasRow) {\n    if (!encoding.isDimension(ROW)) {\n      util.error('Row encoding should be ordinal.');\n    }\n    enter.y = {scale: ROW, field: 'keys.' + facetKeys.length};\n    enter.height = {'value': layout.cellHeight}; // HACK\n\n    facetKeys.push(encoding.field(ROW));\n\n    if (hasCol) {\n      from = util.duplicate(group.from);\n      from.transform = from.transform || [];\n      from.transform.unshift({type: 'facet', keys: [encoding.field(COL)]});\n    }\n\n    axesGrp = groupdef('x-axes', {\n        axes: encoding.has(X) ? axis.defs(['x'], encoding, layout, stats) : undefined,\n        x: hasCol ? {scale: COL, field: 'keys.0'} : {value: 0},\n        width: hasCol && {'value': layout.cellWidth}, //HACK?\n        from: from\n      });\n\n    spec.marks.unshift(axesGrp); // need to prepend so it appears under the plots\n    (spec.axes = spec.axes || []);\n    spec.axes.push.apply(spec.axes, axis.defs(['row'], encoding, layout, stats));\n  } else { // doesn't have row\n    if (encoding.has(X)) {\n      //keep x axis in the cell\n      cellAxes.push.apply(cellAxes, axis.defs(['x'], encoding, layout, stats));\n    }\n  }\n\n  if (hasCol) {\n    if (!encoding.isDimension(COL)) {\n      util.error('Col encoding should be ordinal.');\n    }\n    enter.x = {scale: COL, field: 'keys.' + facetKeys.length};\n    enter.width = {'value': layout.cellWidth}; // HACK\n\n    facetKeys.push(encoding.field(COL));\n\n    if (hasRow) {\n      from = util.duplicate(group.from);\n      from.transform = from.transform || [];\n      from.transform.unshift({type: 'facet', keys: [encoding.field(ROW)]});\n    }\n\n    axesGrp = groupdef('y-axes', {\n      axes: encoding.has(Y) ? axis.defs(['y'], encoding, layout, stats) : undefined,\n      y: hasRow && {scale: ROW, field: 'keys.0'},\n      x: hasRow && {value: 0},\n      height: hasRow && {'value': layout.cellHeight}, //HACK?\n      from: from\n    });\n\n    spec.marks.unshift(axesGrp); // need to prepend so it appears under the plots\n    (spec.axes = spec.axes || []);\n    spec.axes.push.apply(spec.axes, axis.defs(['col'], encoding, layout, stats));\n  } else { // doesn't have col\n    if (encoding.has(Y)) {\n      cellAxes.push.apply(cellAxes, axis.defs(['y'], encoding, layout, stats));\n    }\n  }\n\n  // assuming equal cellWidth here\n  // TODO: support heterogenous cellWidth (maybe by using multiple scales?)\n  spec.scales = (spec.scales || []).concat(scale.defs(\n    scale.names(enter).concat(scale.names(mdef.properties.update)),\n    encoding,\n    layout,\n    style,\n    sorting,\n    {stack: stack, facet: true, stats: stats}\n  )); // row/col scales + cell scales\n\n  if (cellAxes.length > 0) {\n    group.axes = cellAxes;\n  }\n\n  // add facet transform\n  var trans = (group.from.transform || (group.from.transform = []));\n  trans.unshift({type: 'facet', keys: facetKeys});\n\n  return spec;\n}\n\n},{\"../globals\":32,\"../util\":35,\"./axis\":12,\"./group\":17,\"./scale\":21}],16:[function(require,module,exports){\n'use strict';\n\nrequire('../globals');\n\nvar filter = module.exports = {};\n\nvar BINARY = {\n  '>':  true,\n  '>=': true,\n  '=':  true,\n  '!=': true,\n  '<':  true,\n  '<=': true\n};\n\nfilter.addFilters = function(spec, encoding) {\n  var filters = encoding.filter(),\n    data = spec.data[0];  // apply filters to raw data before aggregation\n\n  if (!data.transform)\n    data.transform = [];\n\n  // add custom filters\n  for (var i in filters) {\n    var filter = filters[i];\n\n    var condition = '';\n    var operator = filter.operator;\n    var operands = filter.operands;\n\n    if (BINARY[operator]) {\n      // expects a field and a value\n      if (operator === '=') {\n        operator = '==';\n      }\n\n      var op1 = operands[0];\n      var op2 = operands[1];\n      condition = 'd.data.' + op1 + operator + op2;\n    } else if (operator === 'notNull') {\n      // expects a number of fields\n      for (var j in operands) {\n        condition += 'd.data.' + operands[j] + '!==null';\n        if (j < operands.length - 1) {\n          condition += ' && ';\n        }\n      }\n    } else {\n      console.warn('Unsupported operator: ', operator);\n    }\n\n    data.transform.push({\n      type: 'filter',\n      test: condition\n    });\n  }\n};\n\n// remove less than 0 values if we use log function\nfilter.filterLessThanZero = function(spec, encoding) {\n  encoding.forEach(function(field, encType) {\n    if (encoding.scale(encType).type === 'log') {\n      spec.data[1].transform.push({\n        type: 'filter',\n        test: 'd.' + encoding.field(encType) + '>0'\n      });\n    }\n  });\n};\n\n\n},{\"../globals\":32}],17:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  def: groupdef\n};\n\nfunction groupdef(name, opt) {\n  opt = opt || {};\n  return {\n    _name: name || undefined,\n    type: 'group',\n    from: opt.from,\n    properties: {\n      enter: {\n        x: opt.x || undefined,\n        y: opt.y || undefined,\n        width: opt.width || {group: 'width'},\n        height: opt.height || {group: 'height'}\n      }\n    },\n    scales: opt.scales || undefined,\n    axes: opt.axes || undefined,\n    marks: opt.marks || []\n  };\n}\n\n},{}],18:[function(require,module,exports){\n'use strict';\n\nrequire('../globals');\n\nvar util = require('../util'),\n  setter = util.setter;\n\nmodule.exports = vllayout;\n\nfunction vllayout(encoding, stats) {\n  var layout = box(encoding, stats);\n  layout = offset(encoding, stats, layout);\n  return layout;\n}\n\n/*\n  HACK to set chart size\n  NOTE: this fails for plots driven by derived values (e.g., aggregates)\n  One solution is to update Vega to support auto-sizing\n  In the meantime, auto-padding (mostly) does the trick\n */\nfunction box(encoding, stats) {\n  var hasRow = encoding.has(ROW),\n      hasCol = encoding.has(COL),\n      hasX = encoding.has(X),\n      hasY = encoding.has(Y),\n      marktype = encoding.marktype();\n\n  // FIXME/HACK we need to take filter into account\n  var xCardinality = hasX && encoding.isDimension(X) ? encoding.cardinality(X, stats) : 1,\n    yCardinality = hasY && encoding.isDimension(Y) ? encoding.cardinality(Y, stats) : 1;\n\n  var useSmallBand = xCardinality > encoding.config('largeBandMaxCardinality') ||\n    yCardinality > encoding.config('largeBandMaxCardinality');\n\n  var cellWidth, cellHeight, cellPadding = encoding.config('cellPadding');\n\n  // set cellWidth\n  if (hasX) {\n    if (encoding.isOrdinalScale(X)) {\n      // for ordinal, hasCol or not doesn't matter -- we scale based on cardinality\n      cellWidth = (xCardinality + encoding.band(X).padding) * encoding.bandSize(X, useSmallBand);\n    } else {\n      cellWidth = hasCol || hasRow ? encoding.enc(COL).width :  encoding.config(\"singleWidth\");\n    }\n  } else {\n    if (marktype === TEXT) {\n      cellWidth = encoding.config('textCellWidth');\n    } else {\n      cellWidth = encoding.bandSize(X);\n    }\n  }\n\n  // set cellHeight\n  if (hasY) {\n    if (encoding.isOrdinalScale(Y)) {\n      // for ordinal, hasCol or not doesn't matter -- we scale based on cardinality\n      cellHeight = (yCardinality + encoding.band(Y).padding) * encoding.bandSize(Y, useSmallBand);\n    } else {\n      cellHeight = hasCol || hasRow ? encoding.enc(ROW).height :  encoding.config(\"singleHeight\");\n    }\n  } else {\n    cellHeight = encoding.bandSize(Y);\n  }\n\n  // Cell bands use rangeBands(). There are n-1 padding.  Outerpadding = 0 for cells\n\n  var width = cellWidth, height = cellHeight;\n  if (hasCol) {\n    var colCardinality = encoding.cardinality(COL, stats);\n    width = cellWidth * ((1 + cellPadding) * (colCardinality - 1) + 1);\n  }\n  if (hasRow) {\n    var rowCardinality =  encoding.cardinality(ROW, stats);\n    height = cellHeight * ((1 + cellPadding) * (rowCardinality - 1) + 1);\n  }\n\n  return {\n    // width and height of the whole cell\n    cellWidth: cellWidth,\n    cellHeight: cellHeight,\n    cellPadding: cellPadding,\n    // width and height of the chart\n    width: width,\n    height: height,\n    // information about x and y, such as band size\n    x: {useSmallBand: useSmallBand},\n    y: {useSmallBand: useSmallBand}\n  };\n}\n\nfunction getMaxLength(encoding, stats, et) {\n  // FIXME determine constant for Q and T in a nicer way\n  return encoding.isType(et, Q) ? 20 :\n    encoding.isType(et, T) ? 20 :\n    stats[encoding.fieldName(et)].max;\n}\n\nfunction offset(encoding, stats, layout) {\n  [X, Y].forEach(function (x) {\n    var maxLength;\n    if (encoding.isDimension(x) || encoding.isType(x, T)) {\n      maxLength =  getMaxLength(encoding, stats, x);\n    } else if (encoding.aggr(x) === 'count') {\n      //assign default value for count as it won't have stats\n      maxLength =  3;\n    } else if (encoding.isType(x, Q)) {\n      if (x===X) {\n        maxLength = 3;\n      } else { // Y\n        //assume that default formating is always shorter than 7\n        maxLength = Math.min(getMaxLength(encoding, stats, x), 7);\n      }\n    }\n    setter(layout,[x, 'axisTitleOffset'], encoding.config('characterWidth') *  maxLength + 20);\n  });\n  return layout;\n}\n\n},{\"../globals\":32,\"../util\":35}],19:[function(require,module,exports){\n'use strict';\n\nrequire('../globals');\n\nvar time = require('./time');\n\nvar legend = module.exports = {};\n\nlegend.defs = function(encoding) {\n  var defs = [];\n  // TODO: support alpha\n\n  if (encoding.has(COLOR) && encoding.legend(COLOR)) {\n    defs.push(legend.def(COLOR, encoding, {\n      fill: COLOR,\n      orient: 'right'\n    }));\n  }\n\n  if (encoding.has(SIZE) && encoding.legend(SIZE)) {\n    defs.push(legend.def(SIZE, encoding, {\n      size: SIZE,\n      orient: defs.length === 1 ? 'left' : 'right'\n    }));\n  }\n\n  if (encoding.has(SHAPE) && encoding.legend(SHAPE)) {\n    if (defs.length === 2) {\n      // TODO: fix this\n      console.error('Vega-lite currently only supports two legends');\n      return defs;\n    }\n    defs.push(legend.def(SHAPE, encoding, {\n      shape: SHAPE,\n      orient: defs.length === 1 ? 'left' : 'right'\n    }));\n  }\n\n  return defs;\n};\n\nlegend.def = function(name, encoding, props) {\n  var def = props, fn;\n\n  def.title = encoding.fieldTitle(name);\n\n  if (encoding.isType(name, T) && (fn = encoding.fn(name)) &&\n    time.hasScale(fn)) {\n    var properties = def.properties = def.properties || {},\n      labels = properties.labels = properties.labels || {},\n      text = labels.text = labels.text || {};\n\n    text.scale = 'time-'+ fn;\n  }\n\n  return def;\n};\n\n},{\"../globals\":32,\"./time\":27}],20:[function(require,module,exports){\n'use strict';\n\nrequire('../globals');\n\nvar marks = module.exports = {};\n\nmarks.def = function(mark, encoding, layout, style) {\n  var defs = [];\n\n  // to add a background to text, we need to add it before the text\n  if (encoding.marktype() === TEXT && encoding.has(COLOR)) {\n    var bg = {\n      x: {value: 0},\n      y: {value: 0},\n      x2: {value: layout.cellWidth},\n      y2: {value: layout.cellHeight},\n      fill: {scale: COLOR, field: encoding.field(COLOR)}\n    };\n    defs.push({\n      type: 'rect',\n      from: {data: TABLE},\n      properties: {enter: bg, update: bg}\n    });\n  }\n\n  // add the mark def for the main thing\n  var p = mark.prop(encoding, layout, style);\n  defs.push({\n    type: mark.type,\n    from: {data: TABLE},\n    properties: {enter: p, update: p}\n  });\n\n  return defs;\n};\n\nmarks.bar = {\n  type: 'rect',\n  stack: true,\n  prop: bar_props,\n  requiredEncoding: ['x', 'y'],\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, size: 1, color: 1, alpha: 1}\n};\n\nmarks.line = {\n  type: 'line',\n  line: true,\n  prop: line_props,\n  requiredEncoding: ['x', 'y'],\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, color: 1, alpha: 1, detail:1}\n};\n\nmarks.area = {\n  type: 'area',\n  stack: true,\n  line: true,\n  requiredEncoding: ['x', 'y'],\n  prop: area_props,\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, color: 1, alpha: 1}\n};\n\nmarks.tick = {\n  type: 'rect',\n  prop: tick_props,\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, color: 1, alpha: 1, detail: 1}\n};\n\nmarks.circle = {\n  type: 'symbol',\n  prop: filled_point_props('circle'),\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, size: 1, color: 1, alpha: 1, detail: 1}\n};\n\nmarks.square = {\n  type: 'symbol',\n  prop: filled_point_props('square'),\n  supportedEncoding: marks.circle.supportedEncoding\n};\n\nmarks.point = {\n  type: 'symbol',\n  prop: point_props,\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, size: 1, color: 1, alpha: 1, shape: 1, detail: 1}\n};\n\nmarks.text = {\n  type: 'text',\n  prop: text_props,\n  requiredEncoding: ['text'],\n  supportedEncoding: {row: 1, col: 1, size: 1, color: 1, alpha: 1, text: 1}\n};\n\nfunction bar_props(e, layout, style) {\n  // jshint unused:false\n\n  var p = {};\n\n  // x's and width \n  if (e.isMeasure(X)) {\n    p.x = {scale: X, field: e.field(X)};\n    if (!e.has(Y) || e.isDimension(Y)) {\n      p.x2 = {value: 0};\n    }\n  } else {\n    if (e.has(X)) { // is ordinal\n       p.xc = {scale: X, field: e.field(X)};\n    } else {\n       p.x = {value: 0, offset: e.config('singleBarOffset')};\n    }\n  }\n  \n  // width\n  if (!p.x2) {\n    if (!e.has(X) || e.isOrdinalScale(X)) { // no X or X is ordinal\n      if (e.has(SIZE)) {\n        p.width = {scale: SIZE, field: e.field(SIZE)};\n      } else {\n        p.width = {\n          value: e.bandSize(X, layout.x.useSmallBand),\n          offset: -1\n        };\n      }\n    } else { // X is Quant or Time Scale\n      p.width = {value: 2};\n    }  \n  }\n\n  // y's & height\n  if (e.isMeasure(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n    p.y2 = {group: \"height\"};\n  } else {\n    if (e.has(Y)) { // is ordinal\n      p.yc = {scale: Y, field: e.field(Y)};\n    } else {\n      p.y2 = {group: 'height', offset: -e.config('singleBarOffset')};\n    }\n\n    if (e.has(SIZE)) {\n      p.height = {scale: SIZE, field: e.field(SIZE)};\n    } else {\n      p.height = {\n        value: e.bandSize(Y, layout.y.useSmallBand),\n        offset: -1\n      };\n    }\n  }\n\n\n\n  // fill\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else {\n    p.fill = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  }\n\n  return p;\n}\n\nfunction point_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    p.x = {value: e.bandSize(X, layout.x.useSmallBand) / 2};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {value: e.bandSize(Y, layout.y.useSmallBand) / 2};\n  }\n\n  // size\n  if (e.has(SIZE)) {\n    p.size = {scale: SIZE, field: e.field(SIZE)};\n  } else if (!e.has(SIZE)) {\n    p.size = {value: e.value(SIZE)};\n  }\n\n  // shape\n  if (e.has(SHAPE)) {\n    p.shape = {scale: SHAPE, field: e.field(SHAPE)};\n  } else if (!e.has(SHAPE)) {\n    p.shape = {value: e.value(SHAPE)};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.stroke = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.stroke = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  } else if (!e.has(COLOR)) {\n    p.opacity = {value: style.opacity};\n  }\n\n  p.strokeWidth = {value: e.config('strokeWidth')};\n\n  return p;\n}\n\nfunction line_props(e,layout, style) {\n  // jshint unused:false\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    p.x = {value: 0};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {group: 'height'};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.stroke = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.stroke = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  }\n\n  p.strokeWidth = {value: e.config('strokeWidth')};\n\n  return p;\n}\n\nfunction area_props(e, layout, style) {\n  // jshint unused:false\n  var p = {};\n\n  // x\n  if (e.isMeasure(X)) {\n    p.x = {scale: X, field: e.field(X)};\n    if (e.isDimension(Y)) {\n      p.x2 = {scale: X, value: 0};\n      p.orient = {value: 'horizontal'};\n    }\n  } else if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else {\n    p.x = {value: 0};\n  }\n\n  // y\n  if (e.isMeasure(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n    p.y2 = {scale: Y, value: 0};\n  } else if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else {\n    p.y = {group: 'height'};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.fill = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  }\n\n  return p;\n}\n\nfunction tick_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n    if (e.isDimension(X)) {\n      p.x.offset = -e.bandSize(X, layout.x.useSmallBand) / 3;\n    }\n  } else if (!e.has(X)) {\n    p.x = {value: 0};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n    if (e.isDimension(Y)) {\n      p.y.offset = -e.bandSize(Y, layout.y.useSmallBand) / 3;\n    }\n  } else if (!e.has(Y)) {\n    p.y = {value: 0};\n  }\n\n  // width\n  if (!e.has(X) || e.isDimension(X)) {\n    p.width = {value: e.bandSize(X, layout.y.useSmallBand) / 1.5};\n  } else {\n    p.width = {value: 1};\n  }\n\n  // height\n  if (!e.has(Y) || e.isDimension(Y)) {\n    p.height = {value: e.bandSize(Y, layout.y.useSmallBand) / 1.5};\n  } else {\n    p.height = {value: 1};\n  }\n\n  // fill\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else {\n    p.fill = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  } else if (!e.has(COLOR)) {\n    p.opacity = {value: style.opacity};\n  }\n\n  return p;\n}\n\nfunction filled_point_props(shape) {\n  return function(e, layout, style) {\n    var p = {};\n\n    // x\n    if (e.has(X)) {\n      p.x = {scale: X, field: e.field(X)};\n    } else if (!e.has(X)) {\n      p.x = {value: e.bandSize(X, layout.x.useSmallBand) / 2};\n    }\n\n    // y\n    if (e.has(Y)) {\n      p.y = {scale: Y, field: e.field(Y)};\n    } else if (!e.has(Y)) {\n      p.y = {value: e.bandSize(Y, layout.y.useSmallBand) / 2};\n    }\n\n    // size\n    if (e.has(SIZE)) {\n      p.size = {scale: SIZE, field: e.field(SIZE)};\n    } else if (!e.has(X)) {\n      p.size = {value: e.value(SIZE)};\n    }\n\n    // shape\n    p.shape = {value: shape};\n\n    // fill\n    if (e.has(COLOR)) {\n      p.fill = {scale: COLOR, field: e.field(COLOR)};\n    } else if (!e.has(COLOR)) {\n      p.fill = {value: e.value(COLOR)};\n    }\n\n    // alpha\n    if (e.has(ALPHA)) {\n      p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n    } else if (e.value(ALPHA) !== undefined) {\n      p.opacity = {value: e.value(ALPHA)};\n    } else if (!e.has(COLOR)) {\n      p.opacity = {value: style.opacity};\n    }\n\n    return p;\n  };\n}\n\nfunction text_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    if (e.has(TEXT) && e.isType(TEXT, Q)) {\n      p.x = {value: layout.cellWidth-5};\n    } else {\n      p.x = {value: e.bandSize(X, layout.x.useSmallBand) / 2};\n    }\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {value: e.bandSize(Y, layout.y.useSmallBand) / 2};\n  }\n\n  // size\n  if (e.has(SIZE)) {\n    p.fontSize = {scale: SIZE, field: e.field(SIZE)};\n  } else if (!e.has(SIZE)) {\n    p.fontSize = {value: e.font('size')};\n  }\n\n  // fill\n  // color should be set to background\n  p.fill = {value: 'black'};\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  } else {\n    p.opacity = {value: style.opacity};\n  }\n\n  // text\n  if (e.has(TEXT)) {\n    if (e.isType(TEXT, Q)) {\n      p.text = {template: \"{{\" + e.field(TEXT) + \" | number:'.3s'}}\"};\n      p.align = {value: 'right'};\n    } else {\n      p.text = {field: e.field(TEXT)};\n    }\n  } else {\n    p.text = {value: 'Abc'};\n  }\n\n  p.font = {value: e.font('family')};\n  p.fontWeight = {value: e.font('weight')};\n  p.fontStyle = {value: e.font('style')};\n  p.baseline = {value: e.text('baseline')};\n\n  return p;\n}\n\n},{\"../globals\":32}],21:[function(require,module,exports){\n'use strict';\nrequire('../globals');\nvar util = require('../util'),\n  time = require('./time');\n\nvar scale = module.exports = {};\n\nscale.names = function(props) {\n  return util.keys(util.keys(props).reduce(function(a, x) {\n    if (props[x] && props[x].scale) a[props[x].scale] = 1;\n    return a;\n  }, {}));\n};\n\nscale.defs = function(names, encoding, layout, style, sorting, opt) {\n  opt = opt || {};\n\n  return names.reduce(function(a, name) {\n    var s = {\n      name: name,\n      type: scale.type(name, encoding),\n      domain: scale_domain(name, encoding, sorting, opt)\n    };\n    if (s.type === 'ordinal' && !encoding.bin(name) && encoding.sort(name).length === 0) {\n      s.sort = true;\n    }\n\n    scale_range(s, encoding, layout, style, opt);\n\n    return (a.push(s), a);\n  }, []);\n};\n\nscale.type = function(name, encoding) {\n\n  switch (encoding.type(name)) {\n    case O: return 'ordinal';\n    case T:\n      var fn = encoding.fn(name);\n      return (fn && time.scale.type(fn, name)) || 'time';\n    case Q:\n      if (encoding.bin(name)) {\n        return name === COLOR ? 'linear' : 'ordinal';\n      }\n      return encoding.scale(name).type;\n  }\n};\n\nfunction scale_domain(name, encoding, sorting, opt) {\n  if (encoding.isType(name, T)) {\n    var range = time.scale.domain(encoding.fn(name), name);\n    if(range) return range;\n  }\n\n  return name == opt.stack ?\n    {\n      data: STACKED,\n      field: 'data.' + (opt.facet ? 'max_' : '') + 'sum_' + encoding.field(name, true)\n    } :\n    {data: sorting.getDataset(name), field: encoding.field(name)};\n}\n\nfunction scale_range(s, encoding, layout, style, opt) {\n  // jshint unused:false\n  var spec = encoding.scale(s.name);\n  switch (s.name) {\n    case X:\n      if (s.type === 'ordinal') {\n        s.bandWidth = encoding.bandSize(X, layout.x.useSmallBand);\n      } else {\n        s.range = layout.cellWidth ? [0, layout.cellWidth] : 'width';\n\n        if (encoding.isType(s.name,T) && encoding.fn(s.name) === 'year') {\n          s.zero = false;\n        } else {\n          s.zero = spec.zero === undefined ? true : spec.zero;\n        }\n\n        s.reverse = spec.reverse;\n      }\n      s.round = true;\n      if (s.type === 'time') {\n        s.nice = encoding.fn(s.name);\n      }else {\n        s.nice = true;\n      }\n      break;\n    case Y:\n      if (s.type === 'ordinal') {\n        s.bandWidth = encoding.bandSize(Y, layout.y.useSmallBand);\n      } else {\n        s.range = layout.cellHeight ? [layout.cellHeight, 0] : 'height';\n\n        if (encoding.isType(s.name,T) && encoding.fn(s.name) === 'year') {\n          s.zero = false;\n        } else {\n          s.zero = spec.zero === undefined ? true : spec.zero;\n        }\n\n        s.reverse = spec.reverse;\n      }\n\n      s.round = true;\n\n      if (s.type === 'time') {\n        s.nice = encoding.fn(s.name) || encoding.config('timeScaleNice');\n      }else {\n        s.nice = true;\n      }\n      break;\n    case ROW: // support only ordinal\n      s.bandWidth = layout.cellHeight;\n      s.round = true;\n      s.nice = true;\n      break;\n    case COL: // support only ordinal\n      s.bandWidth = layout.cellWidth;\n      s.round = true;\n      s.nice = true;\n      break;\n    case SIZE:\n      if (encoding.is('bar')) {\n        // FIXME this is definitely incorrect\n        // but let's fix it later since bar size is a bad encoding anyway\n        s.range = [3, Math.max(encoding.bandSize(X), encoding.bandSize(Y))];\n      } else if (encoding.is(TEXT)) {\n        s.range = [8, 40];\n      } else { //point\n        var bandSize = Math.min(encoding.bandSize(X), encoding.bandSize(Y)) - 1;\n        s.range = [10, 0.8 * bandSize*bandSize];\n      }\n      s.round = true;\n      s.zero = false;\n      break;\n    case SHAPE:\n      s.range = 'shapes';\n      break;\n    case COLOR:\n      var range = encoding.scale(COLOR).range;\n      if (range === undefined) {\n        if (s.type === 'ordinal') {\n          // FIXME\n          range = style.colorRange;\n        } else {\n          range = ['#A9DB9F', '#0D5C21'];\n          s.zero = false;\n        }\n      }\n      s.range = range;\n      break;\n    case ALPHA:\n      s.range = [0.2, 1.0];\n      break;\n    default:\n      throw new Error('Unknown encoding name: '+ s.name);\n  }\n\n  switch (s.name) {\n    case ROW:\n    case COL:\n      s.padding = encoding.config('cellPadding');\n      s.outerPadding = 0;\n      break;\n    case X:\n    case Y:\n      if (s.type === 'ordinal') { //&& !s.bandWidth\n        s.points = true;\n        s.padding = encoding.band(s.name).padding;\n      }\n  }\n}\n\n},{\"../globals\":32,\"../util\":35,\"./time\":27}],22:[function(require,module,exports){\n'use strict';\n\nrequire('../globals');\n\nmodule.exports = addSortTransforms;\n\n// adds new transforms that produce sorted fields\nfunction addSortTransforms(spec, encoding, stats, opt) {\n  // jshint unused:false\n\n  var datasetMapping = {};\n  var counter = 0;\n\n  encoding.forEach(function(field, encType) {\n    var sortBy = encoding.sort(encType, stats);\n    if (sortBy.length > 0) {\n      var fields = sortBy.map(function(d) {\n        return {\n          op: d.aggr,\n          field: 'data.' + d.name\n        };\n      });\n\n      var byClause = sortBy.map(function(d) {\n        var reverse = (d.reverse ? '-' : '');\n        return reverse + 'data.' + (d.aggr==='count' ? 'count' : (d.aggr + '_' + d.name));\n      });\n\n      var dataName = 'sorted' + counter++;\n\n      var transforms = [\n        {\n          type: 'aggregate',\n          groupby: ['data.' + field.name],\n          fields: fields\n        },\n        {\n          type: 'sort',\n          by: byClause\n        }\n      ];\n\n      spec.data.push({\n        name: dataName,\n        source: RAW,\n        transform: transforms\n      });\n\n      datasetMapping[encType] = dataName;\n    }\n  });\n\n  return {\n    spec: spec,\n    getDataset: function(encType) {\n      var data = datasetMapping[encType];\n      if (!data) {\n        return TABLE;\n      }\n      return data;\n    }\n  };\n}\n\n},{\"../globals\":32}],23:[function(require,module,exports){\n\"use strict\";\n\nrequire('../globals');\n\nvar  marks = require('./marks');\n\nmodule.exports = stacking;\n\nfunction stacking(spec, encoding, mdef, facets) {\n  if (!marks[encoding.marktype()].stack) return false;\n\n  // TODO: add || encoding.has(LOD) here once LOD is implemented\n  if (!encoding.has(COLOR)) return false;\n\n  var dim=null, val=null, idx =null,\n    isXMeasure = encoding.isMeasure(X),\n    isYMeasure = encoding.isMeasure(Y);\n\n  if (isXMeasure && !isYMeasure) {\n    dim = Y;\n    val = X;\n    idx = 0;\n  } else if (isYMeasure && !isXMeasure) {\n    dim = X;\n    val = Y;\n    idx = 1;\n  } else {\n    return null; // no stack encoding\n  }\n\n  // add transform to compute sums for scale\n  var stacked = {\n    name: STACKED,\n    source: TABLE,\n    transform: [{\n      type: 'aggregate',\n      groupby: [encoding.field(dim)].concat(facets), // dim and other facets\n      fields: [{op: 'sum', field: encoding.field(val)}] // TODO check if field with aggr is correct?\n    }]\n  };\n\n  if (facets && facets.length > 0) {\n    stacked.transform.push({ //calculate max for each facet\n      type: 'aggregate',\n      groupby: facets,\n      fields: [{op: 'max', field: 'data.sum_' + encoding.field(val, true)}]\n    });\n  }\n\n  spec.data.push(stacked);\n\n  // add stack transform to mark\n  mdef.from.transform = [{\n    type: 'stack',\n    point: encoding.field(dim),\n    height: encoding.field(val),\n    output: {y1: val, y0: val + '2'}\n  }];\n\n  // TODO: This is super hack-ish -- consolidate into modular mark properties?\n  mdef.properties.update[val] = mdef.properties.enter[val] = {scale: val, field: val};\n  mdef.properties.update[val + '2'] = mdef.properties.enter[val + '2'] = {scale: val, field: val + '2'};\n\n  return val; //return stack encoding\n}\n\n},{\"../globals\":32,\"./marks\":20}],24:[function(require,module,exports){\n'use strict';\n\nrequire('../globals');\n\nvar vlfield = require('../field');\n\nmodule.exports = function(encoding, stats) {\n  return {\n    opacity: estimateOpacity(encoding, stats),\n    colorRange: colorRange(encoding, stats)\n  };\n};\n\nfunction colorRange(encoding, stats){\n  if (encoding.has(COLOR) && encoding.isDimension(COLOR)) {\n    var cardinality = encoding.cardinality(COLOR, stats);\n    if (cardinality <= 10) {\n      return \"category10\";\n    } else {\n      return \"category20\";\n    }\n    // TODO can vega interpolate range for ordinal scale?\n  }\n  return null;\n}\n\nfunction estimateOpacity(encoding,stats) {\n  if (!stats) {\n    return 1;\n  }\n\n  var numPoints = 0;\n\n  if (encoding.isAggregate()) { // aggregate plot\n    numPoints = 1;\n\n    //  get number of points in each \"cell\"\n    //  by calculating product of cardinality\n    //  for each non faceting and non-ordinal X / Y fields\n    //  note that ordinal x,y are not include since we can\n    //  consider that ordinal x are subdividing the cell into subcells anyway\n    encoding.forEach(function(field, encType) {\n\n      if (encType !== ROW && encType !== COL &&\n          !((encType === X || encType === Y) &&\n          vlfield.isOrdinalScale(field))\n        ) {\n        numPoints *= encoding.cardinality(encType, stats);\n      }\n    });\n\n  } else { // raw plot\n    numPoints = stats.count;\n\n    // small multiples divide number of points\n    var numMultiples = 1;\n    if (encoding.has(ROW)) {\n      numMultiples *= encoding.cardinality(ROW, stats);\n    }\n    if (encoding.has(COL)) {\n      numMultiples *= encoding.cardinality(COL, stats);\n    }\n    numPoints /= numMultiples;\n  }\n\n  var opacity = 0;\n  if (numPoints < 20) {\n    opacity = 1;\n  } else if (numPoints < 200) {\n    opacity = 0.7;\n  } else if (numPoints < 1000 || encoding.is('tick')) {\n    opacity = 0.6;\n  } else {\n    opacity = 0.3;\n  }\n\n  return opacity;\n}\n\n\n},{\"../field\":31,\"../globals\":32}],25:[function(require,module,exports){\n'use strict';\n\nrequire('../globals');\n\nvar groupdef = require('./group').def;\n\nmodule.exports = subfaceting;\n\nfunction subfaceting(group, mdef, details, stack, encoding) {\n  var m = group.marks,\n    g = groupdef('subfacet', {marks: m});\n\n  group.marks = [g];\n  g.from = mdef.from;\n  delete mdef.from;\n\n  //TODO test LOD -- we should support stack / line without color (LOD) field\n  var trans = (g.from.transform || (g.from.transform = []));\n  trans.unshift({type: 'facet', keys: details});\n\n  if (stack && encoding.has(COLOR)) {\n    trans.unshift({type: 'sort', by: encoding.field(COLOR)});\n  }\n}\n\n},{\"../globals\":32,\"./group\":17}],26:[function(require,module,exports){\n'use strict';\n\nrequire('../globals');\n\nvar groupdef = require('./group').def,\n  vlfield = require('../field');\n\nmodule.exports = template;\n\nfunction template(encoding, layout, stats) {\n  // jshint unused:false\n\n  var data = {name: RAW, format: {}},\n    table = {name: TABLE, source: RAW},\n    dataUrl = encoding.data('url'),\n    dataType = encoding.data('formatType'),\n    values = encoding.data('values');\n\n  if (encoding.hasValues()) {\n    data.values = values;\n  } else {\n    data.url = dataUrl;\n    data.format.type = dataType;\n  }\n\n  encoding.forEach(function(field, encType) {\n    var name;\n    if (field.type == T) {\n      data.format.parse = data.format.parse || {};\n      data.format.parse[field.name] = 'date';\n    } else if (field.type == Q) {\n      data.format.parse = data.format.parse || {};\n      if (vlfield.isCount(field)) {\n        name = 'count';\n      } else {\n        name = field.name;\n      }\n      data.format.parse[name] = 'number';\n    }\n  });\n\n  return {\n    width: layout.width,\n    height: layout.height,\n    padding: 'auto',\n    data: [data, table],\n    marks: [groupdef('cell', {\n      width: layout.cellWidth ? {value: layout.cellWidth} : undefined,\n      height: layout.cellHeight ? {value: layout.cellHeight} : undefined\n    })]\n  };\n}\n\n},{\"../field\":31,\"../globals\":32,\"./group\":17}],27:[function(require,module,exports){\n'use strict';\n\nvar util = require('../util');\n\nmodule.exports = time;\n\nfunction time(spec, encoding, opt) {\n  // jshint unused:false\n  var timeFields = {}, timeFn = {};\n\n  // find unique formula transformation and bin function\n  encoding.forEach(function(field, encType) {\n    if (field.type === T && field.fn) {\n      timeFields[encoding.field(encType)] = {\n        field: field,\n        encType: encType\n      };\n      timeFn[field.fn] = true;\n    }\n  });\n\n  // add formula transform\n  var data = spec.data[1],\n    transform = data.transform = data.transform || [];\n\n  for (var f in timeFields) {\n    var tf = timeFields[f];\n    time.transform(transform, encoding, tf.encType, tf.field);\n  }\n\n  // add scales\n  var scales = spec.scales = spec.scales || [];\n  for (var fn in timeFn) {\n    time.scale(scales, fn, encoding);\n  }\n  return spec;\n}\n\ntime.cardinality = function(field, stats, filterNull, type) {\n  var fn = field.fn;\n  switch (fn) {\n    case 'seconds': return 60;\n    case 'minutes': return 60;\n    case 'hours': return 24;\n    case 'day': return 7;\n    case 'date': return 31;\n    case 'month': return 12;\n    case 'year':\n      var stat = stats[field.name],\n        yearstat = stats['year_'+field.name];\n\n      if (!yearstat) { return null; }\n\n      return yearstat.distinct -\n        (stat.nulls > 0 && filterNull[type] ? 1 : 0);\n  }\n\n  return null;\n};\n\nfunction fieldFn(func, field) {\n  return 'utc' + func + '(d.data.'+ field.name +')';\n}\n\n/**\n * @return {String} date binning formula of the given field\n */\ntime.formula = function(field) {\n  return fieldFn(field.fn, field);\n};\n\n/** add formula transforms to data */\ntime.transform = function(transform, encoding, encType, field) {\n  transform.push({\n    type: 'formula',\n    field: encoding.field(encType),\n    expr: time.formula(field)\n  });\n};\n\n/** append custom time scales for axis label */\ntime.scale = function(scales, fn, encoding) {\n  var labelLength = encoding.config('timeScaleLabelLength');\n  // TODO add option for shorter scale / custom range\n  switch (fn) {\n    case 'day':\n      scales.push({\n        name: 'time-'+fn,\n        type: 'ordinal',\n        domain: util.range(0, 7),\n        range: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'].map(\n          function(s) { return s.substr(0, labelLength);}\n        )\n      });\n      break;\n    case 'month':\n      scales.push({\n        name: 'time-'+fn,\n        type: 'ordinal',\n        domain: util.range(0, 12),\n        range: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'].map(\n            function(s) { return s.substr(0, labelLength);}\n          )\n      });\n      break;\n  }\n};\n\ntime.isOrdinalFn = function(fn) {\n  switch (fn) {\n    case 'seconds':\n    case 'minutes':\n    case 'hours':\n    case 'day':\n    case 'date':\n    case 'month':\n      return true;\n  }\n  return false;\n};\n\ntime.scale.type = function(fn, name) {\n  if (name === COLOR) {\n    return 'linear'; // this has order\n  }\n\n  return time.isOrdinalFn(fn) || name === COL || name === ROW ? 'ordinal' : 'linear';\n};\n\ntime.scale.domain = function(fn, name) {\n  var isColor = name === COLOR;\n  switch (fn) {\n    case 'seconds':\n    case 'minutes': return isColor ? [0,59] : util.range(0, 60);\n    case 'hours': return isColor ? [0,23] : util.range(0, 24);\n    case 'day': return isColor ? [0,6] : util.range(0, 7);\n    case 'date': return isColor ? [1,31] : util.range(1, 32);\n    case 'month': return isColor ? [0,11] : util.range(0, 12);\n  }\n  return null;\n};\n\n/** whether a particular time function has custom scale for labels implemented in time.scale */\ntime.hasScale = function(fn) {\n  switch (fn) {\n    case 'day':\n    case 'month':\n      return true;\n  }\n  return false;\n};\n\n\n\n},{\"../util\":35}],28:[function(require,module,exports){\n'use strict';\n\nrequire('./globals');\n\nvar consts = module.exports = {};\n\nconsts.encodingTypes = [X, Y, ROW, COL, SIZE, SHAPE, COLOR, ALPHA, TEXT, DETAIL];\n\nconsts.shorthand = {\n  delim:  '|',\n  assign: '=',\n  type:   ',',\n  func:   '_'\n};\n\n},{\"./globals\":32}],29:[function(require,module,exports){\n'use strict';\n\nvar vldata = module.exports = {};\n\n/** Mapping from datalib's inferred type to Vega-lite's type */\nvldata.types = {\n  'boolean': 'O',\n  'number': 'Q',\n  'integer': 'Q',\n  'date': 'T',\n  'string': 'O'\n};\n\n\n},{}],30:[function(require,module,exports){\n// utility for enc\n\n'use strict';\n\nvar consts = require('./consts'),\n  c = consts.shorthand,\n  vlfield = require('./field'),\n  util = require('./util'),\n  schema = require('./schema/schema'),\n  encTypes = schema.encTypes;\n\nvar vlenc = module.exports = {};\n\nvlenc.countRetinal = function(enc) {\n  var count = 0;\n  if (enc.color) count++;\n  if (enc.alpha) count++;\n  if (enc.size) count++;\n  if (enc.shape) count++;\n  return count;\n};\n\nvlenc.has = function(enc, encType) {\n  var fieldDef = enc && enc[encType];\n  return fieldDef && fieldDef.name;\n};\n\nvlenc.isAggregate = function(enc) {\n  for (var k in enc) {\n    if (vlenc.has(enc, k) && enc[k].aggr) {\n      return true;\n    }\n  }\n  return false;\n};\n\nvlenc.forEach = function(enc, f) {\n  var i = 0;\n  encTypes.forEach(function(k) {\n    if (vlenc.has(enc, k)) {\n      f(enc[k], k, i++);\n    }\n  });\n};\n\nvlenc.map = function(enc, f) {\n  var arr = [];\n  encTypes.forEach(function(k) {\n    if (vlenc.has(enc, k)) {\n      arr.push(f(enc[k], k, enc));\n    }\n  });\n  return arr;\n};\n\nvlenc.reduce = function(enc, f, init) {\n  var r = init;\n  encTypes.forEach(function(k) {\n    if (vlenc.has(enc, k)) {\n      r = f(r, enc[k], k,  enc);\n    }\n  });\n  return r;\n};\n\n/*\n * return key-value pairs of field name and list of fields of that field name\n */\nvlenc.fields = function(enc) {\n  return vlenc.reduce(enc, function (m, field) {\n    var fieldList = m[field.name] = m[field.name] || [],\n      containsType = fieldList.containsType = fieldList.containsType || {};\n\n    if (fieldList.indexOf(field) === -1) {\n      fieldList.push(field);\n      // augment the array with containsType.Q / O / T\n      containsType[field.type] = true;\n    }\n    return m;\n  }, {});\n};\n\nvlenc.shorthand = function(enc) {\n  return vlenc.map(enc, function(field, et) {\n    return et + c.assign + vlfield.shorthand(field);\n  }).join(c.delim);\n};\n\nvlenc.fromShorthand = function(shorthand) {\n  var enc = util.isArray(shorthand) ? shorthand : shorthand.split(c.delim);\n  return enc.reduce(function(m, e) {\n    var split = e.split(c.assign),\n        enctype = split[0].trim(),\n        field = split[1];\n\n    m[enctype] = vlfield.fromShorthand(field);\n    return m;\n  }, {});\n};\n},{\"./consts\":28,\"./field\":31,\"./schema/schema\":33,\"./util\":35}],31:[function(require,module,exports){\n'use strict';\n\n// utility for field\n\nvar consts = require('./consts'),\n  c = consts.shorthand,\n  time = require('./compile/time'),\n  util = require('./util'),\n  schema = require('./schema/schema');\n\nvar vlfield = module.exports = {};\n\nvlfield.shorthand = function(f) {\n  var c = consts.shorthand;\n  return (f.aggr ? f.aggr + c.func : '') +\n    (f.fn ? f.fn + c.func : '') +\n    (f.bin ? 'bin' + c.func : '') +\n    (f.name || '') + c.type + f.type;\n};\n\nvlfield.shorthands = function(fields, delim) {\n  delim = delim || c.delim;\n  return fields.map(vlfield.shorthand).join(delim);\n};\n\nvlfield.fromShorthand = function(shorthand) {\n  var split = shorthand.split(c.type), i;\n  var o = {\n    name: split[0].trim(),\n    type: split[1].trim()\n  };\n\n  // check aggregate type\n  for (i in schema.aggr.enum) {\n    var a = schema.aggr.enum[i];\n    if (o.name.indexOf(a + '_') === 0) {\n      o.name = o.name.substr(a.length + 1);\n      if (a == 'count' && o.name.length === 0) o.name = '*';\n      o.aggr = a;\n      break;\n    }\n  }\n\n  // check time fn\n  for (i in schema.timefns) {\n    var f = schema.timefns[i];\n    if (o.name && o.name.indexOf(f + '_') === 0) {\n      o.name = o.name.substr(o.length + 1);\n      o.fn = f;\n      break;\n    }\n  }\n\n  // check bin\n  if (o.name && o.name.indexOf('bin_') === 0) {\n    o.name = o.name.substr(4);\n    o.bin = true;\n  }\n\n  return o;\n};\n\nvar typeOrder = {\n  O: 0,\n  G: 1,\n  T: 2,\n  Q: 3\n};\n\nvlfield.order = {};\n\nvlfield.order.type = function(field) {\n  if (field.aggr==='count') return 4;\n  return typeOrder[field.type];\n};\n\nvlfield.order.typeThenName = function(field) {\n  return vlfield.order.type(field) + '_' + field.name.toLowerCase();\n};\n\nvlfield.order.original = function() {\n  return 0; // no swap will occur\n};\n\nvlfield.order.name = function(field) {\n  return field.name;\n};\n\nvlfield.order.typeThenCardinality = function(field, stats){\n  return stats[field.name].distinct;\n};\n\nvar isType = vlfield.isType = function (fieldDef, type) {\n  return fieldDef.type === type;\n};\n\n/*\n * Most fields that use ordinal scale are dimensions.\n * However, YEAR(T), YEARMONTH(T) use time scale, not ordinal but are dimensions too.\n */\nvlfield.isOrdinalScale = function(field) {\n  return  isType(field, O) || field.bin ||\n    ( isType(field, T) && field.fn && time.isOrdinalFn(field.fn) );\n};\n\nfunction isDimension(field) {\n  return  isType(field, O) || !!field.bin ||\n    ( isType(field, T) && !!field.fn );\n}\n\n/**\n * For encoding, use encoding.isDimension() to avoid confusion.\n * Or use Encoding.isType if your field is from Encoding (and thus have numeric data type).\n * otherwise, do not specific isType so we can use the default isTypeName here.\n */\nvlfield.isDimension = function(field) {\n  return field && isDimension(field);\n};\n\nvlfield.isMeasure = function(field) {\n  return field && !isDimension(field);\n};\n\nvlfield.role = function(field) {\n  return isDimension(field) ? 'dimension' : 'measure';\n};\n\nvlfield.count = function() {\n  return {name:'*', aggr: 'count', type:'Q', displayName: vlfield.count.displayName};\n};\n\nvlfield.count.displayName = 'Number of Records';\n\nvlfield.isCount = function(field) {\n  return field.aggr === 'count';\n};\n\n/**\n * For encoding, use encoding.cardinality() to avoid confusion.  Or use Encoding.isType if your field is from Encoding (and thus have numeric data type).\n * otherwise, do not specific isType so we can use the default isTypeName here.\n */\nvlfield.cardinality = function(field, stats, filterNull) {\n  // FIXME need to take filter into account\n\n  var stat = stats[field.name];\n  var type = field.type;\n\n  filterNull = filterNull || {};\n\n  if (field.bin) {\n    var bins = util.getbins(stat, field.bin.maxbins || schema.MAXBINS_DEFAULT);\n    return (bins.stop - bins.start) / bins.step;\n  }\n  if (isType(field, T)) {\n    var cardinality = time.cardinality(field, stats, filterNull, type);\n    if(cardinality !== null) return cardinality;\n    //otherwise use calculation below\n  }\n  if (field.aggr) {\n    return 1;\n  }\n\n  // remove null\n  return stat.distinct -\n    (stat.nulls > 0 && filterNull[type] ? 1 : 0);\n};\n\n},{\"./compile/time\":27,\"./consts\":28,\"./schema/schema\":33,\"./util\":35}],32:[function(require,module,exports){\n(function (global){\n'use strict';\n\n// declare global constant\nvar g = global || window;\n\ng.TABLE = 'table';\ng.RAW = 'raw';\ng.STACKED = 'stacked';\ng.INDEX = 'index';\n\ng.X = 'x';\ng.Y = 'y';\ng.ROW = 'row';\ng.COL = 'col';\ng.SIZE = 'size';\ng.SHAPE = 'shape';\ng.COLOR = 'color';\ng.ALPHA = 'alpha';\ng.TEXT = 'text';\ng.DETAIL = 'detail';\n\ng.O = 'O';\ng.Q = 'Q';\ng.T = 'T';\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{}],33:[function(require,module,exports){\n// Package of defining Vega-lite Specification's json schema\n\"use strict\";\n\nvar schema = module.exports = {},\n  util = require('../util');\n\nschema.util = require('./schemautil');\n\nschema.marktype = {\n  type: 'string',\n  enum: ['point', 'tick', 'bar', 'line', 'area', 'circle', 'square', 'text']\n};\n\nschema.aggr = {\n  type: 'string',\n  enum: ['avg', 'sum', 'median', 'min', 'max', 'count'],\n  supportedEnums: {\n    Q: ['avg', 'median', 'sum', 'min', 'max', 'count'],\n    O: [],\n    T: ['avg', 'median', 'min', 'max'],\n    '': ['count']\n  },\n  supportedTypes: {'Q': true, 'O': true, 'T': true, '': true}\n};\nschema.band = {\n  type: 'object',\n  properties: {\n    size: {\n      type: 'integer',\n      minimum: 0\n    },\n    padding: {\n      type: 'integer',\n      minimum: 0,\n      default: 1\n    }\n  }\n};\n\nschema.getSupportedRole = function(encType) {\n  return schema.schema.properties.enc.properties[encType].supportedRole;\n};\n\nschema.timefns = ['year', 'month', 'day', 'date', 'hours', 'minutes', 'seconds'];\n\nschema.defaultTimeFn = 'month';\n\nschema.fn = {\n  type: 'string',\n  enum: schema.timefns,\n  supportedTypes: {'T': true}\n};\n\n//TODO(kanitw): add other type of function here\n\nschema.scale_type = {\n  type: 'string',\n  enum: ['linear', 'log', 'pow', 'sqrt', 'quantile'],\n  default: 'linear',\n  supportedTypes: {'Q': true}\n};\n\nschema.field = {\n  type: 'object',\n  properties: {\n    name: {\n      type: 'string'\n    }\n  }\n};\n\nvar clone = util.duplicate;\nvar merge = schema.util.merge;\n\nschema.MAXBINS_DEFAULT = 15;\n\nvar bin = {\n  type: ['boolean', 'object'],\n  default: false,\n  properties: {\n    maxbins: {\n      type: 'integer',\n      default: schema.MAXBINS_DEFAULT,\n      minimum: 2\n    }\n  },\n  supportedTypes: {'Q': true} // TODO: add 'O' after finishing #81\n};\n\nvar typicalField = merge(clone(schema.field), {\n  type: 'object',\n  properties: {\n    type: {\n      type: 'string',\n      enum: ['O', 'Q', 'T']\n    },\n    aggr: schema.aggr,\n    fn: schema.fn,\n    bin: bin,\n    scale: {\n      type: 'object',\n      properties: {\n        type: schema.scale_type,\n        reverse: {\n          type: 'boolean',\n          default: false,\n          supportedTypes: {'Q': true, 'T': true}\n        },\n        zero: {\n          type: 'boolean',\n          description: 'Include zero',\n          default: true,\n          supportedTypes: {'Q': true, 'T': true}\n        },\n        nice: {\n          type: 'string',\n          enum: ['second', 'minute', 'hour', 'day', 'week', 'month', 'year'],\n          supportedTypes: {'T': true}\n        }\n      }\n    }\n  }\n});\n\nvar onlyOrdinalField = merge(clone(schema.field), {\n  type: 'object',\n  supportedRole: {\n    dimension: true\n  },\n  properties: {\n    type: {\n      type: 'string',\n      enum: ['O','Q', 'T'] // ordinal-only field supports Q when bin is applied and T when fn is applied.\n    },\n    fn: schema.fn,\n    bin: bin,\n    aggr: {\n      type: 'string',\n      enum: ['count'],\n      supportedTypes: {'O': true}\n    }\n  }\n});\n\nvar axisMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true},\n  properties: {\n    axis: {\n      type: 'object',\n      properties: {\n        grid: {\n          type: 'boolean',\n          default: true,\n          description: 'A flag indicate if gridlines should be created in addition to ticks.'\n        },\n        title: {\n          type: 'boolean',\n          default: true,\n          description: 'A title for the axis.'\n        },\n        titleOffset: {\n          type: 'integer',\n          default: undefined,  // auto\n          description: 'A title offset value for the axis.'\n        },\n        format: {\n          type: 'string',\n          default: undefined,  // auto\n          description: 'The formatting pattern for axis labels.'\n        },\n        maxLabelLength: {\n          type: 'integer',\n          default: 25,\n          minimum: 0,\n          description: 'Truncate labels that are too long.'\n        }\n      }\n    }\n  }\n};\n\nvar sortMixin = {\n  type: 'object',\n  properties: {\n    sort: {\n      type: 'array',\n      default: [],\n      items: {\n        type: 'object',\n        supportedTypes: {'O': true},\n        required: ['name', 'aggr'],\n        name: {\n          type: 'string'\n        },\n        aggr: {\n          type: 'string',\n          enum: ['avg', 'sum', 'min', 'max', 'count']\n        },\n        reverse: {\n          type: 'boolean',\n          default: false\n        }\n      }\n    }\n  }\n};\n\nvar bandMixin = {\n  type: 'object',\n  properties: {\n    band: schema.band\n  }\n};\n\nvar legendMixin = {\n  type: 'object',\n  properties: {\n    legend: {\n      type: 'boolean',\n      default: true\n    }\n  }\n};\n\nvar textMixin = {\n  type: 'object',\n  supportedMarktypes: {'text': true},\n  properties: {\n    text: {\n      type: 'object',\n      properties: {\n        align: {\n          type: 'string',\n          default: 'left'\n        },\n        baseline: {\n          type: 'string',\n          default: 'middle'\n        },\n        margin: {\n          type: 'integer',\n          default: 4,\n          minimum: 0\n        }\n      }\n    },\n    font: {\n      type: 'object',\n      properties: {\n        weight: {\n          type: 'string',\n          enum: ['normal', 'bold'],\n          default: 'normal'\n        },\n        size: {\n          type: 'integer',\n          default: 10,\n          minimum: 0\n        },\n        family: {\n          type: 'string',\n          default: 'Helvetica Neue'\n        },\n        style: {\n          type: 'string',\n          default: 'normal',\n          enum: ['normal', 'italic']\n        }\n      }\n    }\n  }\n};\n\nvar sizeMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, bar: true, circle: true, square: true, text: true},\n  properties: {\n    value: {\n      type: 'integer',\n      default: 30,\n      minimum: 0\n    }\n  }\n};\n\nvar colorMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true, 'text': true},\n  properties: {\n    value: {\n      type: 'string',\n      role: 'color',\n      default: 'steelblue'\n    },\n    scale: {\n      type: 'object',\n      properties: {\n        range: {\n          type: ['string', 'array']\n        }\n      }\n    }\n  }\n};\n\nvar alphaMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true, 'text': true},\n  properties: {\n    value: {\n      type: 'number',\n      default: undefined,  // auto\n      minimum: 0,\n      maximum: 1\n    }\n  }\n};\n\nvar shapeMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, circle: true, square: true},\n  properties: {\n    value: {\n      type: 'string',\n      enum: ['circle', 'square', 'cross', 'diamond', 'triangle-up', 'triangle-down'],\n      default: 'circle'\n    }\n  }\n};\n\nvar detailMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, line: true, circle: true, square: true}\n};\n\nvar rowMixin = {\n  properties: {\n    height: {\n      type: 'number',\n      minimum: 0,\n      default: 150\n    },\n    grid: {\n      type: 'boolean',\n      default: true,\n      description: 'A flag indicate if gridlines should be created in addition to ticks.'\n    },\n  }\n};\n\nvar colMixin = {\n  properties: {\n    width: {\n      type: 'number',\n      minimum: 0,\n      default: 150\n    },\n    axis: {\n      properties: {\n        maxLabelLength: {\n          type: 'integer',\n          default: 12,\n          minimum: 0,\n          description: 'Truncate labels that are too long.'\n        }\n      }\n    }\n  }\n};\n\nvar facetMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true, text: true},\n  properties: {\n    padding: {\n      type: 'number',\n      minimum: 0,\n      maximum: 1,\n      default: 0.1\n    }\n  }\n};\n\nvar requiredNameType = {\n  required: ['name', 'type']\n};\n\nvar multiRoleField = merge(clone(typicalField), {\n  supportedRole: {\n    measure: true,\n    dimension: true\n  }\n});\n\nvar quantitativeField = merge(clone(typicalField), {\n  supportedRole: {\n    measure: true,\n    dimension: 'ordinal-only' // using alpha / size to encoding category lead to order interpretation\n  }\n});\n\nvar onlyQuantitativeField = merge(clone(typicalField), {\n  supportedRole: {\n    measure: true\n  }\n});\n\nvar x = merge(clone(multiRoleField), axisMixin, bandMixin, requiredNameType, sortMixin);\nvar y = clone(x);\n\nvar facet = merge(clone(onlyOrdinalField), requiredNameType, facetMixin, sortMixin);\nvar row = merge(clone(facet), axisMixin, rowMixin);\nvar col = merge(clone(facet), axisMixin, colMixin);\n\nvar size = merge(clone(quantitativeField), legendMixin, sizeMixin, sortMixin);\nvar color = merge(clone(multiRoleField), legendMixin, colorMixin, sortMixin);\nvar alpha = merge(clone(quantitativeField), alphaMixin, sortMixin);\nvar shape = merge(clone(onlyOrdinalField), legendMixin, shapeMixin, sortMixin);\nvar detail = merge(clone(onlyOrdinalField), detailMixin, sortMixin);\n\n// we only put aggregated measure in pivot table\nvar text = merge(clone(onlyQuantitativeField), textMixin, sortMixin);\n\n// TODO add label\n\nvar filter = {\n  type: 'array',\n  items: {\n    type: 'object',\n    properties: {\n      operands: {\n        type: 'array',\n        items: {\n          type: ['string', 'boolean', 'integer', 'number']\n        }\n      },\n      operator: {\n        type: 'string',\n        enum: ['>', '>=', '=', '!=', '<', '<=', 'notNull']\n      }\n    }\n  }\n};\n\nvar data = {\n  type: 'object',\n  properties: {\n    // data source\n    formatType: {\n      type: 'string',\n      enum: ['json', 'csv'],\n      default: 'json'\n    },\n    url: {\n      type: 'string',\n      default: undefined\n    },\n    values: {\n      type: 'array',\n      description: 'Pass array of objects instead of a url to a file.',\n      items: {\n        type: 'object',\n        additionalProperties: true\n      }\n    }\n  }\n};\n\nvar config = {\n  type: 'object',\n  properties: {\n    // template\n    width: {\n      type: 'integer',\n      default: undefined\n    },\n    height: {\n      type: 'integer',\n      default: undefined\n    },\n    viewport: {\n      type: 'array',\n      items: {\n        type: 'integer'\n      },\n      default: undefined\n    },\n    gridColor: {\n      type: 'string',\n      role: 'color',\n      default: 'black'\n    },\n    gridOpacity: {\n      type: 'number',\n      minimum: 0,\n      maximum: 1,\n      default: 0.08\n    },\n\n    // filter null\n    filterNull: {\n      type: 'object',\n      properties: {\n        O: {type:'boolean', default: false},\n        Q: {type:'boolean', default: true},\n        T: {type:'boolean', default: true}\n      }\n    },\n    toggleSort: {\n      type: 'string',\n      default: 'O'\n    },\n\n    // single plot\n    singleHeight: {\n      // will be overwritten by bandWidth * (cardinality + padding)\n      type: 'integer',\n      default: 200,\n      minimum: 0\n    },\n    singleWidth: {\n      // will be overwritten by bandWidth * (cardinality + padding)\n      type: 'integer',\n      default: 200,\n      minimum: 0\n    },\n    // band size\n    largeBandSize: {\n      type: 'integer',\n      default: 21,\n      minimum: 0\n    },\n    smallBandSize: {\n      //small multiples or single plot with high cardinality\n      type: 'integer',\n      default: 12,\n      minimum: 0\n    },\n    largeBandMaxCardinality: {\n      type: 'integer',\n      default: 10\n    },\n    // small multiples\n    cellPadding: {\n      type: 'number',\n      default: 0.1\n    },\n    cellGridColor: {\n      type: 'string',\n      role: 'color',\n      default: 'black'\n    },\n    cellGridOpacity: {\n      type: 'number',\n      minimum: 0,\n      maximum: 1,\n      default: 0.15\n    },\n    cellBackgroundColor: {\n      type: 'string',\n      role: 'color',\n      default: 'transparent'\n    },\n    textCellWidth: {\n      type: 'integer',\n      default: 90,\n      minimum: 0\n    },\n\n    // marks\n    strokeWidth: {\n      type: 'integer',\n      default: 2,\n      minimum: 0\n    },\n    singleBarOffset: {\n      type: 'integer',\n      default: 5,\n      minimum: 0\n    },\n\n    // scales\n    timeScaleLabelLength: {\n      type: 'integer',\n      default: 3,\n      minimum: 0\n    },\n    // other\n    characterWidth: {\n      type: 'integer',\n      default: 6\n    }\n  }\n};\n\n/** @type Object Schema of a vega-lite specification */\nschema.schema = {\n  $schema: 'http://json-schema.org/draft-04/schema#',\n  description: 'Schema for Vega-lite specification',\n  type: 'object',\n  required: ['marktype', 'enc', 'data'],\n  properties: {\n    data: data,\n    marktype: schema.marktype,\n    enc: {\n      type: 'object',\n      properties: {\n        x: x,\n        y: y,\n        row: row,\n        col: col,\n        size: size,\n        color: color,\n        alpha: alpha,\n        shape: shape,\n        text: text,\n        detail: detail\n      }\n    },\n    filter: filter,\n    config: config\n  }\n};\n\nschema.encTypes = util.keys(schema.schema.properties.enc.properties);\n\n/** Instantiate a verbose vl spec from the schema */\nschema.instantiate = function() {\n  return schema.util.instantiate(schema.schema);\n};\n\n},{\"../util\":35,\"./schemautil\":34}],34:[function(require,module,exports){\n'use strict';\n\nvar schemautil = module.exports = {},\n  util = require('../util');\n\nvar isEmpty = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\nschemautil.extend = function(instance, schema) {\n  return schemautil.merge(schemautil.instantiate(schema), instance);\n};\n\n// instantiate a schema\nschemautil.instantiate = function(schema) {\n  var val;\n  if (schema === undefined) {\n    return undefined;\n  } else if ('default' in schema) {\n    val = schema.default;\n    return util.isObject(val) ? util.duplicate(val) : val;\n  } else if (schema.type === 'object') {\n    var instance = {};\n    for (var name in schema.properties) {\n      val = schemautil.instantiate(schema.properties[name]);\n      if (val !== undefined) {\n        instance[name] = val;\n      }\n    }\n    return instance;\n  } else if (schema.type === 'array') {\n    return [];\n  }\n  return undefined;\n};\n\n// remove all defaults from an instance\nschemautil.subtract = function(instance, defaults) {\n  var changes = {};\n  for (var prop in instance) {\n    var def = defaults[prop];\n    var ins = instance[prop];\n    // Note: does not properly subtract arrays\n    if (!defaults || def !== ins) {\n      if (typeof ins === 'object' && !util.isArray(ins) && def) {\n        var c = schemautil.subtract(ins, def);\n        if (!isEmpty(c))\n          changes[prop] = c;\n      } else if (!util.isArray(ins) || ins.length > 0) {\n        changes[prop] = ins;\n      }\n    }\n  }\n  return changes;\n};\n\nschemautil.merge = function(/*dest*, src0, src1, ...*/){\n  var dest = arguments[0];\n  for (var i=1 ; i<arguments.length; i++) {\n    dest = merge(dest, arguments[i]);\n  }\n  return dest;\n};\n\n// recursively merges src into dest\nfunction merge(dest, src) {\n  if (typeof src !== 'object' || src === null) {\n    return dest;\n  }\n\n  for (var p in src) {\n    if (!src.hasOwnProperty(p)) {\n      continue;\n    }\n    if (src[p] === undefined) {\n      continue;\n    }\n    if (typeof src[p] !== 'object' || src[p] === null) {\n      dest[p] = src[p];\n    } else if (typeof dest[p] !== 'object' || dest[p] === null) {\n      dest[p] = merge(src[p].constructor === Array ? [] : {}, src[p]);\n    } else {\n      merge(dest[p], src[p]);\n    }\n  }\n  return dest;\n}\n},{\"../util\":35}],35:[function(require,module,exports){\n'use strict';\n\nvar util = module.exports = require('datalib/src/util');\n\nutil.extend(util, require('datalib/src/generate'));\nutil.bin = require('datalib/src/bins/bins');\n\nutil.isin = function(item, array) {\n  return array.indexOf(item) !== -1;\n};\n\nutil.forEach = function(obj, f, thisArg) {\n  if (obj.forEach) {\n    obj.forEach.call(thisArg, f);\n  } else {\n    for (var k in obj) {\n      f.call(thisArg, obj[k], k , obj);\n    }\n  }\n};\n\nutil.reduce = function(obj, f, init, thisArg) {\n  if (obj.reduce) {\n    return obj.reduce.call(thisArg, f, init);\n  } else {\n    for (var k in obj) {\n      init = f.call(thisArg, init, obj[k], k, obj);\n    }\n    return init;\n  }\n};\n\nutil.map = function(obj, f, thisArg) {\n  if (obj.map) {\n    return obj.map.call(thisArg, f);\n  } else {\n    var output = [];\n    for (var k in obj) {\n      output.push( f.call(thisArg, obj[k], k, obj));\n    }\n  }\n};\n\nutil.any = function(arr, f) {\n  var i = 0, k;\n  for (k in arr) {\n    if (f(arr[k], k, i++)) return true;\n  }\n  return false;\n};\n\nutil.all = function(arr, f) {\n  var i = 0, k;\n  for (k in arr) {\n    if (!f(arr[k], k, i++)) return false;\n  }\n  return true;\n};\n\nutil.getbins = function(stats, maxbins) {\n  return util.bin({\n    min: stats.min,\n    max: stats.max,\n    maxbins: maxbins\n  });\n};\n\n/**\n * x[p[0]]...[p[n]] = val\n * @param noaugment determine whether new object should be added f\n * or non-existing properties along the path\n */\nutil.setter = function(x, p, val, noaugment) {\n  for (var i=0; i<p.length-1; ++i) {\n    if (!noaugment && !(p[i] in x)){\n      x = x[p[i]] = {};\n    } else {\n      x = x[p[i]];\n    }\n  }\n  x[p[i]] = val;\n};\n\n\n/**\n * returns x[p[0]]...[p[n]]\n * @param augment determine whether new object should be added f\n * or non-existing properties along the path\n */\nutil.getter = function(x, p, noaugment) {\n  for (var i=0; i<p.length; ++i) {\n    if (!noaugment && !(p[i] in x)){\n      x = x[p[i]] = {};\n    } else {\n      x = x[p[i]];\n    }\n  }\n  return x;\n};\n\nutil.error = function(msg) {\n  console.error('[VL Error]', msg);\n};\n\n\n},{\"datalib/src/bins/bins\":4,\"datalib/src/generate\":5,\"datalib/src/util\":9}]},{},[1])(1)\n});\n//# sourceMappingURL=data:application/json;base64,\n","// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    draining = true;\n    var currentQueue;\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        var i = -1;\n        while (++i < len) {\n            currentQueue[i]();\n        }\n        len = queue.length;\n    }\n    draining = false;\n}\nprocess.nextTick = function (fun) {\n    queue.push(fun);\n    if (!draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\n// TODO(shtylman)\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","var util = require('../util');\nvar units = require('../time-units');\nvar EPSILON = 1e-15;\n\nfunction bins(opt) {\n  opt = opt || {};\n\n  // determine range\n  var maxb = opt.maxbins || 15,\n      base = opt.base || 10,\n      logb = Math.log(base),\n      div = opt.div || [5, 2],      \n      min = opt.min,\n      max = opt.max,\n      span = max - min,\n      step, level, minstep, precision, v, i, eps;\n\n  if (opt.step) {\n    // if step size is explicitly given, use that\n    step = opt.step;\n  } else if (opt.steps) {\n    // if provided, limit choice to acceptable step sizes\n    step = opt.steps[Math.min(\n      opt.steps.length - 1,\n      bisect(opt.steps, span/maxb, 0, opt.steps.length)\n    )];\n  } else {\n    // else use span to determine step size\n    level = Math.ceil(Math.log(maxb) / logb);\n    minstep = opt.minstep || 0;\n    step = Math.max(\n      minstep,\n      Math.pow(base, Math.round(Math.log(span) / logb) - level)\n    );\n    \n    // increase step size if too many bins\n    do { step *= base; } while (Math.ceil(span/step) > maxb);\n\n    // decrease step size if allowed\n    for (i=0; i<div.length; ++i) {\n      v = step / div[i];\n      if (v >= minstep && span / v <= maxb) step = v;\n    }\n  }\n\n  // update precision, min and max\n  v = Math.log(step);\n  precision = v >= 0 ? 0 : ~~(-v / logb) + 1;\n  eps = Math.pow(base, -precision - 1);\n  min = Math.min(min, Math.floor(min / step + eps) * step);\n  max = Math.ceil(max / step) * step;\n\n  return {\n    start: min,\n    stop:  max,\n    step:  step,\n    unit:  {precision: precision},\n    value: value,\n    index: index\n  };\n}\n\nfunction bisect(a, x, lo, hi) {\n  while (lo < hi) {\n    var mid = lo + hi >>> 1;\n    if (util.cmp(a[mid], x) < 0) { lo = mid + 1; }\n    else { hi = mid; }\n  }\n  return lo;\n}\n\nfunction value(v) {\n  return this.step * Math.floor(v / this.step + EPSILON);\n}\n\nfunction index(v) {\n  return Math.floor((v - this.start) / this.step + EPSILON);\n}\n\nfunction date_value(v) {\n  return this.unit.date(value.call(this, v));\n}\n\nfunction date_index(v) {\n  return index.call(this, this.unit.unit(v));\n}\n\nbins.date = function(opt) {\n  opt = opt || {};\n\n  // find time step, then bin\n  var dmin = opt.min,\n      dmax = opt.max,\n      maxb = opt.maxbins || 20,\n      minb = opt.minbins || 4,\n      span = (+dmax) - (+dmin),\n      unit = opt.unit ? units[opt.unit] : units.find(span, minb, maxb),\n      spec = bins({\n        min:     unit.min != null ? unit.min : unit.unit(dmin),\n        max:     unit.max != null ? unit.max : unit.unit(dmax),\n        maxbins: maxb,\n        minstep: unit.minstep,\n        steps:   unit.step\n      });\n\n  spec.unit = unit;\n  spec.index = date_index;\n  if (!opt.raw) spec.value = date_value;\n  return spec;\n};\n\nmodule.exports = bins;\n","var gen = module.exports = {};\n\ngen.repeat = function(val, n) {\n  var a = Array(n), i;\n  for (i=0; i<n; ++i) a[i] = val;\n  return a;\n};\n\ngen.zeros = function(n) {\n  return gen.repeat(0, n);\n};\n\ngen.range = function(start, stop, step) {\n  if (arguments.length < 3) {\n    step = 1;\n    if (arguments.length < 2) {\n      stop = start;\n      start = 0;\n    }\n  }\n  if ((stop - start) / step == Infinity) throw new Error('Infinite range');\n  var range = [], i = -1, j;\n  if (step < 0) while ((j = start + step * ++i) > stop) range.push(j);\n  else while ((j = start + step * ++i) < stop) range.push(j);\n  return range;\n};\n\ngen.random = {};\n\ngen.random.uniform = function(min, max) {\n  if (max === undefined) {\n    max = min;\n    min = 0;\n  }\n  var d = max - min;\n  var f = function() {\n    return min + d * Math.random();\n  };\n  f.samples = function(n) { return gen.zeros(n).map(f); };\n  return f;\n};\n\ngen.random.integer = function(a, b) {\n  if (b === undefined) {\n    b = a;\n    a = 0;\n  }\n  var d = b - a;\n  var f = function() {\n    return a + Math.floor(d * Math.random());\n  };\n  f.samples = function(n) { return gen.zeros(n).map(f); };\n  return f;\n};\n\ngen.random.normal = function(mean, stdev) {\n  mean = mean || 0;\n  stdev = stdev || 1;\n  var next;\n  var f = function() {\n    var x = 0, y = 0, rds, c;\n    if (next !== undefined) {\n      x = next;\n      next = undefined;\n      return x;\n    }\n    do {\n      x = Math.random()*2-1;\n      y = Math.random()*2-1;\n      rds = x*x + y*y;\n    } while (rds === 0 || rds > 1);\n    c = Math.sqrt(-2*Math.log(rds)/rds); // Box-Muller transform\n    next = mean + y*c*stdev;\n    return mean + x*c*stdev;\n  };\n  f.samples = function(n) { return gen.zeros(n).map(f); };\n  return f;\n};","var util = require('../util');\n\nvar TYPES = '__types__';\n\nvar PARSERS = {\n  boolean: util.boolean,\n  integer: util.number,\n  number:  util.number,\n  date:    util.date,\n  string:  function(x) { return x==='' ? null : x; }\n};\n\nvar TESTS = {\n  boolean: function(x) { return x==='true' || x==='false' || util.isBoolean(x); },\n  integer: function(x) { return TESTS.number(x) && (x=+x) === ~~x; },\n  number: function(x) { return !isNaN(+x) && !util.isDate(x); },\n  date: function(x) { return !isNaN(Date.parse(x)); }\n};\n\nfunction annotation(data, types) {\n  if (!types) return data && data[TYPES] || null;\n  data[TYPES] = types;\n}\n\nfunction type(values, f) {\n  f = util.$(f);\n  var v, i, n;\n\n  // if data array has type annotations, use them\n  if (values[TYPES]) {\n    v = f(values[TYPES]);\n    if (util.isString(v)) return v;\n  }\n\n  for (i=0, n=values.length; !util.isValid(v) && i<n; ++i) {\n    v = f ? f(values[i]) : values[i];\n  }\n\n  return util.isDate(v) ? 'date' :\n    util.isNumber(v)    ? 'number' :\n    util.isBoolean(v)   ? 'boolean' :\n    util.isString(v)    ? 'string' : null;\n}\n\nfunction typeAll(data, fields) {\n  if (!data.length) return;\n  fields = fields || util.keys(data[0]);\n  return fields.reduce(function(types, f) {\n    return (types[f] = type(data, f), types);\n  }, {});\n}\n\nfunction infer(values, f) {\n  f = util.$(f);\n  var i, j, v;\n\n  // types to test for, in precedence order\n  var types = ['boolean', 'integer', 'number', 'date'];\n\n  for (i=0; i<values.length; ++i) {\n    // get next value to test\n    v = f ? f(values[i]) : values[i];\n    // test value against remaining types\n    for (j=0; j<types.length; ++j) {\n      if (util.isValid(v) && !TESTS[types[j]](v)) {\n        types.splice(j, 1);\n        j -= 1;\n      }\n    }\n    // if no types left, return 'string'\n    if (types.length === 0) return 'string';\n  }\n\n  return types[0];\n}\n\nfunction inferAll(data, fields) {\n  fields = fields || util.keys(data[0]);\n  return fields.reduce(function(types, f) {\n    var type = infer(data, f);\n    if (PARSERS[type]) types[f] = type;\n    return types;\n  }, {});\n}\n\ntype.annotation = annotation;\ntype.all = typeAll;\ntype.infer = infer;\ntype.inferAll = inferAll;\ntype.parsers = PARSERS;\nmodule.exports = type;","var util = require('./util');\nvar type = require('./import/type');\nvar gen = require('./generate');\nvar stats = {};\n\n// Collect unique values.\n// Output: an array of unique values, in first-observed order\nstats.unique = function(values, f, results) {\n  f = util.$(f);\n  results = results || [];\n  var u = {}, v, i, n;\n  for (i=0, n=values.length; i<n; ++i) {\n    v = f ? f(values[i]) : values[i];\n    if (v in u) continue;\n    u[v] = 1;\n    results.push(v);\n  }\n  return results;\n};\n\n// Return the length of the input array.\nstats.count = function(values) {\n  return values && values.length || 0;\n};\n\n// Count the number of non-null, non-undefined, non-NaN values.\nstats.count.valid = function(values, f) {\n  f = util.$(f);\n  var v, i, n, valid = 0;\n  for (i=0, n=values.length; i<n; ++i) {\n    v = f ? f(values[i]) : values[i];\n    if (util.isValid(v)) valid += 1;\n  }\n  return valid;\n};\n\n// Count the number of null or undefined values.\nstats.count.missing = function(values, f) {\n  f = util.$(f);\n  var v, i, n, count = 0;\n  for (i=0, n=values.length; i<n; ++i) {\n    v = f ? f(values[i]) : values[i];\n    if (v == null) count += 1;\n  }\n  return count;\n};\n\n// Count the number of distinct values.\n// Null, undefined and NaN are each considered distinct values.\nstats.count.distinct = function(values, f) {\n  f = util.$(f);\n  var u = {}, v, i, n, count = 0;\n  for (i=0, n=values.length; i<n; ++i) {\n    v = f ? f(values[i]) : values[i];\n    if (v in u) continue;\n    u[v] = 1;\n    count += 1;\n  }\n  return count;\n};\n\n// Construct a map from distinct values to occurrence counts.\nstats.count.map = function(values, f) {\n  f = util.$(f);\n  var map = {}, v, i, n;\n  for (i=0, n=values.length; i<n; ++i) {\n    v = f ? f(values[i]) : values[i];\n    map[v] = (v in map) ? map[v] + 1 : 1;\n  }\n  return map;\n};\n\n// Compute the median of an array of numbers.\nstats.median = function(values, f) {\n  if (f) values = values.map(util.$(f));\n  values = values.filter(util.isValid).sort(util.cmp);\n  return stats.quantile(values, 0.5);\n};\n\n// Computes the quartile boundaries of an array of numbers.\nstats.quartile = function(values, f) {\n  if (f) values = values.map(util.$(f));\n  values = values.filter(util.isValid).sort(util.cmp);\n  var q = stats.quantile;\n  return [q(values, 0.25), q(values, 0.50), q(values, 0.75)];\n};\n\n// Compute the quantile of a sorted array of numbers.\n// Adapted from the D3.js implementation.\nstats.quantile = function(values, f, p) {\n  if (p === undefined) { p = f; f = util.identity; }\n  f = util.$(f);\n  var H = (values.length - 1) * p + 1,\n      h = Math.floor(H),\n      v = +f(values[h - 1]),\n      e = H - h;\n  return e ? v + e * (f(values[h]) - v) : v;\n};\n\n// Compute the sum of an array of numbers.\nstats.sum = function(values, f) {\n  f = util.$(f);\n  for (var sum=0, i=0, n=values.length, v; i<n; ++i) {\n    v = f ? f(values[i]) : values[i];\n    if (util.isValid(v)) sum += v;\n  }\n  return sum;\n};\n\n// Compute the mean (average) of an array of numbers.\nstats.mean = function(values, f) {\n  f = util.$(f);\n  var mean = 0, delta, i, n, c, v;\n  for (i=0, c=0, n=values.length; i<n; ++i) {\n    v = f ? f(values[i]) : values[i];\n    if (util.isValid(v)) {\n      delta = v - mean;\n      mean = mean + delta / (++c);\n    }\n  }\n  return mean;\n};\n\n// Compute the sample variance of an array of numbers.\nstats.variance = function(values, f) {\n  f = util.$(f);\n  if (!util.isArray(values) || values.length===0) return 0;\n  var mean = 0, M2 = 0, delta, i, c, v;\n  for (i=0, c=0; i<values.length; ++i) {\n    v = f ? f(values[i]) : values[i];\n    if (util.isValid(v)) {\n      delta = v - mean;\n      mean = mean + delta / (++c);\n      M2 = M2 + delta * (v - mean);\n    }\n  }\n  M2 = M2 / (c - 1);\n  return M2;\n};\n\n// Compute the sample standard deviation of an array of numbers.\nstats.stdev = function(values, f) {\n  return Math.sqrt(stats.variance(values, f));\n};\n\n// Compute the Pearson mode skewness ((median-mean)/stdev) of an array of numbers.\nstats.modeskew = function(values, f) {\n  var avg = stats.mean(values, f),\n      med = stats.median(values, f),\n      std = stats.stdev(values, f);\n  return std === 0 ? 0 : (avg - med) / std;\n};\n\n// Find the minimum value in an array.\nstats.min = function(values, f) {\n  return stats.extent(values, f)[0];\n};\n\n// Find the maximum value in an array.\nstats.max = function(values, f) {\n  return stats.extent(values, f)[1];\n};\n\n// Find the minimum and maximum of an array of values.\nstats.extent = function(values, f) {\n  f = util.$(f);\n  var a, b, v, i, n = values.length;\n  for (i=0; i<n; ++i) {\n    v = f ? f(values[i]) : values[i];\n    if (util.isValid(v)) { a = b = v; break; }\n  }\n  for (; i<n; ++i) {\n    v = f ? f(values[i]) : values[i];\n    if (util.isValid(v)) {\n      if (v < a) a = v;\n      if (v > b) b = v;\n    }\n  }\n  return [a, b];\n};\n\n// Find the integer indices of the minimum and maximum values.\nstats.extent.index = function(values, f) {\n  f = util.$(f);\n  var x = -1, y = -1, a, b, v, i, n = values.length;\n  for (i=0; i<n; ++i) {\n    v = f ? f(values[i]) : values[i];\n    if (util.isValid(v)) { a = b = v; x = y = i; break; }\n  }\n  for (; i<n; ++i) {\n    v = f ? f(values[i]) : values[i];\n    if (util.isValid(v)) {\n      if (v < a) { a = v; x = i; }\n      if (v > b) { b = v; y = i; }\n    }\n  }\n  return [x, y];\n};\n\n// Compute the dot product of two arrays of numbers.\nstats.dot = function(values, a, b) {\n  var sum = 0, i, v;\n  if (!b) {\n    if (values.length !== a.length) {\n      throw Error('Array lengths must match.');\n    }\n    for (i=0; i<values.length; ++i) {\n      v = values[i] * a[i];\n      if (!Number.isNaN(v)) sum += v;\n    }\n  } else {\n    a = util.$(a);\n    b = util.$(b);\n    for (i=0; i<values.length; ++i) {\n      v = a(values[i]) * b(values[i]);\n      if (!Number.isNaN(v)) sum += v;\n    }\n  }\n  return sum;\n};\n\n// Compute ascending rank scores for an array of values.\n// Ties are assigned their collective mean rank.\nstats.rank = function(values, f) {\n  f = util.$(f) || util.identity;\n  var a = values.map(function(v, i) {\n      return {idx: i, val: f(v)};\n    })\n    .sort(util.comparator('val'));\n\n  var n = values.length,\n      r = Array(n),\n      tie = -1, p = {}, i, v, mu;\n\n  for (i=0; i<n; ++i) {\n    v = a[i].val;\n    if (tie < 0 && p === v) {\n      tie = i - 1;\n    } else if (tie > -1 && p !== v) {\n      mu = 1 + (i-1 + tie) / 2;\n      for (; tie<i; ++tie) r[a[tie].idx] = mu;\n      tie = -1;\n    }\n    r[a[i].idx] = i + 1;\n    p = v;\n  }\n\n  if (tie > -1) {\n    mu = 1 + (n-1 + tie) / 2;\n    for (; tie<n; ++tie) r[a[tie].idx] = mu;\n  }\n\n  return r;\n};\n\n// Compute the sample Pearson product-moment correlation of two arrays of numbers.\nstats.cor = function(values, a, b) {\n  var fn = b;\n  b = fn ? values.map(util.$(b)) : a;\n  a = fn ? values.map(util.$(a)) : values;\n\n  var dot = stats.dot(a, b),\n      mua = stats.mean(a),\n      mub = stats.mean(b),\n      sda = stats.stdev(a),\n      sdb = stats.stdev(b),\n      n = values.length;\n\n  return (dot - n*mua*mub) / ((n-1) * sda * sdb);\n};\n\n// Compute the Spearman rank correlation of two arrays of values.\nstats.cor.rank = function(values, a, b) {\n  var ra = b ? stats.rank(values, util.$(a)) : stats.rank(values),\n      rb = b ? stats.rank(values, util.$(b)) : stats.rank(a),\n      n = values.length, i, s, d;\n\n  for (i=0, s=0; i<n; ++i) {\n    d = ra[i] - rb[i];\n    s += d * d;\n  }\n\n  return 1 - 6*s / (n * (n*n-1));\n};\n\n// Compute the distance correlation of two arrays of numbers.\n// http://en.wikipedia.org/wiki/Distance_correlation\nstats.cor.dist = function(values, a, b) {\n  var X = b ? values.map(util.$(a)) : values,\n      Y = b ? values.map(util.$(b)) : a;\n\n  var A = stats.dist.mat(X),\n      B = stats.dist.mat(Y),\n      n = A.length,\n      i, aa, bb, ab;\n\n  for (i=0, aa=0, bb=0, ab=0; i<n; ++i) {\n    aa += A[i]*A[i];\n    bb += B[i]*B[i];\n    ab += A[i]*B[i];\n  }\n\n  return Math.sqrt(ab / Math.sqrt(aa*bb));\n};\n\n// Compute the vector distance between two arrays of numbers.\n// Default is Euclidean (exp=2) distance, configurable via exp argument.\nstats.dist = function(values, a, b, exp) {\n  var f = util.isFunction(b) || util.isString(b),\n      X = values,\n      Y = f ? values : a,\n      e = f ? exp : b,\n      L2 = e === 2 || e == null,\n      n = values.length, s = 0, d, i;\n  if (f) {\n    a = util.$(a);\n    b = util.$(b);\n  }\n  for (i=0; i<n; ++i) {\n    d = f ? (a(X[i])-b(Y[i])) : (X[i]-Y[i]);\n    s += L2 ? d*d : Math.pow(Math.abs(d), e);\n  }\n  return L2 ? Math.sqrt(s) : Math.pow(s, 1/e);\n};\n\n// Construct a mean-centered distance matrix for an array of numbers.\nstats.dist.mat = function(X) {\n  var n = X.length,\n      m = n*n,\n      A = Array(m),\n      R = gen.zeros(n),\n      M = 0, v, i, j;\n\n  for (i=0; i<n; ++i) {\n    A[i*n+i] = 0;\n    for (j=i+1; j<n; ++j) {\n      A[i*n+j] = (v = Math.abs(X[i] - X[j]));\n      A[j*n+i] = v;\n      R[i] += v;\n      R[j] += v;\n    }\n  }\n\n  for (i=0; i<n; ++i) {\n    M += R[i];\n    R[i] /= n;\n  }\n  M /= m;\n\n  for (i=0; i<n; ++i) {\n    for (j=i; j<n; ++j) {\n      A[i*n+j] += M - R[i] - R[j];\n      A[j*n+i] = A[i*n+j];\n    }\n  }\n\n  return A;\n};\n\n// Compute the Shannon entropy (log base 2) of an array of counts.\nstats.entropy = function(counts, f) {\n  f = util.$(f);\n  var i, p, s = 0, H = 0, n = counts.length;\n  for (i=0; i<n; ++i) {\n    s += (f ? f(counts[i]) : counts[i]);\n  }\n  if (s === 0) return 0;\n  for (i=0; i<n; ++i) {\n    p = (f ? f(counts[i]) : counts[i]) / s;\n    if (p) H += p * Math.log(p);\n  }\n  return -H / Math.LN2;\n};\n\n// Compute the mutual information between two discrete variables.\n// Returns an array of the form [MI, MI_distance] \n// MI_distance is defined as 1 - I(a,b) / H(a,b).\n// http://en.wikipedia.org/wiki/Mutual_information\nstats.mutual = function(values, a, b, counts) {\n  var x = counts ? values.map(util.$(a)) : values,\n      y = counts ? values.map(util.$(b)) : a,\n      z = counts ? values.map(util.$(counts)) : b;\n\n  var px = {},\n      py = {},\n      n = z.length,\n      s = 0, I = 0, H = 0, p, t, i;\n\n  for (i=0; i<n; ++i) {\n    px[x[i]] = 0;\n    py[y[i]] = 0;\n  }\n\n  for (i=0; i<n; ++i) {\n    px[x[i]] += z[i];\n    py[y[i]] += z[i];\n    s += z[i];\n  }\n\n  t = 1 / (s * Math.LN2);\n  for (i=0; i<n; ++i) {\n    if (z[i] === 0) continue;\n    p = (s * z[i]) / (px[x[i]] * py[y[i]]);\n    I += z[i] * t * Math.log(p);\n    H += z[i] * t * Math.log(z[i]/s);\n  }\n\n  return [I, 1 + I/H];\n};\n\n// Compute the mutual information between two discrete variables.\nstats.mutual.info = function(values, a, b, counts) {\n  return stats.mutual(values, a, b, counts)[0];\n};\n\n// Compute the mutual information distance between two discrete variables.\n// MI_distance is defined as 1 - I(a,b) / H(a,b).\nstats.mutual.dist = function(values, a, b, counts) {\n  return stats.mutual(values, a, b, counts)[1];\n};\n\n// Compute a profile of summary statistics for a variable.\nstats.profile = function(values, f) {\n  var mean = 0,\n      valid = 0,\n      missing = 0,\n      distinct = 0,\n      min = null,\n      max = null,\n      M2 = 0,\n      vals = [],\n      u = {}, delta, sd, i, v, x;\n\n  // compute summary stats\n  for (i=0; i<values.length; ++i) {\n    v = f ? f(values[i]) : values[i];\n\n    // update unique values\n    u[v] = (v in u) ? u[v] + 1 : (distinct += 1, 1);\n\n    if (v == null) {\n      ++missing;\n    } else if (util.isValid(v)) {\n      // update stats\n      x = (typeof v === 'string') ? v.length : v;\n      if (min===null || x < min) min = x;\n      if (max===null || x > max) max = x;\n      delta = x - mean;\n      mean = mean + delta / (++valid);\n      M2 = M2 + delta * (x - mean);\n      vals.push(x);\n    }\n  }\n  M2 = M2 / (valid - 1);\n  sd = Math.sqrt(M2);\n\n  // sort values for median and iqr\n  vals.sort(util.cmp);\n\n  return {\n    type:     type(values, f),\n    unique:   u,\n    count:    values.length,\n    valid:    valid,\n    missing:  missing,\n    distinct: distinct,\n    min:      min,\n    max:      max,\n    mean:     mean,\n    stdev:    sd,\n    median:   (v = stats.quantile(vals, 0.5)),\n    q1:       stats.quantile(vals, 0.25),\n    q3:       stats.quantile(vals, 0.75),\n    modeskew: sd === 0 ? 0 : (mean - v) / sd\n  };\n};\n\n// Compute profiles for all variables in a data set.\nstats.summary = function(data, fields) {\n  fields = fields || util.keys(data[0]);\n  var s = fields.map(function(f) {\n    var p = stats.profile(data, util.$(f));\n    return (p.field = f, p);\n  });\n  return (s.__summary__ = true, s);\n};\n\nmodule.exports = stats;","var STEPS = [\n  [31536e6, 5],  // 1-year\n  [7776e6, 4],   // 3-month\n  [2592e6, 4],   // 1-month\n  [12096e5, 3],  // 2-week\n  [6048e5, 3],   // 1-week\n  [1728e5, 3],   // 2-day\n  [864e5, 3],    // 1-day\n  [432e5, 2],    // 12-hour\n  [216e5, 2],    // 6-hour\n  [108e5, 2],    // 3-hour\n  [36e5, 2],     // 1-hour\n  [18e5, 1],     // 30-minute\n  [9e5, 1],      // 15-minute\n  [3e5, 1],      // 5-minute\n  [6e4, 1],      // 1-minute\n  [3e4, 0],      // 30-second\n  [15e3, 0],     // 15-second\n  [5e3, 0],      // 5-second\n  [1e3, 0]       // 1-second\n];\n\nfunction isNumber(d) { return typeof d === 'number'; }\n\nvar entries = [\n  {\n    type: 'second',\n    minstep: 1,\n    format: '%Y %b %-d %H:%M:%S.%L',\n    date: function(d) {\n      return new Date(d * 1e3);\n    },\n    unit: function(d) {\n      return (+d / 1e3);\n    }\n  },\n  {\n    type: 'minute',\n    minstep: 1,\n    format: '%Y %b %-d %H:%M',\n    date: function(d) {\n      return new Date(d * 6e4);\n    },\n    unit: function(d) {\n      return ~~(+d / 6e4);\n    }\n  },\n  {\n    type: 'hour',\n    minstep: 1,\n    format: '%Y %b %-d %H:00',\n    date: function(d) {\n      return new Date(d * 36e5);\n    },\n    unit: function(d) {\n      return ~~(+d / 36e5);\n    }\n  },\n  {\n    type: 'day',\n    minstep: 1,\n    step: [1, 7],\n    format: '%Y %b %-d',\n    date: function(d) {\n      return new Date(d * 864e5);\n    },\n    unit: function(d) {\n      return ~~(+d / 864e5);\n    }\n  },\n  {\n    type: 'month',\n    minstep: 1,\n    step: [1, 3, 6],\n    format: '%b %Y',\n    date: function(d) {\n      return new Date(Date.UTC(~~(d / 12), d % 12, 1));\n    },\n    unit: function(d) {\n      if (isNumber(d)) d = new Date(d);\n      return 12 * d.getUTCFullYear() + d.getUTCMonth();\n    }\n  },\n  {\n    type: 'year',\n    minstep: 1,\n    format: '%Y',\n    date: function(d) {\n      return new Date(Date.UTC(d, 0, 1));\n    },\n    unit: function(d) {\n      return (isNumber(d) ? new Date(d) : d).getUTCFullYear();\n    }\n  }\n];\n\nvar minuteOfHour = {\n  type: 'minuteOfHour',\n  min: 0,\n  max: 59,\n  minstep: 1,\n  format: '%M',\n  date: function(d) {\n    return new Date(Date.UTC(1970, 0, 1, 0, d));\n  },\n  unit: function(d) {\n    return (isNumber(d) ? new Date(d) : d).getUTCMinutes();\n  }\n};\n\nvar hourOfDay = {\n  type: 'hourOfDay',\n  min: 0,\n  max: 23,\n  minstep: 1,\n  format: '%H',\n  date: function(d) {\n    return new Date(Date.UTC(1970, 0, 1, d));\n  },\n  unit: function(d) {\n    return (isNumber(d) ? new Date(d) : d).getUTCHours();\n  }\n};\n\nvar dayOfWeek = {\n  type: 'dayOfWeek',\n  min: 0,\n  max: 6,\n  step: [1],\n  format: '%a',\n  date: function(d) {\n    return new Date(Date.UTC(1970, 0, 4 + d));\n  },\n  unit: function(d) {\n    return (isNumber(d) ? new Date(d) : d).getUTCDay();\n  }\n};\n\nvar dayOfMonth = {\n  type: 'dayOfMonth',\n  min: 1,\n  max: 31,\n  step: [1],\n  format: '%-d',\n  date: function(d) {\n    return new Date(Date.UTC(1970, 0, d));\n  },\n  unit: function(d) {\n    return (isNumber(d) ? new Date(d) : d).getUTCDate();\n  }\n};\n\nvar monthOfYear = {\n  type: 'monthOfYear',\n  min: 0,\n  max: 11,\n  step: [1],\n  format: '%b',\n  date: function(d) {\n    return new Date(Date.UTC(1970, d % 12, 1));\n  },\n  unit: function(d) {\n    return (isNumber(d) ? new Date(d) : d).getUTCMonth();\n  }\n};\n\nvar units = {\n  'second':       entries[0],\n  'minute':       entries[1],\n  'hour':         entries[2],\n  'day':          entries[3],\n  'month':        entries[4],\n  'year':         entries[5],\n  'minuteOfHour': minuteOfHour,\n  'hourOfDay':    hourOfDay,\n  'dayOfWeek':    dayOfWeek,\n  'dayOfMonth':   dayOfMonth,\n  'monthOfYear':  monthOfYear,\n  'timesteps':    entries\n};\n\nunits.find = function(span, minb, maxb) {\n  var i, len, bins, step = STEPS[0];\n\n  for (i = 1, len = STEPS.length; i < len; ++i) {\n    step = STEPS[i];\n    if (span > step[0]) {\n      bins = span / step[0];\n      if (bins > maxb) {\n        return entries[STEPS[i - 1][1]];\n      }\n      if (bins >= minb) {\n        return entries[step[1]];\n      }\n    }\n  }\n  return entries[STEPS[STEPS.length - 1][1]];\n};\n\nmodule.exports = units;\n","var Buffer = require('buffer').Buffer;\nvar units = require('./time-units');\nvar u = module.exports = {};\n\n// where are we?\n\nu.isNode = typeof process !== 'undefined' &&\n           typeof process.stderr !== 'undefined';\n\n// utility functions\n\nvar FNAME = '__name__';\n\nu.namedfunc = function(name, f) { return (f[FNAME] = name, f); };\n\nu.name = function(f) { return f==null ? null : f[FNAME]; };\n\nu.identity = function(x) { return x; };\n\nu.true = u.namedfunc('true', function() { return true; });\n\nu.false = u.namedfunc('false', function() { return false; });\n\nu.duplicate = function(obj) {\n  return JSON.parse(JSON.stringify(obj));\n};\n\nu.equal = function(a, b) {\n  return JSON.stringify(a) === JSON.stringify(b);\n};\n\nu.extend = function(obj) {\n  for (var x, name, i=1, len=arguments.length; i<len; ++i) {\n    x = arguments[i];\n    for (name in x) { obj[name] = x[name]; }\n  }\n  return obj;\n};\n\nu.length = function(x) {\n  return x != null && x.length != null ? x.length : null;\n};\n\nu.keys = function(x) {\n  var keys = [], k;\n  for (k in x) keys.push(k);\n  return keys;\n};\n\nu.vals = function(x) {\n  var vals = [], k;\n  for (k in x) vals.push(x[k]);\n  return vals;\n};\n\nu.toMap = function(list, f) {\n  return (f = u.$(f)) ?\n    list.reduce(function(obj, x) { return (obj[f(x)] = 1, obj); }, {}) :\n    list.reduce(function(obj, x) { return (obj[x] = 1, obj); }, {});\n};\n\nu.keystr = function(values) {\n  // use to ensure consistent key generation across modules\n  var n = values.length;\n  if (!n) return '';\n  for (var s=String(values[0]), i=1; i<n; ++i) {\n    s += '|' + String(values[i]);\n  }\n  return s;\n};\n\n// type checking functions\n\nvar toString = Object.prototype.toString;\n\nu.isObject = function(obj) {\n  return obj === Object(obj);\n};\n\nu.isFunction = function(obj) {\n  return toString.call(obj) === '[object Function]';\n};\n\nu.isString = function(obj) {\n  return typeof value === 'string' || toString.call(obj) === '[object String]';\n};\n\nu.isArray = Array.isArray || function(obj) {\n  return toString.call(obj) === '[object Array]';\n};\n\nu.isNumber = function(obj) {\n  return typeof obj === 'number' || toString.call(obj) === '[object Number]';\n};\n\nu.isBoolean = function(obj) {\n  return obj === true || obj === false || toString.call(obj) == '[object Boolean]';\n};\n\nu.isDate = function(obj) {\n  return toString.call(obj) === '[object Date]';\n};\n\nu.isValid = function(obj) {\n  return obj != null && !Number.isNaN(obj);\n};\n\nu.isBuffer = (Buffer && Buffer.isBuffer) || u.false;\n\n// type coercion functions\n\nu.number = function(s) {\n  return s == null || s === '' ? null : +s;\n};\n\nu.boolean = function(s) {\n  return s == null || s === '' ? null : s==='false' ? false : !!s;\n};\n\nu.date = function(s) {\n  return s == null || s === '' ? null : Date.parse(s);\n};\n\nu.array = function(x) {\n  return x != null ? (u.isArray(x) ? x : [x]) : [];\n};\n\nu.str = function(x) {\n  return u.isArray(x) ? '[' + x.map(u.str) + ']'\n    : u.isObject(x) ? JSON.stringify(x)\n    : u.isString(x) ? ('\\''+util_escape_str(x)+'\\'') : x;\n};\n\nvar escape_str_re = /(^|[^\\\\])'/g;\n\nfunction util_escape_str(x) {\n  return x.replace(escape_str_re, '$1\\\\\\'');\n}\n\n// data access functions\n\nu.field = function(f) {\n  return String(f).split('\\\\.')\n    .map(function(d) { return d.split('.'); })\n    .reduce(function(a, b) {\n      if (a.length) { a[a.length-1] += '.' + b.shift(); }\n      a.push.apply(a, b);\n      return a;\n    }, []);\n};\n\nu.accessor = function(f) {\n  var s;\n  return f==null || u.isFunction(f) ? f :\n    u.namedfunc(f, (s = u.field(f)).length > 1 ?\n      function(x) { return s.reduce(function(x,f) { return x[f]; }, x); } :\n      function(x) { return x[f]; }\n    );\n};\n\nu.$ = u.accessor;\n\nu.mutator = function(f) {\n  var s;\n  return u.isString(f) && (s=u.field(f)).length > 1 ?\n    function(x, v) {\n      for (var i=0; i<s.length-1; ++i) x = x[s[i]];\n      x[s[i]] = v;\n    } :\n    function(x, v) { x[f] = v; };\n};\n\nu.$func = function(name, op) {\n  return function(f) {\n    f = u.$(f) || u.identity;\n    var n = name + (u.name(f) ? '_'+u.name(f) : '');\n    return u.namedfunc(n, function(d) { return op(f(d)); });\n  };\n};\n\nu.$valid  = u.$func('valid', u.isValid);\nu.$length = u.$func('length', u.length);\nu.$year   = u.$func('year', units.year.unit);\nu.$month  = u.$func('month', units.monthOfYear.unit);\nu.$date   = u.$func('date', units.dayOfMonth.unit);\nu.$day    = u.$func('day', units.dayOfWeek.unit);\nu.$hour   = u.$func('hour', units.hourOfDay.unit);\nu.$minute = u.$func('minute', units.minuteOfHour.unit);\n\nu.$in = function(f, values) {\n  f = u.$(f);\n  var map = u.isArray(values) ? u.toMap(values) : values;\n  return function(d) { return !!map[f(d)]; };\n};\n\n// comparison / sorting functions\n\nu.comparator = function(sort) {\n  var sign = [];\n  if (sort === undefined) sort = [];\n  sort = u.array(sort).map(function(f) {\n    var s = 1;\n    if      (f[0] === '-') { s = -1; f = f.slice(1); }\n    else if (f[0] === '+') { s = +1; f = f.slice(1); }\n    sign.push(s);\n    return u.accessor(f);\n  });\n  return function(a,b) {\n    var i, n, f, x, y;\n    for (i=0, n=sort.length; i<n; ++i) {\n      f = sort[i]; x = f(a); y = f(b);\n      if (x < y) return -1 * sign[i];\n      if (x > y) return sign[i];\n    }\n    return 0;\n  };\n};\n\nu.cmp = function(a, b) {\n  if (a < b) {\n    return -1;\n  } else if (a > b) {\n    return 1;\n  } else if (a >= b) {\n    return 0;\n  } else if (a === null && b === null) {\n    return 0;\n  } else if (a === null) {\n    return -1;\n  } else if (b === null) {\n    return 1;\n  }\n  return NaN;\n};\n\nu.numcmp = function(a, b) { return a - b; };\n\nu.stablesort = function(array, sortBy, keyFn) {\n  var indices = array.reduce(function(idx, v, i) {\n    return (idx[keyFn(v)] = i, idx);\n  }, {});\n\n  array.sort(function(a, b) {\n    var sa = sortBy(a),\n        sb = sortBy(b);\n    return sa < sb ? -1 : sa > sb ? 1\n         : (indices[keyFn(a)] - indices[keyFn(b)]);\n  });\n\n  return array;\n};\n\n\n// string functions\n\n// ES6 compatibility per https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith#Polyfill\n// We could have used the polyfill code, but lets wait until ES6 becomes a standard first\nu.startsWith = String.prototype.startsWith ?\n  function(string, searchString) {\n    return string.startsWith(searchString);\n  } :\n  function(string, searchString) {\n    return string.lastIndexOf(searchString, 0) === 0;\n  };\n\nu.pad = function(s, length, pos, padchar) {\n  padchar = padchar || \" \";\n  var d = length - s.length;\n  if (d <= 0) return s;\n  switch (pos) {\n    case 'left':\n      return strrep(d, padchar) + s;\n    case 'middle':\n    case 'center':\n      return strrep(Math.floor(d/2), padchar) +\n         s + strrep(Math.ceil(d/2), padchar);\n    default:\n      return s + strrep(d, padchar);\n  }\n};\n\nfunction strrep(n, str) {\n  var s = \"\", i;\n  for (i=0; i<n; ++i) s += str;\n  return s;\n}\n\nu.truncate = function(s, length, pos, word, ellipsis) {\n  var len = s.length;\n  if (len <= length) return s;\n  ellipsis = ellipsis !== undefined ? String(ellipsis) : '\\u2026';\n  var l = Math.max(0, length - ellipsis.length);\n\n  switch (pos) {\n    case 'left':\n      return ellipsis + (word ? truncateOnWord(s,l,1) : s.slice(len-l));\n    case 'middle':\n    case 'center':\n      var l1 = Math.ceil(l/2), l2 = Math.floor(l/2);\n      return (word ? truncateOnWord(s,l1) : s.slice(0,l1)) +\n        ellipsis + (word ? truncateOnWord(s,l2,1) : s.slice(len-l2));\n    default:\n      return (word ? truncateOnWord(s,l) : s.slice(0,l)) + ellipsis;\n  }\n};\n\nfunction truncateOnWord(s, len, rev) {\n  var cnt = 0, tok = s.split(truncate_word_re);\n  if (rev) {\n    s = (tok = tok.reverse())\n      .filter(function(w) { cnt += w.length; return cnt <= len; })\n      .reverse();\n  } else {\n    s = tok.filter(function(w) { cnt += w.length; return cnt <= len; });\n  }\n  return s.length ? s.join('').trim() : tok[0].slice(0, len);\n}\n\nvar truncate_word_re = /([\\u0009\\u000A\\u000B\\u000C\\u000D\\u0020\\u00A0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u2028\\u2029\\u3000\\uFEFF])/;\n","'use strict';\n\nrequire('./globals');\n\nvar consts = require('./consts'),\n  util = require('./util'),\n  vlfield = require('./field'),\n  vlenc = require('./enc'),\n  schema = require('./schema/schema');\n\nmodule.exports = (function() {\n  function Encoding(marktype, enc, data, config, filter, theme) {\n    var defaults = schema.instantiate();\n\n    var spec = {\n      data: data,\n      marktype: marktype,\n      enc: enc,\n      config: config,\n      filter: filter || []\n    };\n\n    var specExtended = schema.util.merge(defaults, theme || {}, spec) ;\n\n    this._data = specExtended.data;\n    this._marktype = specExtended.marktype;\n    this._enc = specExtended.enc;\n    this._config = specExtended.config;\n    this._filter = specExtended.filter;\n  }\n\n  var proto = Encoding.prototype;\n\n  proto.marktype = function() {\n    return this._marktype;\n  };\n\n  proto.is = function(m) {\n    return this._marktype === m;\n  };\n\n  proto.has = function(encType) {\n    // equivalent to calling vlenc.has(this._enc, encType)\n    return this._enc[encType].name !== undefined;\n  };\n\n  proto.enc = function(et) {\n    return this._enc[et];\n  };\n\n  proto.filter = function() {\n    var filterNull = [],\n      fields = this.fields(),\n      self = this;\n\n    util.forEach(fields, function(fieldList, fieldName) {\n      if (fieldName === '*') return; //count\n\n      if ((self.config('filterNull').Q && fieldList.containsType[Q]) ||\n          (self.config('filterNull').T && fieldList.containsType[T]) ||\n          (self.config('filterNull').O && fieldList.containsType[O])) {\n        filterNull.push({\n          operands: [fieldName],\n          operator: 'notNull'\n        });\n      }\n    });\n\n    return filterNull.concat(this._filter);\n  };\n\n  // get \"field\" property for vega\n  proto.field = function(et, nodata, nofn) {\n    if (!this.has(et)) return null;\n\n    var f = (nodata ? '' : 'data.');\n\n    if (vlfield.isCount(this._enc[et])) {\n      return f + 'count';\n    } else if (!nofn && this._enc[et].bin) {\n      return f + 'bin_' + this._enc[et].name;\n    } else if (!nofn && this._enc[et].aggr) {\n      return f + this._enc[et].aggr + '_' + this._enc[et].name;\n    } else if (!nofn && this._enc[et].fn) {\n      return f + this._enc[et].fn + '_' + this._enc[et].name;\n    } else {\n      return f + this._enc[et].name;\n    }\n  };\n\n  proto.fieldName = function(et) {\n    return this._enc[et].name;\n  };\n\n  /*\n   * return key-value pairs of field name and list of fields of that field name\n   */\n  proto.fields = function() {\n    return vlenc.fields(this._enc);\n  };\n\n  proto.fieldTitle = function(et) {\n    if (vlfield.isCount(this._enc[et])) {\n      return vlfield.count.displayName;\n    }\n    var fn = this._enc[et].aggr || this._enc[et].fn || (this._enc[et].bin && \"bin\");\n    if (fn) {\n      return fn.toUpperCase() + '(' + this._enc[et].name + ')';\n    } else {\n      return this._enc[et].name;\n    }\n  };\n\n  proto.scale = function(et) {\n    return this._enc[et].scale || {};\n  };\n\n  proto.axis = function(et) {\n    return this._enc[et].axis || {};\n  };\n\n  proto.band = function(et) {\n    return this._enc[et].band || {};\n  };\n\n  proto.bandSize = function(encType, useSmallBand) {\n    useSmallBand = useSmallBand ||\n      //isBandInSmallMultiples\n      (encType === Y && this.has(ROW) && this.has(Y)) ||\n      (encType === X && this.has(COL) && this.has(X));\n\n    // if band.size is explicitly specified, follow the specification, otherwise draw value from config.\n    return this.band(encType).size ||\n      this.config(useSmallBand ? 'smallBandSize' : 'largeBandSize');\n  };\n\n  proto.aggr = function(et) {\n    return this._enc[et].aggr;\n  };\n\n  // returns false if binning is disabled, otherwise an object with binning properties\n  proto.bin = function(et) {\n    var bin = this._enc[et].bin;\n    if (bin === {})\n      return false;\n    if (bin === true)\n      return {\n        maxbins: schema.MAXBINS_DEFAULT\n      };\n    return bin;\n  };\n\n  proto.legend = function(et) {\n    return this._enc[et].legend;\n  };\n\n  proto.value = function(et) {\n    return this._enc[et].value;\n  };\n\n  proto.fn = function(et) {\n    return this._enc[et].fn;\n  };\n\n  proto.sort = function(et, stats) {\n    var sort = this._enc[et].sort,\n      enc = this._enc,\n      isType = vlfield.isType;\n\n    if ((!sort || sort.length===0) &&\n        Encoding.toggleSort.support({enc:this._enc}, stats, true) && //HACK\n        this.config('toggleSort') === 'Q'\n      ) {\n      var qField = isType(enc.x, O) ? enc.y : enc.x;\n\n      if (isType(enc[et], O)) {\n        sort = [{\n          name: qField.name,\n          aggr: qField.aggr,\n          type: qField.type,\n          reverse: true\n        }];\n      }\n    }\n\n    return sort;\n  };\n\n  proto.length = function() {\n    return util.keys(this._enc).length;\n  };\n\n  proto.map = function(f) {\n    return vlenc.map(this._enc, f);\n  };\n\n  proto.reduce = function(f, init) {\n    return vlenc.reduce(this._enc, f, init);\n  };\n\n  proto.forEach = function(f) {\n    return vlenc.forEach(this._enc, f);\n  };\n\n  proto.type = function(et) {\n    return this.has(et) ? this._enc[et].type : null;\n  };\n\n  proto.role = function(et) {\n    return this.has(et) ? vlfield.role(this._enc[et]) : null;\n  };\n\n  proto.text = function(prop) {\n    var text = this._enc[TEXT].text;\n    return prop ? text[prop] : text;\n  };\n\n  proto.font = function(prop) {\n    var font = this._enc[TEXT].font;\n    return prop ? font[prop] : font;\n  };\n\n  proto.isType = function(et, type) {\n    var field = this.enc(et);\n    return field && Encoding.isType(field, type);\n  };\n\n  Encoding.isType = vlfield.isType;\n\n  Encoding.isOrdinalScale = function(encoding, encType) {\n    return vlfield.isOrdinalScale(encoding.enc(encType));\n  };\n\n  Encoding.isDimension = function(encoding, encType) {\n    return vlfield.isDimension(encoding.enc(encType));\n  };\n\n  Encoding.isMeasure = function(encoding, encType) {\n    return vlfield.isMeasure(encoding.enc(encType));\n  };\n\n  proto.isOrdinalScale = function(encType) {\n    return this.has(encType) && Encoding.isOrdinalScale(this, encType);\n  };\n\n  proto.isDimension = function(encType) {\n    return this.has(encType) && Encoding.isDimension(this, encType);\n  };\n\n  proto.isMeasure = function(encType) {\n    return this.has(encType) && Encoding.isMeasure(this, encType);\n  };\n\n  proto.isAggregate = function() {\n    return vlenc.isAggregate(this._enc);\n  };\n\n  Encoding.isAggregate = function(spec) {\n    return vlenc.isAggregate(spec.enc);\n  };\n\n  Encoding.alwaysNoOcclusion = function(spec) {\n    // FIXME raw OxQ with # of rows = # of O\n    return vlenc.isAggregate(spec.enc);\n  };\n\n  Encoding.isStack = function(spec) {\n    // FIXME update this once we have control for stack ...\n    return (spec.marktype === 'bar' || spec.marktype === 'area') &&\n      spec.enc.color;\n  };\n\n  proto.isStack = function() {\n    // FIXME update this once we have control for stack ...\n    return (this.is('bar') || this.is('area')) && this.has('color');\n  };\n\n  proto.cardinality = function(encType, stats) {\n    return vlfield.cardinality(this.enc(encType), stats, this.config('filterNull'));\n  };\n\n  proto.isRaw = function() {\n    return !this.isAggregate();\n  };\n\n  proto.data = function(name) {\n    return this._data[name];\n  };\n\n   // returns whether the encoding has values embedded\n  proto.hasValues = function() {\n    var vals = this.data('values');\n    return vals && vals.length;\n  };\n\n  proto.config = function(name) {\n    return this._config[name];\n  };\n\n  proto.toSpec = function(excludeConfig, excludeData) {\n    var enc = util.duplicate(this._enc),\n      spec;\n\n    spec = {\n      marktype: this._marktype,\n      enc: enc,\n      filter: this._filter\n    };\n\n    if (!excludeConfig) {\n      spec.config = util.duplicate(this._config);\n    }\n\n    if (!excludeData) {\n      spec.data = util.duplicate(this._data);\n    }\n\n    // remove defaults\n    var defaults = schema.instantiate();\n    return schema.util.subtract(spec, defaults);\n  };\n\n  proto.toShorthand = function() {\n    var c = consts.shorthand;\n    return 'mark' + c.assign + this._marktype +\n      c.delim + vlenc.shorthand(this._enc);\n  };\n\n  Encoding.shorthand = function (spec) {\n    var c = consts.shorthand;\n    return 'mark' + c.assign + spec.marktype +\n      c.delim + vlenc.shorthand(spec.enc);\n  };\n\n  Encoding.fromShorthand = function(shorthand, data, config, theme) {\n    var c = consts.shorthand,\n        split = shorthand.split(c.delim),\n        marktype = split.shift().split(c.assign)[1].trim(),\n        enc = vlenc.fromShorthand(split);\n\n    return new Encoding(marktype, enc, data, config, null, theme);\n  };\n\n  Encoding.specFromShorthand = function(shorthand, data, config, excludeConfig) {\n    return Encoding.fromShorthand(shorthand, data, config).toSpec(excludeConfig);\n  };\n\n  Encoding.fromSpec = function(spec, theme) {\n    return new Encoding(spec.marktype, spec.enc, spec.data, spec.config, spec.filter, theme);\n  };\n\n  Encoding.transpose = function(spec) {\n    var oldenc = spec.enc,\n      enc = util.duplicate(spec.enc);\n    enc.x = oldenc.y;\n    enc.y = oldenc.x;\n    enc.row = oldenc.col;\n    enc.col = oldenc.row;\n    spec.enc = enc;\n    return spec;\n  };\n\n  Encoding.toggleSort = function(spec) {\n    spec.config = spec.config || {};\n    spec.config.toggleSort = spec.config.toggleSort === 'Q' ? 'O' :'Q';\n    return spec;\n  };\n\n\n  Encoding.toggleSort.direction = function(spec) {\n    if (!Encoding.toggleSort.support(spec)) { return; }\n    var enc = spec.enc;\n    return enc.x.type === 'O' ? 'x' :  'y';\n  };\n\n  Encoding.toggleSort.mode = function(spec) {\n    return spec.config.toggleSort;\n  };\n\n  Encoding.toggleSort.support = function(spec, stats) {\n    var enc = spec.enc,\n      isType = vlfield.isType;\n\n    if (vlenc.has(enc, ROW) || vlenc.has(enc, COL) ||\n      !vlenc.has(enc, X) || !vlenc.has(enc, Y) ||\n      !Encoding.alwaysNoOcclusion(spec, stats)) {\n      return false;\n    }\n\n    return ( isType(enc.x, O) && vlfield.isMeasure(enc.y)) ? 'x' :\n      ( isType(enc.y, O) && vlfield.isMeasure(enc.x)) ? 'y' : false;\n  };\n\n  Encoding.toggleFilterNullO = function(spec) {\n    spec.config = spec.config || {};\n    spec.config.filterNull = spec.config.filterNull || { //FIXME\n      T: true,\n      Q: true\n    };\n    spec.config.filterNull.O = !spec.config.filterNull.O;\n    return spec;\n  };\n\n  Encoding.toggleFilterNullO.support = function(spec, stats) {\n    var fields = vlenc.fields(spec.enc);\n    for (var fieldName in fields) {\n      var fieldList = fields[fieldName];\n      if (fieldList.containsType.O && fieldName in stats && stats[fieldName].nulls > 0) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  return Encoding;\n})();\n","'use strict';\n\nrequire('../globals');\n\nvar util = require('../util');\n\nmodule.exports = aggregates;\n\nfunction aggregates(spec, encoding, opt) {\n  opt = opt || {};\n\n  var dims = {}, meas = {}, detail = {}, facets = {},\n    data = spec.data[1]; // currently data[0] is raw and data[1] is table\n\n  encoding.forEach(function(field, encType) {\n    if (field.aggr) {\n      if (field.aggr === 'count') {\n        meas.count = {op: 'count', field: '*'};\n      }else {\n        meas[field.aggr + '|'+ field.name] = {\n          op: field.aggr,\n          field: 'data.'+ field.name\n        };\n      }\n    } else {\n      dims[field.name] = encoding.field(encType);\n      if (encType == ROW || encType == COL) {\n        facets[field.name] = dims[field.name];\n      }else if (encType !== X && encType !== Y) {\n        detail[field.name] = dims[field.name];\n      }\n    }\n  });\n  dims = util.vals(dims);\n  meas = util.vals(meas);\n\n  if (meas.length > 0) {\n    if (!data.transform) data.transform = [];\n    data.transform.push({\n      type: 'aggregate',\n      groupby: dims,\n      fields: meas\n    });\n  }\n  return {\n    details: util.vals(detail),\n    dims: dims,\n    facets: util.vals(facets),\n    aggregated: meas.length > 0\n  };\n}\n","'use strict';\n\nrequire('../globals');\n\nvar util = require('../util'),\n  setter = util.setter,\n  getter = util.getter,\n  time = require('./time');\n\nvar axis = module.exports = {};\n\naxis.names = function(props) {\n  return util.keys(util.keys(props).reduce(function(a, x) {\n    var s = props[x].scale;\n    if (s === X || s === Y) a[props[x].scale] = 1;\n    return a;\n  }, {}));\n};\n\naxis.defs = function(names, encoding, layout, stats, opt) {\n  return names.reduce(function(a, name) {\n    a.push(axis.def(name, encoding, layout, stats, opt));\n    return a;\n  }, []);\n};\n\naxis.def = function(name, encoding, layout, stats, opt) {\n  var type = name;\n  var isCol = name == COL, isRow = name == ROW;\n  var rowOffset = axisTitleOffset(encoding, layout, Y) + 20,\n    cellPadding = layout.cellPadding;\n\n\n  if (isCol) type = 'x';\n  if (isRow) type = 'y';\n\n  var def = {\n    type: type,\n    scale: name\n  };\n\n  if (encoding.axis(name).grid) {\n    def.grid = true;\n    def.layer = (isRow || isCol) ? 'front' :  'back';\n\n    if (isCol) {\n      // set grid property -- put the lines on the right the cell\n      setter(def, ['properties', 'grid'], {\n        x: {\n          offset: layout.cellWidth * (1+ cellPadding/2.0),\n          // default value(s) -- vega doesn't do recursive merge\n          scale: 'col'\n        },\n        y: {\n          value: -layout.cellHeight * (cellPadding/2),\n        },\n        stroke: { value: encoding.config('cellGridColor') },\n        opacity: { value: encoding.config('cellGridOpacity') }\n      });\n    } else if (isRow) {\n      // set grid property -- put the lines on the top\n      setter(def, ['properties', 'grid'], {\n        y: {\n          offset: -layout.cellHeight * (cellPadding/2),\n          // default value(s) -- vega doesn't do recursive merge\n          scale: 'row'\n        },\n        x: {\n          value: rowOffset\n        },\n        x2: {\n          offset: rowOffset + (layout.cellWidth * 0.05),\n          // default value(s) -- vega doesn't do recursive merge\n          group: \"mark.group.width\",\n          mult: 1\n        },\n        stroke: { value: encoding.config('cellGridColor') },\n        opacity: { value: encoding.config('cellGridOpacity') }\n      });\n    } else {\n      setter(def, ['properties', 'grid'], {\n        stroke: { value: encoding.config('gridColor') },\n        opacity: { value: encoding.config('gridOpacity') }\n      });\n    }\n  }\n\n  if (encoding.axis(name).title) {\n    def = axis_title(def, name, encoding, layout, opt);\n  }\n\n  if (isRow || isCol) {\n    setter(def, ['properties', 'ticks'], {\n      opacity: {value: 0}\n    });\n    setter(def, ['properties', 'majorTicks'], {\n      opacity: {value: 0}\n    });\n    setter(def, ['properties', 'axis'], {\n      opacity: {value: 0}\n    });\n  }\n\n  if (isCol) {\n    def.orient = 'top';\n  }\n\n  if (isRow) {\n    def.offset = rowOffset;\n  }\n\n  if (name == X) {\n    if (encoding.has(Y) && encoding.isOrdinalScale(Y) && encoding.cardinality(Y, stats) > 30) {\n      def.orient = 'top';\n    }\n\n    if (encoding.isDimension(X) || encoding.isType(X, T)) {\n      setter(def, ['properties','labels'], {\n        angle: {value: 270},\n        align: {value: 'right'},\n        baseline: {value: 'middle'}\n      });\n    } else { // Q\n      def.ticks = 5;\n    }\n  }\n\n  def = axis_labels(def, name, encoding, layout, opt);\n\n  return def;\n};\n\nfunction axis_title(def, name, encoding, layout, opt) {\n  // jshint unused:false\n\n  var maxlength = null,\n    fieldTitle = encoding.fieldTitle(name);\n  if (name===X) {\n    maxlength = layout.cellWidth / encoding.config('characterWidth');\n  } else if (name === Y) {\n    maxlength = layout.cellHeight / encoding.config('characterWidth');\n  }\n\n  def.title = maxlength ? util.truncate(fieldTitle, maxlength) : fieldTitle;\n\n  if (name === ROW) {\n    setter(def, ['properties','title'], {\n      angle: {value: 0},\n      align: {value: 'right'},\n      baseline: {value: 'middle'},\n      dy: {value: (-layout.height/2) -20}\n    });\n  }\n\n  def.titleOffset = axisTitleOffset(encoding, layout, name);\n  return def;\n}\n\nfunction axis_labels(def, name, encoding, layout, opt) {\n  // jshint unused:false\n\n  var fn;\n  // add custom label for time type\n  if (encoding.isType(name, T) && (fn = encoding.fn(name)) && (time.hasScale(fn))) {\n    setter(def, ['properties','labels','text','scale'], 'time-'+ fn);\n  }\n\n  var textTemplatePath = ['properties','labels','text','template'];\n  if (encoding.axis(name).format) {\n    def.format = encoding.axis(name).format;\n  } else if (encoding.isType(name, Q)) {\n    setter(def, textTemplatePath, \"{{data | number:'.3s'}}\");\n  } else if (encoding.isType(name, T) && !encoding.fn(name)) {\n    setter(def, textTemplatePath, \"{{data | time:'%Y-%m-%d'}}\");\n  } else if (encoding.isType(name, T) && encoding.fn(name) === 'year') {\n    setter(def, textTemplatePath, \"{{data | number:'d'}}\");\n  } else if (encoding.isType(name, O) && encoding.axis(name).maxLabelLength) {\n    setter(def, textTemplatePath, '{{data | truncate:' + encoding.axis(name).maxLabelLength + '}}');\n  }\n\n  return def;\n}\n\nfunction axisTitleOffset(encoding, layout, name) {\n  var value = encoding.axis(name).titleOffset;\n  if (value) {\n    return value;\n  }\n  switch (name) {\n    case ROW: return 0;\n    case COL: return 35;\n  }\n  return getter(layout, [name, 'axisTitleOffset']);\n}\n","'use strict';\n\nrequire('../globals');\n\nmodule.exports = binning;\n\nfunction binning(spec, encoding, opt) {\n  opt = opt || {};\n\n  if (!spec.transform) spec.transform = [];\n\n  encoding.forEach(function(field, encType) {\n    if (encoding.bin(encType)) {\n      spec.transform.push({\n        type: 'bin',\n        field: 'data.' + field.name,\n        output: 'data.bin_' + field.name,\n        maxbins: encoding.bin(encType).maxbins\n      });\n    }\n  });\n}\n","'use strict';\n\nvar summary = module.exports = require('datalib/src/stats').summary;\n\nrequire('../globals');\n\nmodule.exports = compile;\n\nvar Encoding = require('../Encoding'),\n  axis = compile.axis = require('./axis'),\n  filter = compile.filter = require('./filter'),\n  legend = compile.legend = require('./legend'),\n  marks = compile.marks = require('./marks'),\n  scale = compile.scale = require('./scale');\n\ncompile.aggregate = require('./aggregate');\ncompile.bin = require('./bin');\ncompile.facet = require('./facet');\ncompile.group = require('./group');\ncompile.layout = require('./layout');\ncompile.sort = require('./sort');\ncompile.stack = require('./stack');\ncompile.style = require('./style');\ncompile.subfacet = require('./subfacet');\ncompile.template = require('./template');\ncompile.time = require('./time');\n\nfunction compile(spec, stats, theme) {\n  return compile.encoding(Encoding.fromSpec(spec, theme), stats);\n}\n\ncompile.shorthand = function (shorthand, stats, config, theme) {\n  return compile.encoding(Encoding.fromShorthand(shorthand, config, theme), stats);\n};\n\ncompile.encoding = function (encoding, stats) {\n  // no need to pass stats if you pass in the data\n  if (!stats && encoding.hasValues()) {\n    stats = summary(encoding.data('values')).reduce(function(s, p) {\n      s[p.field] = p;\n      return s;\n    }, {});\n  }\n\n  var layout = compile.layout(encoding, stats),\n    style = compile.style(encoding, stats),\n    spec = compile.template(encoding, layout, stats),\n    group = spec.marks[0],\n    mark = marks[encoding.marktype()],\n    mdefs = marks.def(mark, encoding, layout, style),\n    mdef = mdefs[0];  // TODO: remove this dirty hack by refactoring the whole flow\n\n  filter.addFilters(spec, encoding);\n  var sorting = compile.sort(spec, encoding, stats);\n\n  var hasRow = encoding.has(ROW), hasCol = encoding.has(COL);\n\n  for (var i = 0; i < mdefs.length; i++) {\n    group.marks.push(mdefs[i]);\n  }\n\n  compile.bin(spec.data[1], encoding);\n\n  var lineType = marks[encoding.marktype()].line;\n\n  spec = compile.time(spec, encoding);\n\n  // handle subfacets\n  var aggResult = compile.aggregate(spec, encoding),\n    details = aggResult.details,\n    hasDetails = details && details.length > 0,\n    stack = hasDetails && compile.stack(spec, encoding, mdef, aggResult.facets);\n\n  if (hasDetails && (stack || lineType)) {\n    //subfacet to group stack / line together in one group\n    compile.subfacet(group, mdef, details, stack, encoding);\n  }\n\n  // auto-sort line/area values\n  //TODO(kanitw): have some config to turn off auto-sort for line (for line chart that encodes temporal information)\n  if (lineType) {\n    var f = (encoding.isMeasure(X) && encoding.isDimension(Y)) ? Y : X;\n    if (!mdef.from) mdef.from = {};\n    // TODO: why - ?\n    mdef.from.transform = [{type: 'sort', by: '-' + encoding.field(f)}];\n  }\n\n  // Small Multiples\n  if (hasRow || hasCol) {\n    spec = compile.facet(group, encoding, layout, style, sorting, spec, mdef, stack, stats);\n    spec.legends = legend.defs(encoding);\n  } else {\n    group.scales = scale.defs(scale.names(mdef.properties.update), encoding, layout, style, sorting,\n      {stack: stack, stats: stats});\n    group.axes = axis.defs(axis.names(mdef.properties.update), encoding, layout, stats);\n    group.legends = legend.defs(encoding);\n  }\n\n  filter.filterLessThanZero(spec, encoding);\n\n  return spec;\n};\n\n","'use strict';\n\nrequire('../globals');\n\nvar util = require('../util');\n\nvar axis = require('./axis'),\n  groupdef = require('./group').def,\n  scale = require('./scale');\n\nmodule.exports = faceting;\n\nfunction faceting(group, encoding, layout, style, sorting, spec, mdef, stack, stats) {\n  var enter = group.properties.enter;\n  var facetKeys = [], cellAxes = [], from, axesGrp;\n\n  var hasRow = encoding.has(ROW), hasCol = encoding.has(COL);\n\n  enter.fill = {value: encoding.config('cellBackgroundColor')};\n\n  //move \"from\" to cell level and add facet transform\n  group.from = {data: group.marks[0].from.data};\n\n  // Hack, this needs to be refactored\n  for (var i = 0; i < group.marks.length; i++) {\n    var mark = group.marks[i];\n    if (mark.from.transform) {\n      delete mark.from.data; //need to keep transform for subfacetting case\n    } else {\n      delete mark.from;\n    }\n  }\n\n  if (hasRow) {\n    if (!encoding.isDimension(ROW)) {\n      util.error('Row encoding should be ordinal.');\n    }\n    enter.y = {scale: ROW, field: 'keys.' + facetKeys.length};\n    enter.height = {'value': layout.cellHeight}; // HACK\n\n    facetKeys.push(encoding.field(ROW));\n\n    if (hasCol) {\n      from = util.duplicate(group.from);\n      from.transform = from.transform || [];\n      from.transform.unshift({type: 'facet', keys: [encoding.field(COL)]});\n    }\n\n    axesGrp = groupdef('x-axes', {\n        axes: encoding.has(X) ? axis.defs(['x'], encoding, layout, stats) : undefined,\n        x: hasCol ? {scale: COL, field: 'keys.0'} : {value: 0},\n        width: hasCol && {'value': layout.cellWidth}, //HACK?\n        from: from\n      });\n\n    spec.marks.unshift(axesGrp); // need to prepend so it appears under the plots\n    (spec.axes = spec.axes || []);\n    spec.axes.push.apply(spec.axes, axis.defs(['row'], encoding, layout, stats));\n  } else { // doesn't have row\n    if (encoding.has(X)) {\n      //keep x axis in the cell\n      cellAxes.push.apply(cellAxes, axis.defs(['x'], encoding, layout, stats));\n    }\n  }\n\n  if (hasCol) {\n    if (!encoding.isDimension(COL)) {\n      util.error('Col encoding should be ordinal.');\n    }\n    enter.x = {scale: COL, field: 'keys.' + facetKeys.length};\n    enter.width = {'value': layout.cellWidth}; // HACK\n\n    facetKeys.push(encoding.field(COL));\n\n    if (hasRow) {\n      from = util.duplicate(group.from);\n      from.transform = from.transform || [];\n      from.transform.unshift({type: 'facet', keys: [encoding.field(ROW)]});\n    }\n\n    axesGrp = groupdef('y-axes', {\n      axes: encoding.has(Y) ? axis.defs(['y'], encoding, layout, stats) : undefined,\n      y: hasRow && {scale: ROW, field: 'keys.0'},\n      x: hasRow && {value: 0},\n      height: hasRow && {'value': layout.cellHeight}, //HACK?\n      from: from\n    });\n\n    spec.marks.unshift(axesGrp); // need to prepend so it appears under the plots\n    (spec.axes = spec.axes || []);\n    spec.axes.push.apply(spec.axes, axis.defs(['col'], encoding, layout, stats));\n  } else { // doesn't have col\n    if (encoding.has(Y)) {\n      cellAxes.push.apply(cellAxes, axis.defs(['y'], encoding, layout, stats));\n    }\n  }\n\n  // assuming equal cellWidth here\n  // TODO: support heterogenous cellWidth (maybe by using multiple scales?)\n  spec.scales = (spec.scales || []).concat(scale.defs(\n    scale.names(enter).concat(scale.names(mdef.properties.update)),\n    encoding,\n    layout,\n    style,\n    sorting,\n    {stack: stack, facet: true, stats: stats}\n  )); // row/col scales + cell scales\n\n  if (cellAxes.length > 0) {\n    group.axes = cellAxes;\n  }\n\n  // add facet transform\n  var trans = (group.from.transform || (group.from.transform = []));\n  trans.unshift({type: 'facet', keys: facetKeys});\n\n  return spec;\n}\n","'use strict';\n\nrequire('../globals');\n\nvar filter = module.exports = {};\n\nvar BINARY = {\n  '>':  true,\n  '>=': true,\n  '=':  true,\n  '!=': true,\n  '<':  true,\n  '<=': true\n};\n\nfilter.addFilters = function(spec, encoding) {\n  var filters = encoding.filter(),\n    data = spec.data[0];  // apply filters to raw data before aggregation\n\n  if (!data.transform)\n    data.transform = [];\n\n  // add custom filters\n  for (var i in filters) {\n    var filter = filters[i];\n\n    var condition = '';\n    var operator = filter.operator;\n    var operands = filter.operands;\n\n    if (BINARY[operator]) {\n      // expects a field and a value\n      if (operator === '=') {\n        operator = '==';\n      }\n\n      var op1 = operands[0];\n      var op2 = operands[1];\n      condition = 'd.data.' + op1 + operator + op2;\n    } else if (operator === 'notNull') {\n      // expects a number of fields\n      for (var j in operands) {\n        condition += 'd.data.' + operands[j] + '!==null';\n        if (j < operands.length - 1) {\n          condition += ' && ';\n        }\n      }\n    } else {\n      console.warn('Unsupported operator: ', operator);\n    }\n\n    data.transform.push({\n      type: 'filter',\n      test: condition\n    });\n  }\n};\n\n// remove less than 0 values if we use log function\nfilter.filterLessThanZero = function(spec, encoding) {\n  encoding.forEach(function(field, encType) {\n    if (encoding.scale(encType).type === 'log') {\n      spec.data[1].transform.push({\n        type: 'filter',\n        test: 'd.' + encoding.field(encType) + '>0'\n      });\n    }\n  });\n};\n\n","'use strict';\n\nmodule.exports = {\n  def: groupdef\n};\n\nfunction groupdef(name, opt) {\n  opt = opt || {};\n  return {\n    _name: name || undefined,\n    type: 'group',\n    from: opt.from,\n    properties: {\n      enter: {\n        x: opt.x || undefined,\n        y: opt.y || undefined,\n        width: opt.width || {group: 'width'},\n        height: opt.height || {group: 'height'}\n      }\n    },\n    scales: opt.scales || undefined,\n    axes: opt.axes || undefined,\n    marks: opt.marks || []\n  };\n}\n","'use strict';\n\nrequire('../globals');\n\nvar util = require('../util'),\n  setter = util.setter;\n\nmodule.exports = vllayout;\n\nfunction vllayout(encoding, stats) {\n  var layout = box(encoding, stats);\n  layout = offset(encoding, stats, layout);\n  return layout;\n}\n\n/*\n  HACK to set chart size\n  NOTE: this fails for plots driven by derived values (e.g., aggregates)\n  One solution is to update Vega to support auto-sizing\n  In the meantime, auto-padding (mostly) does the trick\n */\nfunction box(encoding, stats) {\n  var hasRow = encoding.has(ROW),\n      hasCol = encoding.has(COL),\n      hasX = encoding.has(X),\n      hasY = encoding.has(Y),\n      marktype = encoding.marktype();\n\n  // FIXME/HACK we need to take filter into account\n  var xCardinality = hasX && encoding.isDimension(X) ? encoding.cardinality(X, stats) : 1,\n    yCardinality = hasY && encoding.isDimension(Y) ? encoding.cardinality(Y, stats) : 1;\n\n  var useSmallBand = xCardinality > encoding.config('largeBandMaxCardinality') ||\n    yCardinality > encoding.config('largeBandMaxCardinality');\n\n  var cellWidth, cellHeight, cellPadding = encoding.config('cellPadding');\n\n  // set cellWidth\n  if (hasX) {\n    if (encoding.isOrdinalScale(X)) {\n      // for ordinal, hasCol or not doesn't matter -- we scale based on cardinality\n      cellWidth = (xCardinality + encoding.band(X).padding) * encoding.bandSize(X, useSmallBand);\n    } else {\n      cellWidth = hasCol || hasRow ? encoding.enc(COL).width :  encoding.config(\"singleWidth\");\n    }\n  } else {\n    if (marktype === TEXT) {\n      cellWidth = encoding.config('textCellWidth');\n    } else {\n      cellWidth = encoding.bandSize(X);\n    }\n  }\n\n  // set cellHeight\n  if (hasY) {\n    if (encoding.isOrdinalScale(Y)) {\n      // for ordinal, hasCol or not doesn't matter -- we scale based on cardinality\n      cellHeight = (yCardinality + encoding.band(Y).padding) * encoding.bandSize(Y, useSmallBand);\n    } else {\n      cellHeight = hasCol || hasRow ? encoding.enc(ROW).height :  encoding.config(\"singleHeight\");\n    }\n  } else {\n    cellHeight = encoding.bandSize(Y);\n  }\n\n  // Cell bands use rangeBands(). There are n-1 padding.  Outerpadding = 0 for cells\n\n  var width = cellWidth, height = cellHeight;\n  if (hasCol) {\n    var colCardinality = encoding.cardinality(COL, stats);\n    width = cellWidth * ((1 + cellPadding) * (colCardinality - 1) + 1);\n  }\n  if (hasRow) {\n    var rowCardinality =  encoding.cardinality(ROW, stats);\n    height = cellHeight * ((1 + cellPadding) * (rowCardinality - 1) + 1);\n  }\n\n  return {\n    // width and height of the whole cell\n    cellWidth: cellWidth,\n    cellHeight: cellHeight,\n    cellPadding: cellPadding,\n    // width and height of the chart\n    width: width,\n    height: height,\n    // information about x and y, such as band size\n    x: {useSmallBand: useSmallBand},\n    y: {useSmallBand: useSmallBand}\n  };\n}\n\nfunction getMaxLength(encoding, stats, et) {\n  // FIXME determine constant for Q and T in a nicer way\n  return encoding.isType(et, Q) ? 20 :\n    encoding.isType(et, T) ? 20 :\n    stats[encoding.fieldName(et)].max;\n}\n\nfunction offset(encoding, stats, layout) {\n  [X, Y].forEach(function (x) {\n    var maxLength;\n    if (encoding.isDimension(x) || encoding.isType(x, T)) {\n      maxLength =  getMaxLength(encoding, stats, x);\n    } else if (encoding.aggr(x) === 'count') {\n      //assign default value for count as it won't have stats\n      maxLength =  3;\n    } else if (encoding.isType(x, Q)) {\n      if (x===X) {\n        maxLength = 3;\n      } else { // Y\n        //assume that default formating is always shorter than 7\n        maxLength = Math.min(getMaxLength(encoding, stats, x), 7);\n      }\n    }\n    setter(layout,[x, 'axisTitleOffset'], encoding.config('characterWidth') *  maxLength + 20);\n  });\n  return layout;\n}\n","'use strict';\n\nrequire('../globals');\n\nvar time = require('./time');\n\nvar legend = module.exports = {};\n\nlegend.defs = function(encoding) {\n  var defs = [];\n  // TODO: support alpha\n\n  if (encoding.has(COLOR) && encoding.legend(COLOR)) {\n    defs.push(legend.def(COLOR, encoding, {\n      fill: COLOR,\n      orient: 'right'\n    }));\n  }\n\n  if (encoding.has(SIZE) && encoding.legend(SIZE)) {\n    defs.push(legend.def(SIZE, encoding, {\n      size: SIZE,\n      orient: defs.length === 1 ? 'left' : 'right'\n    }));\n  }\n\n  if (encoding.has(SHAPE) && encoding.legend(SHAPE)) {\n    if (defs.length === 2) {\n      // TODO: fix this\n      console.error('Vega-lite currently only supports two legends');\n      return defs;\n    }\n    defs.push(legend.def(SHAPE, encoding, {\n      shape: SHAPE,\n      orient: defs.length === 1 ? 'left' : 'right'\n    }));\n  }\n\n  return defs;\n};\n\nlegend.def = function(name, encoding, props) {\n  var def = props, fn;\n\n  def.title = encoding.fieldTitle(name);\n\n  if (encoding.isType(name, T) && (fn = encoding.fn(name)) &&\n    time.hasScale(fn)) {\n    var properties = def.properties = def.properties || {},\n      labels = properties.labels = properties.labels || {},\n      text = labels.text = labels.text || {};\n\n    text.scale = 'time-'+ fn;\n  }\n\n  return def;\n};\n","'use strict';\n\nrequire('../globals');\n\nvar marks = module.exports = {};\n\nmarks.def = function(mark, encoding, layout, style) {\n  var defs = [];\n\n  // to add a background to text, we need to add it before the text\n  if (encoding.marktype() === TEXT && encoding.has(COLOR)) {\n    var bg = {\n      x: {value: 0},\n      y: {value: 0},\n      x2: {value: layout.cellWidth},\n      y2: {value: layout.cellHeight},\n      fill: {scale: COLOR, field: encoding.field(COLOR)}\n    };\n    defs.push({\n      type: 'rect',\n      from: {data: TABLE},\n      properties: {enter: bg, update: bg}\n    });\n  }\n\n  // add the mark def for the main thing\n  var p = mark.prop(encoding, layout, style);\n  defs.push({\n    type: mark.type,\n    from: {data: TABLE},\n    properties: {enter: p, update: p}\n  });\n\n  return defs;\n};\n\nmarks.bar = {\n  type: 'rect',\n  stack: true,\n  prop: bar_props,\n  requiredEncoding: ['x', 'y'],\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, size: 1, color: 1, alpha: 1}\n};\n\nmarks.line = {\n  type: 'line',\n  line: true,\n  prop: line_props,\n  requiredEncoding: ['x', 'y'],\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, color: 1, alpha: 1, detail:1}\n};\n\nmarks.area = {\n  type: 'area',\n  stack: true,\n  line: true,\n  requiredEncoding: ['x', 'y'],\n  prop: area_props,\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, color: 1, alpha: 1}\n};\n\nmarks.tick = {\n  type: 'rect',\n  prop: tick_props,\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, color: 1, alpha: 1, detail: 1}\n};\n\nmarks.circle = {\n  type: 'symbol',\n  prop: filled_point_props('circle'),\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, size: 1, color: 1, alpha: 1, detail: 1}\n};\n\nmarks.square = {\n  type: 'symbol',\n  prop: filled_point_props('square'),\n  supportedEncoding: marks.circle.supportedEncoding\n};\n\nmarks.point = {\n  type: 'symbol',\n  prop: point_props,\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, size: 1, color: 1, alpha: 1, shape: 1, detail: 1}\n};\n\nmarks.text = {\n  type: 'text',\n  prop: text_props,\n  requiredEncoding: ['text'],\n  supportedEncoding: {row: 1, col: 1, size: 1, color: 1, alpha: 1, text: 1}\n};\n\nfunction bar_props(e, layout, style) {\n  // jshint unused:false\n\n  var p = {};\n\n  // x's and width \n  if (e.isMeasure(X)) {\n    p.x = {scale: X, field: e.field(X)};\n    if (!e.has(Y) || e.isDimension(Y)) {\n      p.x2 = {value: 0};\n    }\n  } else {\n    if (e.has(X)) { // is ordinal\n       p.xc = {scale: X, field: e.field(X)};\n    } else {\n       p.x = {value: 0, offset: e.config('singleBarOffset')};\n    }\n  }\n  \n  // width\n  if (!p.x2) {\n    if (!e.has(X) || e.isOrdinalScale(X)) { // no X or X is ordinal\n      if (e.has(SIZE)) {\n        p.width = {scale: SIZE, field: e.field(SIZE)};\n      } else {\n        p.width = {\n          value: e.bandSize(X, layout.x.useSmallBand),\n          offset: -1\n        };\n      }\n    } else { // X is Quant or Time Scale\n      p.width = {value: 2};\n    }  \n  }\n\n  // y's & height\n  if (e.isMeasure(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n    p.y2 = {group: \"height\"};\n  } else {\n    if (e.has(Y)) { // is ordinal\n      p.yc = {scale: Y, field: e.field(Y)};\n    } else {\n      p.y2 = {group: 'height', offset: -e.config('singleBarOffset')};\n    }\n\n    if (e.has(SIZE)) {\n      p.height = {scale: SIZE, field: e.field(SIZE)};\n    } else {\n      p.height = {\n        value: e.bandSize(Y, layout.y.useSmallBand),\n        offset: -1\n      };\n    }\n  }\n\n\n\n  // fill\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else {\n    p.fill = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  }\n\n  return p;\n}\n\nfunction point_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    p.x = {value: e.bandSize(X, layout.x.useSmallBand) / 2};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {value: e.bandSize(Y, layout.y.useSmallBand) / 2};\n  }\n\n  // size\n  if (e.has(SIZE)) {\n    p.size = {scale: SIZE, field: e.field(SIZE)};\n  } else if (!e.has(SIZE)) {\n    p.size = {value: e.value(SIZE)};\n  }\n\n  // shape\n  if (e.has(SHAPE)) {\n    p.shape = {scale: SHAPE, field: e.field(SHAPE)};\n  } else if (!e.has(SHAPE)) {\n    p.shape = {value: e.value(SHAPE)};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.stroke = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.stroke = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  } else if (!e.has(COLOR)) {\n    p.opacity = {value: style.opacity};\n  }\n\n  p.strokeWidth = {value: e.config('strokeWidth')};\n\n  return p;\n}\n\nfunction line_props(e,layout, style) {\n  // jshint unused:false\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    p.x = {value: 0};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {group: 'height'};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.stroke = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.stroke = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  }\n\n  p.strokeWidth = {value: e.config('strokeWidth')};\n\n  return p;\n}\n\nfunction area_props(e, layout, style) {\n  // jshint unused:false\n  var p = {};\n\n  // x\n  if (e.isMeasure(X)) {\n    p.x = {scale: X, field: e.field(X)};\n    if (e.isDimension(Y)) {\n      p.x2 = {scale: X, value: 0};\n      p.orient = {value: 'horizontal'};\n    }\n  } else if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else {\n    p.x = {value: 0};\n  }\n\n  // y\n  if (e.isMeasure(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n    p.y2 = {scale: Y, value: 0};\n  } else if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else {\n    p.y = {group: 'height'};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.fill = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  }\n\n  return p;\n}\n\nfunction tick_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n    if (e.isDimension(X)) {\n      p.x.offset = -e.bandSize(X, layout.x.useSmallBand) / 3;\n    }\n  } else if (!e.has(X)) {\n    p.x = {value: 0};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n    if (e.isDimension(Y)) {\n      p.y.offset = -e.bandSize(Y, layout.y.useSmallBand) / 3;\n    }\n  } else if (!e.has(Y)) {\n    p.y = {value: 0};\n  }\n\n  // width\n  if (!e.has(X) || e.isDimension(X)) {\n    p.width = {value: e.bandSize(X, layout.y.useSmallBand) / 1.5};\n  } else {\n    p.width = {value: 1};\n  }\n\n  // height\n  if (!e.has(Y) || e.isDimension(Y)) {\n    p.height = {value: e.bandSize(Y, layout.y.useSmallBand) / 1.5};\n  } else {\n    p.height = {value: 1};\n  }\n\n  // fill\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else {\n    p.fill = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  } else if (!e.has(COLOR)) {\n    p.opacity = {value: style.opacity};\n  }\n\n  return p;\n}\n\nfunction filled_point_props(shape) {\n  return function(e, layout, style) {\n    var p = {};\n\n    // x\n    if (e.has(X)) {\n      p.x = {scale: X, field: e.field(X)};\n    } else if (!e.has(X)) {\n      p.x = {value: e.bandSize(X, layout.x.useSmallBand) / 2};\n    }\n\n    // y\n    if (e.has(Y)) {\n      p.y = {scale: Y, field: e.field(Y)};\n    } else if (!e.has(Y)) {\n      p.y = {value: e.bandSize(Y, layout.y.useSmallBand) / 2};\n    }\n\n    // size\n    if (e.has(SIZE)) {\n      p.size = {scale: SIZE, field: e.field(SIZE)};\n    } else if (!e.has(X)) {\n      p.size = {value: e.value(SIZE)};\n    }\n\n    // shape\n    p.shape = {value: shape};\n\n    // fill\n    if (e.has(COLOR)) {\n      p.fill = {scale: COLOR, field: e.field(COLOR)};\n    } else if (!e.has(COLOR)) {\n      p.fill = {value: e.value(COLOR)};\n    }\n\n    // alpha\n    if (e.has(ALPHA)) {\n      p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n    } else if (e.value(ALPHA) !== undefined) {\n      p.opacity = {value: e.value(ALPHA)};\n    } else if (!e.has(COLOR)) {\n      p.opacity = {value: style.opacity};\n    }\n\n    return p;\n  };\n}\n\nfunction text_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    if (e.has(TEXT) && e.isType(TEXT, Q)) {\n      p.x = {value: layout.cellWidth-5};\n    } else {\n      p.x = {value: e.bandSize(X, layout.x.useSmallBand) / 2};\n    }\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {value: e.bandSize(Y, layout.y.useSmallBand) / 2};\n  }\n\n  // size\n  if (e.has(SIZE)) {\n    p.fontSize = {scale: SIZE, field: e.field(SIZE)};\n  } else if (!e.has(SIZE)) {\n    p.fontSize = {value: e.font('size')};\n  }\n\n  // fill\n  // color should be set to background\n  p.fill = {value: 'black'};\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  } else {\n    p.opacity = {value: style.opacity};\n  }\n\n  // text\n  if (e.has(TEXT)) {\n    if (e.isType(TEXT, Q)) {\n      p.text = {template: \"{{\" + e.field(TEXT) + \" | number:'.3s'}}\"};\n      p.align = {value: 'right'};\n    } else {\n      p.text = {field: e.field(TEXT)};\n    }\n  } else {\n    p.text = {value: 'Abc'};\n  }\n\n  p.font = {value: e.font('family')};\n  p.fontWeight = {value: e.font('weight')};\n  p.fontStyle = {value: e.font('style')};\n  p.baseline = {value: e.text('baseline')};\n\n  return p;\n}\n","'use strict';\nrequire('../globals');\nvar util = require('../util'),\n  time = require('./time');\n\nvar scale = module.exports = {};\n\nscale.names = function(props) {\n  return util.keys(util.keys(props).reduce(function(a, x) {\n    if (props[x] && props[x].scale) a[props[x].scale] = 1;\n    return a;\n  }, {}));\n};\n\nscale.defs = function(names, encoding, layout, style, sorting, opt) {\n  opt = opt || {};\n\n  return names.reduce(function(a, name) {\n    var s = {\n      name: name,\n      type: scale.type(name, encoding),\n      domain: scale_domain(name, encoding, sorting, opt)\n    };\n    if (s.type === 'ordinal' && !encoding.bin(name) && encoding.sort(name).length === 0) {\n      s.sort = true;\n    }\n\n    scale_range(s, encoding, layout, style, opt);\n\n    return (a.push(s), a);\n  }, []);\n};\n\nscale.type = function(name, encoding) {\n\n  switch (encoding.type(name)) {\n    case O: return 'ordinal';\n    case T:\n      var fn = encoding.fn(name);\n      return (fn && time.scale.type(fn, name)) || 'time';\n    case Q:\n      if (encoding.bin(name)) {\n        return name === COLOR ? 'linear' : 'ordinal';\n      }\n      return encoding.scale(name).type;\n  }\n};\n\nfunction scale_domain(name, encoding, sorting, opt) {\n  if (encoding.isType(name, T)) {\n    var range = time.scale.domain(encoding.fn(name), name);\n    if(range) return range;\n  }\n\n  return name == opt.stack ?\n    {\n      data: STACKED,\n      field: 'data.' + (opt.facet ? 'max_' : '') + 'sum_' + encoding.field(name, true)\n    } :\n    {data: sorting.getDataset(name), field: encoding.field(name)};\n}\n\nfunction scale_range(s, encoding, layout, style, opt) {\n  // jshint unused:false\n  var spec = encoding.scale(s.name);\n  switch (s.name) {\n    case X:\n      if (s.type === 'ordinal') {\n        s.bandWidth = encoding.bandSize(X, layout.x.useSmallBand);\n      } else {\n        s.range = layout.cellWidth ? [0, layout.cellWidth] : 'width';\n\n        if (encoding.isType(s.name,T) && encoding.fn(s.name) === 'year') {\n          s.zero = false;\n        } else {\n          s.zero = spec.zero === undefined ? true : spec.zero;\n        }\n\n        s.reverse = spec.reverse;\n      }\n      s.round = true;\n      if (s.type === 'time') {\n        s.nice = encoding.fn(s.name);\n      }else {\n        s.nice = true;\n      }\n      break;\n    case Y:\n      if (s.type === 'ordinal') {\n        s.bandWidth = encoding.bandSize(Y, layout.y.useSmallBand);\n      } else {\n        s.range = layout.cellHeight ? [layout.cellHeight, 0] : 'height';\n\n        if (encoding.isType(s.name,T) && encoding.fn(s.name) === 'year') {\n          s.zero = false;\n        } else {\n          s.zero = spec.zero === undefined ? true : spec.zero;\n        }\n\n        s.reverse = spec.reverse;\n      }\n\n      s.round = true;\n\n      if (s.type === 'time') {\n        s.nice = encoding.fn(s.name) || encoding.config('timeScaleNice');\n      }else {\n        s.nice = true;\n      }\n      break;\n    case ROW: // support only ordinal\n      s.bandWidth = layout.cellHeight;\n      s.round = true;\n      s.nice = true;\n      break;\n    case COL: // support only ordinal\n      s.bandWidth = layout.cellWidth;\n      s.round = true;\n      s.nice = true;\n      break;\n    case SIZE:\n      if (encoding.is('bar')) {\n        // FIXME this is definitely incorrect\n        // but let's fix it later since bar size is a bad encoding anyway\n        s.range = [3, Math.max(encoding.bandSize(X), encoding.bandSize(Y))];\n      } else if (encoding.is(TEXT)) {\n        s.range = [8, 40];\n      } else { //point\n        var bandSize = Math.min(encoding.bandSize(X), encoding.bandSize(Y)) - 1;\n        s.range = [10, 0.8 * bandSize*bandSize];\n      }\n      s.round = true;\n      s.zero = false;\n      break;\n    case SHAPE:\n      s.range = 'shapes';\n      break;\n    case COLOR:\n      var range = encoding.scale(COLOR).range;\n      if (range === undefined) {\n        if (s.type === 'ordinal') {\n          // FIXME\n          range = style.colorRange;\n        } else {\n          range = ['#A9DB9F', '#0D5C21'];\n          s.zero = false;\n        }\n      }\n      s.range = range;\n      break;\n    case ALPHA:\n      s.range = [0.2, 1.0];\n      break;\n    default:\n      throw new Error('Unknown encoding name: '+ s.name);\n  }\n\n  switch (s.name) {\n    case ROW:\n    case COL:\n      s.padding = encoding.config('cellPadding');\n      s.outerPadding = 0;\n      break;\n    case X:\n    case Y:\n      if (s.type === 'ordinal') { //&& !s.bandWidth\n        s.points = true;\n        s.padding = encoding.band(s.name).padding;\n      }\n  }\n}\n","'use strict';\n\nrequire('../globals');\n\nmodule.exports = addSortTransforms;\n\n// adds new transforms that produce sorted fields\nfunction addSortTransforms(spec, encoding, stats, opt) {\n  // jshint unused:false\n\n  var datasetMapping = {};\n  var counter = 0;\n\n  encoding.forEach(function(field, encType) {\n    var sortBy = encoding.sort(encType, stats);\n    if (sortBy.length > 0) {\n      var fields = sortBy.map(function(d) {\n        return {\n          op: d.aggr,\n          field: 'data.' + d.name\n        };\n      });\n\n      var byClause = sortBy.map(function(d) {\n        var reverse = (d.reverse ? '-' : '');\n        return reverse + 'data.' + (d.aggr==='count' ? 'count' : (d.aggr + '_' + d.name));\n      });\n\n      var dataName = 'sorted' + counter++;\n\n      var transforms = [\n        {\n          type: 'aggregate',\n          groupby: ['data.' + field.name],\n          fields: fields\n        },\n        {\n          type: 'sort',\n          by: byClause\n        }\n      ];\n\n      spec.data.push({\n        name: dataName,\n        source: RAW,\n        transform: transforms\n      });\n\n      datasetMapping[encType] = dataName;\n    }\n  });\n\n  return {\n    spec: spec,\n    getDataset: function(encType) {\n      var data = datasetMapping[encType];\n      if (!data) {\n        return TABLE;\n      }\n      return data;\n    }\n  };\n}\n","\"use strict\";\n\nrequire('../globals');\n\nvar  marks = require('./marks');\n\nmodule.exports = stacking;\n\nfunction stacking(spec, encoding, mdef, facets) {\n  if (!marks[encoding.marktype()].stack) return false;\n\n  // TODO: add || encoding.has(LOD) here once LOD is implemented\n  if (!encoding.has(COLOR)) return false;\n\n  var dim=null, val=null, idx =null,\n    isXMeasure = encoding.isMeasure(X),\n    isYMeasure = encoding.isMeasure(Y);\n\n  if (isXMeasure && !isYMeasure) {\n    dim = Y;\n    val = X;\n    idx = 0;\n  } else if (isYMeasure && !isXMeasure) {\n    dim = X;\n    val = Y;\n    idx = 1;\n  } else {\n    return null; // no stack encoding\n  }\n\n  // add transform to compute sums for scale\n  var stacked = {\n    name: STACKED,\n    source: TABLE,\n    transform: [{\n      type: 'aggregate',\n      groupby: [encoding.field(dim)].concat(facets), // dim and other facets\n      fields: [{op: 'sum', field: encoding.field(val)}] // TODO check if field with aggr is correct?\n    }]\n  };\n\n  if (facets && facets.length > 0) {\n    stacked.transform.push({ //calculate max for each facet\n      type: 'aggregate',\n      groupby: facets,\n      fields: [{op: 'max', field: 'data.sum_' + encoding.field(val, true)}]\n    });\n  }\n\n  spec.data.push(stacked);\n\n  // add stack transform to mark\n  mdef.from.transform = [{\n    type: 'stack',\n    point: encoding.field(dim),\n    height: encoding.field(val),\n    output: {y1: val, y0: val + '2'}\n  }];\n\n  // TODO: This is super hack-ish -- consolidate into modular mark properties?\n  mdef.properties.update[val] = mdef.properties.enter[val] = {scale: val, field: val};\n  mdef.properties.update[val + '2'] = mdef.properties.enter[val + '2'] = {scale: val, field: val + '2'};\n\n  return val; //return stack encoding\n}\n","'use strict';\n\nrequire('../globals');\n\nvar vlfield = require('../field');\n\nmodule.exports = function(encoding, stats) {\n  return {\n    opacity: estimateOpacity(encoding, stats),\n    colorRange: colorRange(encoding, stats)\n  };\n};\n\nfunction colorRange(encoding, stats){\n  if (encoding.has(COLOR) && encoding.isDimension(COLOR)) {\n    var cardinality = encoding.cardinality(COLOR, stats);\n    if (cardinality <= 10) {\n      return \"category10\";\n    } else {\n      return \"category20\";\n    }\n    // TODO can vega interpolate range for ordinal scale?\n  }\n  return null;\n}\n\nfunction estimateOpacity(encoding,stats) {\n  if (!stats) {\n    return 1;\n  }\n\n  var numPoints = 0;\n\n  if (encoding.isAggregate()) { // aggregate plot\n    numPoints = 1;\n\n    //  get number of points in each \"cell\"\n    //  by calculating product of cardinality\n    //  for each non faceting and non-ordinal X / Y fields\n    //  note that ordinal x,y are not include since we can\n    //  consider that ordinal x are subdividing the cell into subcells anyway\n    encoding.forEach(function(field, encType) {\n\n      if (encType !== ROW && encType !== COL &&\n          !((encType === X || encType === Y) &&\n          vlfield.isOrdinalScale(field))\n        ) {\n        numPoints *= encoding.cardinality(encType, stats);\n      }\n    });\n\n  } else { // raw plot\n    numPoints = stats.count;\n\n    // small multiples divide number of points\n    var numMultiples = 1;\n    if (encoding.has(ROW)) {\n      numMultiples *= encoding.cardinality(ROW, stats);\n    }\n    if (encoding.has(COL)) {\n      numMultiples *= encoding.cardinality(COL, stats);\n    }\n    numPoints /= numMultiples;\n  }\n\n  var opacity = 0;\n  if (numPoints < 20) {\n    opacity = 1;\n  } else if (numPoints < 200) {\n    opacity = 0.7;\n  } else if (numPoints < 1000 || encoding.is('tick')) {\n    opacity = 0.6;\n  } else {\n    opacity = 0.3;\n  }\n\n  return opacity;\n}\n\n","'use strict';\n\nrequire('../globals');\n\nvar groupdef = require('./group').def;\n\nmodule.exports = subfaceting;\n\nfunction subfaceting(group, mdef, details, stack, encoding) {\n  var m = group.marks,\n    g = groupdef('subfacet', {marks: m});\n\n  group.marks = [g];\n  g.from = mdef.from;\n  delete mdef.from;\n\n  //TODO test LOD -- we should support stack / line without color (LOD) field\n  var trans = (g.from.transform || (g.from.transform = []));\n  trans.unshift({type: 'facet', keys: details});\n\n  if (stack && encoding.has(COLOR)) {\n    trans.unshift({type: 'sort', by: encoding.field(COLOR)});\n  }\n}\n","'use strict';\n\nrequire('../globals');\n\nvar groupdef = require('./group').def,\n  vlfield = require('../field');\n\nmodule.exports = template;\n\nfunction template(encoding, layout, stats) {\n  // jshint unused:false\n\n  var data = {name: RAW, format: {}},\n    table = {name: TABLE, source: RAW},\n    dataUrl = encoding.data('url'),\n    dataType = encoding.data('formatType'),\n    values = encoding.data('values');\n\n  if (encoding.hasValues()) {\n    data.values = values;\n  } else {\n    data.url = dataUrl;\n    data.format.type = dataType;\n  }\n\n  encoding.forEach(function(field, encType) {\n    var name;\n    if (field.type == T) {\n      data.format.parse = data.format.parse || {};\n      data.format.parse[field.name] = 'date';\n    } else if (field.type == Q) {\n      data.format.parse = data.format.parse || {};\n      if (vlfield.isCount(field)) {\n        name = 'count';\n      } else {\n        name = field.name;\n      }\n      data.format.parse[name] = 'number';\n    }\n  });\n\n  return {\n    width: layout.width,\n    height: layout.height,\n    padding: 'auto',\n    data: [data, table],\n    marks: [groupdef('cell', {\n      width: layout.cellWidth ? {value: layout.cellWidth} : undefined,\n      height: layout.cellHeight ? {value: layout.cellHeight} : undefined\n    })]\n  };\n}\n","'use strict';\n\nvar util = require('../util');\n\nmodule.exports = time;\n\nfunction time(spec, encoding, opt) {\n  // jshint unused:false\n  var timeFields = {}, timeFn = {};\n\n  // find unique formula transformation and bin function\n  encoding.forEach(function(field, encType) {\n    if (field.type === T && field.fn) {\n      timeFields[encoding.field(encType)] = {\n        field: field,\n        encType: encType\n      };\n      timeFn[field.fn] = true;\n    }\n  });\n\n  // add formula transform\n  var data = spec.data[1],\n    transform = data.transform = data.transform || [];\n\n  for (var f in timeFields) {\n    var tf = timeFields[f];\n    time.transform(transform, encoding, tf.encType, tf.field);\n  }\n\n  // add scales\n  var scales = spec.scales = spec.scales || [];\n  for (var fn in timeFn) {\n    time.scale(scales, fn, encoding);\n  }\n  return spec;\n}\n\ntime.cardinality = function(field, stats, filterNull, type) {\n  var fn = field.fn;\n  switch (fn) {\n    case 'seconds': return 60;\n    case 'minutes': return 60;\n    case 'hours': return 24;\n    case 'day': return 7;\n    case 'date': return 31;\n    case 'month': return 12;\n    case 'year':\n      var stat = stats[field.name],\n        yearstat = stats['year_'+field.name];\n\n      if (!yearstat) { return null; }\n\n      return yearstat.distinct -\n        (stat.nulls > 0 && filterNull[type] ? 1 : 0);\n  }\n\n  return null;\n};\n\nfunction fieldFn(func, field) {\n  return 'utc' + func + '(d.data.'+ field.name +')';\n}\n\n/**\n * @return {String} date binning formula of the given field\n */\ntime.formula = function(field) {\n  return fieldFn(field.fn, field);\n};\n\n/** add formula transforms to data */\ntime.transform = function(transform, encoding, encType, field) {\n  transform.push({\n    type: 'formula',\n    field: encoding.field(encType),\n    expr: time.formula(field)\n  });\n};\n\n/** append custom time scales for axis label */\ntime.scale = function(scales, fn, encoding) {\n  var labelLength = encoding.config('timeScaleLabelLength');\n  // TODO add option for shorter scale / custom range\n  switch (fn) {\n    case 'day':\n      scales.push({\n        name: 'time-'+fn,\n        type: 'ordinal',\n        domain: util.range(0, 7),\n        range: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'].map(\n          function(s) { return s.substr(0, labelLength);}\n        )\n      });\n      break;\n    case 'month':\n      scales.push({\n        name: 'time-'+fn,\n        type: 'ordinal',\n        domain: util.range(0, 12),\n        range: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'].map(\n            function(s) { return s.substr(0, labelLength);}\n          )\n      });\n      break;\n  }\n};\n\ntime.isOrdinalFn = function(fn) {\n  switch (fn) {\n    case 'seconds':\n    case 'minutes':\n    case 'hours':\n    case 'day':\n    case 'date':\n    case 'month':\n      return true;\n  }\n  return false;\n};\n\ntime.scale.type = function(fn, name) {\n  if (name === COLOR) {\n    return 'linear'; // this has order\n  }\n\n  return time.isOrdinalFn(fn) || name === COL || name === ROW ? 'ordinal' : 'linear';\n};\n\ntime.scale.domain = function(fn, name) {\n  var isColor = name === COLOR;\n  switch (fn) {\n    case 'seconds':\n    case 'minutes': return isColor ? [0,59] : util.range(0, 60);\n    case 'hours': return isColor ? [0,23] : util.range(0, 24);\n    case 'day': return isColor ? [0,6] : util.range(0, 7);\n    case 'date': return isColor ? [1,31] : util.range(1, 32);\n    case 'month': return isColor ? [0,11] : util.range(0, 12);\n  }\n  return null;\n};\n\n/** whether a particular time function has custom scale for labels implemented in time.scale */\ntime.hasScale = function(fn) {\n  switch (fn) {\n    case 'day':\n    case 'month':\n      return true;\n  }\n  return false;\n};\n\n\n","'use strict';\n\nrequire('./globals');\n\nvar consts = module.exports = {};\n\nconsts.encodingTypes = [X, Y, ROW, COL, SIZE, SHAPE, COLOR, ALPHA, TEXT, DETAIL];\n\nconsts.shorthand = {\n  delim:  '|',\n  assign: '=',\n  type:   ',',\n  func:   '_'\n};\n","'use strict';\n\nvar vldata = module.exports = {};\n\n/** Mapping from datalib's inferred type to Vega-lite's type */\nvldata.types = {\n  'boolean': 'O',\n  'number': 'Q',\n  'integer': 'Q',\n  'date': 'T',\n  'string': 'O'\n};\n\n","// utility for enc\n\n'use strict';\n\nvar consts = require('./consts'),\n  c = consts.shorthand,\n  vlfield = require('./field'),\n  util = require('./util'),\n  schema = require('./schema/schema'),\n  encTypes = schema.encTypes;\n\nvar vlenc = module.exports = {};\n\nvlenc.countRetinal = function(enc) {\n  var count = 0;\n  if (enc.color) count++;\n  if (enc.alpha) count++;\n  if (enc.size) count++;\n  if (enc.shape) count++;\n  return count;\n};\n\nvlenc.has = function(enc, encType) {\n  var fieldDef = enc && enc[encType];\n  return fieldDef && fieldDef.name;\n};\n\nvlenc.isAggregate = function(enc) {\n  for (var k in enc) {\n    if (vlenc.has(enc, k) && enc[k].aggr) {\n      return true;\n    }\n  }\n  return false;\n};\n\nvlenc.forEach = function(enc, f) {\n  var i = 0;\n  encTypes.forEach(function(k) {\n    if (vlenc.has(enc, k)) {\n      f(enc[k], k, i++);\n    }\n  });\n};\n\nvlenc.map = function(enc, f) {\n  var arr = [];\n  encTypes.forEach(function(k) {\n    if (vlenc.has(enc, k)) {\n      arr.push(f(enc[k], k, enc));\n    }\n  });\n  return arr;\n};\n\nvlenc.reduce = function(enc, f, init) {\n  var r = init;\n  encTypes.forEach(function(k) {\n    if (vlenc.has(enc, k)) {\n      r = f(r, enc[k], k,  enc);\n    }\n  });\n  return r;\n};\n\n/*\n * return key-value pairs of field name and list of fields of that field name\n */\nvlenc.fields = function(enc) {\n  return vlenc.reduce(enc, function (m, field) {\n    var fieldList = m[field.name] = m[field.name] || [],\n      containsType = fieldList.containsType = fieldList.containsType || {};\n\n    if (fieldList.indexOf(field) === -1) {\n      fieldList.push(field);\n      // augment the array with containsType.Q / O / T\n      containsType[field.type] = true;\n    }\n    return m;\n  }, {});\n};\n\nvlenc.shorthand = function(enc) {\n  return vlenc.map(enc, function(field, et) {\n    return et + c.assign + vlfield.shorthand(field);\n  }).join(c.delim);\n};\n\nvlenc.fromShorthand = function(shorthand) {\n  var enc = util.isArray(shorthand) ? shorthand : shorthand.split(c.delim);\n  return enc.reduce(function(m, e) {\n    var split = e.split(c.assign),\n        enctype = split[0].trim(),\n        field = split[1];\n\n    m[enctype] = vlfield.fromShorthand(field);\n    return m;\n  }, {});\n};","'use strict';\n\n// utility for field\n\nvar consts = require('./consts'),\n  c = consts.shorthand,\n  time = require('./compile/time'),\n  util = require('./util'),\n  schema = require('./schema/schema');\n\nvar vlfield = module.exports = {};\n\nvlfield.shorthand = function(f) {\n  var c = consts.shorthand;\n  return (f.aggr ? f.aggr + c.func : '') +\n    (f.fn ? f.fn + c.func : '') +\n    (f.bin ? 'bin' + c.func : '') +\n    (f.name || '') + c.type + f.type;\n};\n\nvlfield.shorthands = function(fields, delim) {\n  delim = delim || c.delim;\n  return fields.map(vlfield.shorthand).join(delim);\n};\n\nvlfield.fromShorthand = function(shorthand) {\n  var split = shorthand.split(c.type), i;\n  var o = {\n    name: split[0].trim(),\n    type: split[1].trim()\n  };\n\n  // check aggregate type\n  for (i in schema.aggr.enum) {\n    var a = schema.aggr.enum[i];\n    if (o.name.indexOf(a + '_') === 0) {\n      o.name = o.name.substr(a.length + 1);\n      if (a == 'count' && o.name.length === 0) o.name = '*';\n      o.aggr = a;\n      break;\n    }\n  }\n\n  // check time fn\n  for (i in schema.timefns) {\n    var f = schema.timefns[i];\n    if (o.name && o.name.indexOf(f + '_') === 0) {\n      o.name = o.name.substr(o.length + 1);\n      o.fn = f;\n      break;\n    }\n  }\n\n  // check bin\n  if (o.name && o.name.indexOf('bin_') === 0) {\n    o.name = o.name.substr(4);\n    o.bin = true;\n  }\n\n  return o;\n};\n\nvar typeOrder = {\n  O: 0,\n  G: 1,\n  T: 2,\n  Q: 3\n};\n\nvlfield.order = {};\n\nvlfield.order.type = function(field) {\n  if (field.aggr==='count') return 4;\n  return typeOrder[field.type];\n};\n\nvlfield.order.typeThenName = function(field) {\n  return vlfield.order.type(field) + '_' + field.name.toLowerCase();\n};\n\nvlfield.order.original = function() {\n  return 0; // no swap will occur\n};\n\nvlfield.order.name = function(field) {\n  return field.name;\n};\n\nvlfield.order.typeThenCardinality = function(field, stats){\n  return stats[field.name].distinct;\n};\n\nvar isType = vlfield.isType = function (fieldDef, type) {\n  return fieldDef.type === type;\n};\n\n/*\n * Most fields that use ordinal scale are dimensions.\n * However, YEAR(T), YEARMONTH(T) use time scale, not ordinal but are dimensions too.\n */\nvlfield.isOrdinalScale = function(field) {\n  return  isType(field, O) || field.bin ||\n    ( isType(field, T) && field.fn && time.isOrdinalFn(field.fn) );\n};\n\nfunction isDimension(field) {\n  return  isType(field, O) || !!field.bin ||\n    ( isType(field, T) && !!field.fn );\n}\n\n/**\n * For encoding, use encoding.isDimension() to avoid confusion.\n * Or use Encoding.isType if your field is from Encoding (and thus have numeric data type).\n * otherwise, do not specific isType so we can use the default isTypeName here.\n */\nvlfield.isDimension = function(field) {\n  return field && isDimension(field);\n};\n\nvlfield.isMeasure = function(field) {\n  return field && !isDimension(field);\n};\n\nvlfield.role = function(field) {\n  return isDimension(field) ? 'dimension' : 'measure';\n};\n\nvlfield.count = function() {\n  return {name:'*', aggr: 'count', type:'Q', displayName: vlfield.count.displayName};\n};\n\nvlfield.count.displayName = 'Number of Records';\n\nvlfield.isCount = function(field) {\n  return field.aggr === 'count';\n};\n\n/**\n * For encoding, use encoding.cardinality() to avoid confusion.  Or use Encoding.isType if your field is from Encoding (and thus have numeric data type).\n * otherwise, do not specific isType so we can use the default isTypeName here.\n */\nvlfield.cardinality = function(field, stats, filterNull) {\n  // FIXME need to take filter into account\n\n  var stat = stats[field.name];\n  var type = field.type;\n\n  filterNull = filterNull || {};\n\n  if (field.bin) {\n    var bins = util.getbins(stat, field.bin.maxbins || schema.MAXBINS_DEFAULT);\n    return (bins.stop - bins.start) / bins.step;\n  }\n  if (isType(field, T)) {\n    var cardinality = time.cardinality(field, stats, filterNull, type);\n    if(cardinality !== null) return cardinality;\n    //otherwise use calculation below\n  }\n  if (field.aggr) {\n    return 1;\n  }\n\n  // remove null\n  return stat.distinct -\n    (stat.nulls > 0 && filterNull[type] ? 1 : 0);\n};\n","'use strict';\n\n// declare global constant\nvar g = global || window;\n\ng.TABLE = 'table';\ng.RAW = 'raw';\ng.STACKED = 'stacked';\ng.INDEX = 'index';\n\ng.X = 'x';\ng.Y = 'y';\ng.ROW = 'row';\ng.COL = 'col';\ng.SIZE = 'size';\ng.SHAPE = 'shape';\ng.COLOR = 'color';\ng.ALPHA = 'alpha';\ng.TEXT = 'text';\ng.DETAIL = 'detail';\n\ng.O = 'O';\ng.Q = 'Q';\ng.T = 'T';\n","// Package of defining Vega-lite Specification's json schema\n\"use strict\";\n\nvar schema = module.exports = {},\n  util = require('../util');\n\nschema.util = require('./schemautil');\n\nschema.marktype = {\n  type: 'string',\n  enum: ['point', 'tick', 'bar', 'line', 'area', 'circle', 'square', 'text']\n};\n\nschema.aggr = {\n  type: 'string',\n  enum: ['avg', 'sum', 'median', 'min', 'max', 'count'],\n  supportedEnums: {\n    Q: ['avg', 'median', 'sum', 'min', 'max', 'count'],\n    O: [],\n    T: ['avg', 'median', 'min', 'max'],\n    '': ['count']\n  },\n  supportedTypes: {'Q': true, 'O': true, 'T': true, '': true}\n};\nschema.band = {\n  type: 'object',\n  properties: {\n    size: {\n      type: 'integer',\n      minimum: 0\n    },\n    padding: {\n      type: 'integer',\n      minimum: 0,\n      default: 1\n    }\n  }\n};\n\nschema.getSupportedRole = function(encType) {\n  return schema.schema.properties.enc.properties[encType].supportedRole;\n};\n\nschema.timefns = ['year', 'month', 'day', 'date', 'hours', 'minutes', 'seconds'];\n\nschema.defaultTimeFn = 'month';\n\nschema.fn = {\n  type: 'string',\n  enum: schema.timefns,\n  supportedTypes: {'T': true}\n};\n\n//TODO(kanitw): add other type of function here\n\nschema.scale_type = {\n  type: 'string',\n  enum: ['linear', 'log', 'pow', 'sqrt', 'quantile'],\n  default: 'linear',\n  supportedTypes: {'Q': true}\n};\n\nschema.field = {\n  type: 'object',\n  properties: {\n    name: {\n      type: 'string'\n    }\n  }\n};\n\nvar clone = util.duplicate;\nvar merge = schema.util.merge;\n\nschema.MAXBINS_DEFAULT = 15;\n\nvar bin = {\n  type: ['boolean', 'object'],\n  default: false,\n  properties: {\n    maxbins: {\n      type: 'integer',\n      default: schema.MAXBINS_DEFAULT,\n      minimum: 2\n    }\n  },\n  supportedTypes: {'Q': true} // TODO: add 'O' after finishing #81\n};\n\nvar typicalField = merge(clone(schema.field), {\n  type: 'object',\n  properties: {\n    type: {\n      type: 'string',\n      enum: ['O', 'Q', 'T']\n    },\n    aggr: schema.aggr,\n    fn: schema.fn,\n    bin: bin,\n    scale: {\n      type: 'object',\n      properties: {\n        type: schema.scale_type,\n        reverse: {\n          type: 'boolean',\n          default: false,\n          supportedTypes: {'Q': true, 'T': true}\n        },\n        zero: {\n          type: 'boolean',\n          description: 'Include zero',\n          default: true,\n          supportedTypes: {'Q': true, 'T': true}\n        },\n        nice: {\n          type: 'string',\n          enum: ['second', 'minute', 'hour', 'day', 'week', 'month', 'year'],\n          supportedTypes: {'T': true}\n        }\n      }\n    }\n  }\n});\n\nvar onlyOrdinalField = merge(clone(schema.field), {\n  type: 'object',\n  supportedRole: {\n    dimension: true\n  },\n  properties: {\n    type: {\n      type: 'string',\n      enum: ['O','Q', 'T'] // ordinal-only field supports Q when bin is applied and T when fn is applied.\n    },\n    fn: schema.fn,\n    bin: bin,\n    aggr: {\n      type: 'string',\n      enum: ['count'],\n      supportedTypes: {'O': true}\n    }\n  }\n});\n\nvar axisMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true},\n  properties: {\n    axis: {\n      type: 'object',\n      properties: {\n        grid: {\n          type: 'boolean',\n          default: true,\n          description: 'A flag indicate if gridlines should be created in addition to ticks.'\n        },\n        title: {\n          type: 'boolean',\n          default: true,\n          description: 'A title for the axis.'\n        },\n        titleOffset: {\n          type: 'integer',\n          default: undefined,  // auto\n          description: 'A title offset value for the axis.'\n        },\n        format: {\n          type: 'string',\n          default: undefined,  // auto\n          description: 'The formatting pattern for axis labels.'\n        },\n        maxLabelLength: {\n          type: 'integer',\n          default: 25,\n          minimum: 0,\n          description: 'Truncate labels that are too long.'\n        }\n      }\n    }\n  }\n};\n\nvar sortMixin = {\n  type: 'object',\n  properties: {\n    sort: {\n      type: 'array',\n      default: [],\n      items: {\n        type: 'object',\n        supportedTypes: {'O': true},\n        required: ['name', 'aggr'],\n        name: {\n          type: 'string'\n        },\n        aggr: {\n          type: 'string',\n          enum: ['avg', 'sum', 'min', 'max', 'count']\n        },\n        reverse: {\n          type: 'boolean',\n          default: false\n        }\n      }\n    }\n  }\n};\n\nvar bandMixin = {\n  type: 'object',\n  properties: {\n    band: schema.band\n  }\n};\n\nvar legendMixin = {\n  type: 'object',\n  properties: {\n    legend: {\n      type: 'boolean',\n      default: true\n    }\n  }\n};\n\nvar textMixin = {\n  type: 'object',\n  supportedMarktypes: {'text': true},\n  properties: {\n    text: {\n      type: 'object',\n      properties: {\n        align: {\n          type: 'string',\n          default: 'left'\n        },\n        baseline: {\n          type: 'string',\n          default: 'middle'\n        },\n        margin: {\n          type: 'integer',\n          default: 4,\n          minimum: 0\n        }\n      }\n    },\n    font: {\n      type: 'object',\n      properties: {\n        weight: {\n          type: 'string',\n          enum: ['normal', 'bold'],\n          default: 'normal'\n        },\n        size: {\n          type: 'integer',\n          default: 10,\n          minimum: 0\n        },\n        family: {\n          type: 'string',\n          default: 'Helvetica Neue'\n        },\n        style: {\n          type: 'string',\n          default: 'normal',\n          enum: ['normal', 'italic']\n        }\n      }\n    }\n  }\n};\n\nvar sizeMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, bar: true, circle: true, square: true, text: true},\n  properties: {\n    value: {\n      type: 'integer',\n      default: 30,\n      minimum: 0\n    }\n  }\n};\n\nvar colorMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true, 'text': true},\n  properties: {\n    value: {\n      type: 'string',\n      role: 'color',\n      default: 'steelblue'\n    },\n    scale: {\n      type: 'object',\n      properties: {\n        range: {\n          type: ['string', 'array']\n        }\n      }\n    }\n  }\n};\n\nvar alphaMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true, 'text': true},\n  properties: {\n    value: {\n      type: 'number',\n      default: undefined,  // auto\n      minimum: 0,\n      maximum: 1\n    }\n  }\n};\n\nvar shapeMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, circle: true, square: true},\n  properties: {\n    value: {\n      type: 'string',\n      enum: ['circle', 'square', 'cross', 'diamond', 'triangle-up', 'triangle-down'],\n      default: 'circle'\n    }\n  }\n};\n\nvar detailMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, line: true, circle: true, square: true}\n};\n\nvar rowMixin = {\n  properties: {\n    height: {\n      type: 'number',\n      minimum: 0,\n      default: 150\n    },\n    grid: {\n      type: 'boolean',\n      default: true,\n      description: 'A flag indicate if gridlines should be created in addition to ticks.'\n    },\n  }\n};\n\nvar colMixin = {\n  properties: {\n    width: {\n      type: 'number',\n      minimum: 0,\n      default: 150\n    },\n    axis: {\n      properties: {\n        maxLabelLength: {\n          type: 'integer',\n          default: 12,\n          minimum: 0,\n          description: 'Truncate labels that are too long.'\n        }\n      }\n    }\n  }\n};\n\nvar facetMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true, text: true},\n  properties: {\n    padding: {\n      type: 'number',\n      minimum: 0,\n      maximum: 1,\n      default: 0.1\n    }\n  }\n};\n\nvar requiredNameType = {\n  required: ['name', 'type']\n};\n\nvar multiRoleField = merge(clone(typicalField), {\n  supportedRole: {\n    measure: true,\n    dimension: true\n  }\n});\n\nvar quantitativeField = merge(clone(typicalField), {\n  supportedRole: {\n    measure: true,\n    dimension: 'ordinal-only' // using alpha / size to encoding category lead to order interpretation\n  }\n});\n\nvar onlyQuantitativeField = merge(clone(typicalField), {\n  supportedRole: {\n    measure: true\n  }\n});\n\nvar x = merge(clone(multiRoleField), axisMixin, bandMixin, requiredNameType, sortMixin);\nvar y = clone(x);\n\nvar facet = merge(clone(onlyOrdinalField), requiredNameType, facetMixin, sortMixin);\nvar row = merge(clone(facet), axisMixin, rowMixin);\nvar col = merge(clone(facet), axisMixin, colMixin);\n\nvar size = merge(clone(quantitativeField), legendMixin, sizeMixin, sortMixin);\nvar color = merge(clone(multiRoleField), legendMixin, colorMixin, sortMixin);\nvar alpha = merge(clone(quantitativeField), alphaMixin, sortMixin);\nvar shape = merge(clone(onlyOrdinalField), legendMixin, shapeMixin, sortMixin);\nvar detail = merge(clone(onlyOrdinalField), detailMixin, sortMixin);\n\n// we only put aggregated measure in pivot table\nvar text = merge(clone(onlyQuantitativeField), textMixin, sortMixin);\n\n// TODO add label\n\nvar filter = {\n  type: 'array',\n  items: {\n    type: 'object',\n    properties: {\n      operands: {\n        type: 'array',\n        items: {\n          type: ['string', 'boolean', 'integer', 'number']\n        }\n      },\n      operator: {\n        type: 'string',\n        enum: ['>', '>=', '=', '!=', '<', '<=', 'notNull']\n      }\n    }\n  }\n};\n\nvar data = {\n  type: 'object',\n  properties: {\n    // data source\n    formatType: {\n      type: 'string',\n      enum: ['json', 'csv'],\n      default: 'json'\n    },\n    url: {\n      type: 'string',\n      default: undefined\n    },\n    values: {\n      type: 'array',\n      description: 'Pass array of objects instead of a url to a file.',\n      items: {\n        type: 'object',\n        additionalProperties: true\n      }\n    }\n  }\n};\n\nvar config = {\n  type: 'object',\n  properties: {\n    // template\n    width: {\n      type: 'integer',\n      default: undefined\n    },\n    height: {\n      type: 'integer',\n      default: undefined\n    },\n    viewport: {\n      type: 'array',\n      items: {\n        type: 'integer'\n      },\n      default: undefined\n    },\n    gridColor: {\n      type: 'string',\n      role: 'color',\n      default: 'black'\n    },\n    gridOpacity: {\n      type: 'number',\n      minimum: 0,\n      maximum: 1,\n      default: 0.08\n    },\n\n    // filter null\n    filterNull: {\n      type: 'object',\n      properties: {\n        O: {type:'boolean', default: false},\n        Q: {type:'boolean', default: true},\n        T: {type:'boolean', default: true}\n      }\n    },\n    toggleSort: {\n      type: 'string',\n      default: 'O'\n    },\n\n    // single plot\n    singleHeight: {\n      // will be overwritten by bandWidth * (cardinality + padding)\n      type: 'integer',\n      default: 200,\n      minimum: 0\n    },\n    singleWidth: {\n      // will be overwritten by bandWidth * (cardinality + padding)\n      type: 'integer',\n      default: 200,\n      minimum: 0\n    },\n    // band size\n    largeBandSize: {\n      type: 'integer',\n      default: 21,\n      minimum: 0\n    },\n    smallBandSize: {\n      //small multiples or single plot with high cardinality\n      type: 'integer',\n      default: 12,\n      minimum: 0\n    },\n    largeBandMaxCardinality: {\n      type: 'integer',\n      default: 10\n    },\n    // small multiples\n    cellPadding: {\n      type: 'number',\n      default: 0.1\n    },\n    cellGridColor: {\n      type: 'string',\n      role: 'color',\n      default: 'black'\n    },\n    cellGridOpacity: {\n      type: 'number',\n      minimum: 0,\n      maximum: 1,\n      default: 0.15\n    },\n    cellBackgroundColor: {\n      type: 'string',\n      role: 'color',\n      default: 'transparent'\n    },\n    textCellWidth: {\n      type: 'integer',\n      default: 90,\n      minimum: 0\n    },\n\n    // marks\n    strokeWidth: {\n      type: 'integer',\n      default: 2,\n      minimum: 0\n    },\n    singleBarOffset: {\n      type: 'integer',\n      default: 5,\n      minimum: 0\n    },\n\n    // scales\n    timeScaleLabelLength: {\n      type: 'integer',\n      default: 3,\n      minimum: 0\n    },\n    // other\n    characterWidth: {\n      type: 'integer',\n      default: 6\n    }\n  }\n};\n\n/** @type Object Schema of a vega-lite specification */\nschema.schema = {\n  $schema: 'http://json-schema.org/draft-04/schema#',\n  description: 'Schema for Vega-lite specification',\n  type: 'object',\n  required: ['marktype', 'enc', 'data'],\n  properties: {\n    data: data,\n    marktype: schema.marktype,\n    enc: {\n      type: 'object',\n      properties: {\n        x: x,\n        y: y,\n        row: row,\n        col: col,\n        size: size,\n        color: color,\n        alpha: alpha,\n        shape: shape,\n        text: text,\n        detail: detail\n      }\n    },\n    filter: filter,\n    config: config\n  }\n};\n\nschema.encTypes = util.keys(schema.schema.properties.enc.properties);\n\n/** Instantiate a verbose vl spec from the schema */\nschema.instantiate = function() {\n  return schema.util.instantiate(schema.schema);\n};\n","'use strict';\n\nvar schemautil = module.exports = {},\n  util = require('../util');\n\nvar isEmpty = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\nschemautil.extend = function(instance, schema) {\n  return schemautil.merge(schemautil.instantiate(schema), instance);\n};\n\n// instantiate a schema\nschemautil.instantiate = function(schema) {\n  var val;\n  if (schema === undefined) {\n    return undefined;\n  } else if ('default' in schema) {\n    val = schema.default;\n    return util.isObject(val) ? util.duplicate(val) : val;\n  } else if (schema.type === 'object') {\n    var instance = {};\n    for (var name in schema.properties) {\n      val = schemautil.instantiate(schema.properties[name]);\n      if (val !== undefined) {\n        instance[name] = val;\n      }\n    }\n    return instance;\n  } else if (schema.type === 'array') {\n    return [];\n  }\n  return undefined;\n};\n\n// remove all defaults from an instance\nschemautil.subtract = function(instance, defaults) {\n  var changes = {};\n  for (var prop in instance) {\n    var def = defaults[prop];\n    var ins = instance[prop];\n    // Note: does not properly subtract arrays\n    if (!defaults || def !== ins) {\n      if (typeof ins === 'object' && !util.isArray(ins) && def) {\n        var c = schemautil.subtract(ins, def);\n        if (!isEmpty(c))\n          changes[prop] = c;\n      } else if (!util.isArray(ins) || ins.length > 0) {\n        changes[prop] = ins;\n      }\n    }\n  }\n  return changes;\n};\n\nschemautil.merge = function(/*dest*, src0, src1, ...*/){\n  var dest = arguments[0];\n  for (var i=1 ; i<arguments.length; i++) {\n    dest = merge(dest, arguments[i]);\n  }\n  return dest;\n};\n\n// recursively merges src into dest\nfunction merge(dest, src) {\n  if (typeof src !== 'object' || src === null) {\n    return dest;\n  }\n\n  for (var p in src) {\n    if (!src.hasOwnProperty(p)) {\n      continue;\n    }\n    if (src[p] === undefined) {\n      continue;\n    }\n    if (typeof src[p] !== 'object' || src[p] === null) {\n      dest[p] = src[p];\n    } else if (typeof dest[p] !== 'object' || dest[p] === null) {\n      dest[p] = merge(src[p].constructor === Array ? [] : {}, src[p]);\n    } else {\n      merge(dest[p], src[p]);\n    }\n  }\n  return dest;\n}","'use strict';\n\nvar util = module.exports = require('datalib/src/util');\n\nutil.extend(util, require('datalib/src/generate'));\nutil.bin = require('datalib/src/bins/bins');\n\nutil.isin = function(item, array) {\n  return array.indexOf(item) !== -1;\n};\n\nutil.forEach = function(obj, f, thisArg) {\n  if (obj.forEach) {\n    obj.forEach.call(thisArg, f);\n  } else {\n    for (var k in obj) {\n      f.call(thisArg, obj[k], k , obj);\n    }\n  }\n};\n\nutil.reduce = function(obj, f, init, thisArg) {\n  if (obj.reduce) {\n    return obj.reduce.call(thisArg, f, init);\n  } else {\n    for (var k in obj) {\n      init = f.call(thisArg, init, obj[k], k, obj);\n    }\n    return init;\n  }\n};\n\nutil.map = function(obj, f, thisArg) {\n  if (obj.map) {\n    return obj.map.call(thisArg, f);\n  } else {\n    var output = [];\n    for (var k in obj) {\n      output.push( f.call(thisArg, obj[k], k, obj));\n    }\n  }\n};\n\nutil.any = function(arr, f) {\n  var i = 0, k;\n  for (k in arr) {\n    if (f(arr[k], k, i++)) return true;\n  }\n  return false;\n};\n\nutil.all = function(arr, f) {\n  var i = 0, k;\n  for (k in arr) {\n    if (!f(arr[k], k, i++)) return false;\n  }\n  return true;\n};\n\nutil.getbins = function(stats, maxbins) {\n  return util.bin({\n    min: stats.min,\n    max: stats.max,\n    maxbins: maxbins\n  });\n};\n\n/**\n * x[p[0]]...[p[n]] = val\n * @param noaugment determine whether new object should be added f\n * or non-existing properties along the path\n */\nutil.setter = function(x, p, val, noaugment) {\n  for (var i=0; i<p.length-1; ++i) {\n    if (!noaugment && !(p[i] in x)){\n      x = x[p[i]] = {};\n    } else {\n      x = x[p[i]];\n    }\n  }\n  x[p[i]] = val;\n};\n\n\n/**\n * returns x[p[0]]...[p[n]]\n * @param augment determine whether new object should be added f\n * or non-existing properties along the path\n */\nutil.getter = function(x, p, noaugment) {\n  for (var i=0; i<p.length; ++i) {\n    if (!noaugment && !(p[i] in x)){\n      x = x[p[i]] = {};\n    } else {\n      x = x[p[i]];\n    }\n  }\n  return x;\n};\n\nutil.error = function(msg) {\n  console.error('[VL Error]', msg);\n};\n\n"],"sourceRoot":"/source/"}